import { BigNumber, ethers } from "ethers";
import ProjectConfig from "../ProjectConfigType";

const projectConfig: ProjectConfig = {
  artworkConstructorData: {
    name: "Metta",
    symbol: "METTA",
    artistAddress: "0xAa9D46AE079851116967c6573f961B304095C34a",
    royaltyFeeNumerator: BigNumber.from(1000),
    royaltyPayees: ["0xAa9D46AE079851116967c6573f961B304095C34a"],
    royaltyShares: [BigNumber.from(100)],
  },
  traitsConstructorData: {
    traitsSetupData: {
      traitTypeNames: [
        "View",
        "Connections",
        "Cell Dynamic",
        "Cell Design",
        "Color Mode",
        "Stroke",
        "Mode",
      ],
      traitTypeValues: [
        "nodes",
        "connections",
        "cellDynamic",
        "cellDesign",
        "colorMode",
        "thickness",
        "mode",
      ],
      traitNames: [
        "Macro",
        "Medium",
        "Full",
        "Wide",
        "Minimal",
        "Intermediate",
        "Abundant",
        "Discreet",
        "Adjacent",
        "Interwoven",
        "Lines & Walls",
        "Startrail",
        "Popcorn",
        "Shards",
        "Invisible",
        "Tri-X",
        "Synchronized",
        "Agree To Disagree",
        "Gradient",
        "Light",
        "Regular",
        "Bold",
        "Ephemeral",
        "Enduring",
        "Veiled",
        "Ephemeral Frenzy",
        "Enduring Frenzy",
      ],
      traitValues: [
        "5",
        "20",
        "60",
        "125",
        "2",
        "4",
        "10",
        "0",
        "1",
        "2",
        "0",
        "1",
        "2",
        "3",
        "4",
        "0",
        "1",
        "2",
        "3",
        "0",
        "1",
        "2",
        "0",
        "1",
        "2",
        "3",
        "4",
      ],
      traitTypeIndexes: [
        0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6,
        6, 6, 6,
      ],
      traitMaxSupplys: [
        BigNumber.from(72),
        BigNumber.from(128),
        BigNumber.from(120),
        BigNumber.from(80),
        BigNumber.from(104),
        BigNumber.from(136),
        BigNumber.from(160),
        BigNumber.from(96),
        BigNumber.from(200),
        BigNumber.from(104),
        BigNumber.from(120),
        BigNumber.from(104),
        BigNumber.from(88),
        BigNumber.from(48),
        BigNumber.from(40),
        BigNumber.from(120),
        BigNumber.from(120),
        BigNumber.from(96),
        BigNumber.from(64),
        BigNumber.from(104),
        BigNumber.from(160),
        BigNumber.from(136),
        BigNumber.from(128),
        BigNumber.from(96),
        BigNumber.from(80),
        BigNumber.from(64),
        BigNumber.from(32),
      ],
    },
    primarySalesPayees: ["0xAa9D46AE079851116967c6573f961B304095C34a"],
    primarySalesShares: [BigNumber.from(100)],
    royaltyPayees: ["0xAa9D46AE079851116967c6573f961B304095C34a"],
    royaltyShares: [BigNumber.from(100)],
  },
  setupData: {
    auctionExponential: true,
    auctionStartTime: Math.trunc(Date.now() / 1000) + 10000,
    auctionEndTime: Math.trunc(Date.now() / 1000) + 10000,
    auctionStartPrice: ethers.utils.parseEther("0.1"),
    auctionEndPrice: ethers.utils.parseEther("0.01"),
    auctionPriceSteps: 10,
    traitsSaleStartTime: Math.trunc(Date.now() / 1000) + 10000,
    whitelistStartTime: Math.trunc(Date.now() / 1000) + 10000,
  },
};

export default projectConfig;
