import { BigNumber, ethers } from "ethers";
import ProjectConfig from "./ProjectConfigType";

const projectConfig: ProjectConfig = {
  artworkConstructorData: {
    royaltyFeeNumerator: BigNumber.from(1000),
    name: "Metta",
    symbol: "INT-MTT",
    baseURI: "https://historian.encryptafile.com/artwork/",
    scriptJSON: `{
        "name": "Metta",
        "description": "Metta by Matto",
        "artistName": "Matto",
        "website": "https://matto.xyz/",
        "license": "MIT",
        "scriptLibrary": "p5.js",
        "scriptLibraryVersion": "1.0.0",
        "aspectRatio": "9:16"
      }`,
    owner: "0xAa9D46AE079851116967c6573f961B304095C34a",
    royaltyPayees: ["0xAa9D46AE079851116967c6573f961B304095C34a"],
    royaltyShares: [BigNumber.from(100)],
  },
  traitsConstructorData: {
    royaltyFeeNumerator: BigNumber.from(1000),
    uri: "https://historian.encryptafile.com/traits/",
    owner: "0xAa9D46AE079851116967c6573f961B304095C34a",
    primarySalesPayees: ["0xAa9D46AE079851116967c6573f961B304095C34a"],
    primarySalesShares: [BigNumber.from(100)],
    royaltyPayees: ["0xAa9D46AE079851116967c6573f961B304095C34a"],
    royaltyShares: [BigNumber.from(100)],
  },
  createTraitsData: {
    traitTypeNames: [
      "Nodes",
      "Connections",
      "Reach",
      "Cell Design",
      "Cell Color Mode",
      "Ring Color Mode",
      "Thickness",
      "Fade",
    ],
    traitTypeValues: [
      "nodes",
      "connections",
      "reach",
      "cellDesign",
      "cellColorMode",
      "ringColorMode",
      "thickness",
      "fade",
    ],
    traitNames: [
      "Minimum",
      "Low",
      "Medium",
      "High",
      "Low",
      "Medium",
      "High",
      "Low",
      "Medium",
      "High",
      "Lines & Walls",
      "Startrail",
      "Popcorn",
      "Shards",
      "Invisible",
      "Tri-X",
      "Synchronized",
      "Agree To Disagree",
      "Gradient",
      "Tri-X",
      "Synchronized",
      "Invisible",
      "Micron003",
      "Micron01",
      "Micron08",
      "Yes",
      "No",
    ],
    traitValues: [
      "minimum",
      "low",
      "medium",
      "high",
      "low",
      "medium",
      "high",
      "low",
      "medium",
      "high",
      "linesAndWalls",
      "startrail",
      "popcorn",
      "shards",
      "invisible",
      "triX",
      "synchronized",
      "agreeToDisagree",
      "gradient",
      "triX",
      "synchronized",
      "invisible",
      "micron003",
      "micron01",
      "micron08",
      "yes",
      "no",
    ],
    traitTypeIndexes: [
      0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6,
      7, 7,
    ],
    traitMaxSupplys: [
      BigNumber.from(8),
      BigNumber.from(30),
      BigNumber.from(40),
      BigNumber.from(22),
      BigNumber.from(22),
      BigNumber.from(34),
      BigNumber.from(44),
      BigNumber.from(30),
      BigNumber.from(50),
      BigNumber.from(20),
      BigNumber.from(30),
      BigNumber.from(26),
      BigNumber.from(22),
      BigNumber.from(12),
      BigNumber.from(10),
      BigNumber.from(30),
      BigNumber.from(32),
      BigNumber.from(22),
      BigNumber.from(16),
      BigNumber.from(42),
      BigNumber.from(36),
      BigNumber.from(22),
      BigNumber.from(22),
      BigNumber.from(46),
      BigNumber.from(32),
      BigNumber.from(40),
      BigNumber.from(60),
    ],
  },
  scheduleAuctionData: {
    auctionStartTime: Math.trunc(Date.now() / 1000) + 10,
    auctionEndTime: Math.trunc(Date.now() / 1000) + 10,
    // auctionStartTime: 1696003200,
    // auctionEndTime: 1696006800,
    auctionStartPrice: ethers.utils.parseEther("0.1"),
    auctionEndPrice: ethers.utils.parseEther("0.01"),
    // traitsSaleStartTime: 1696006800,
    traitsSaleStartTime: Math.trunc(Date.now() / 1000) + 10,
  },
  scripts: [``],
};

export default projectConfig;
