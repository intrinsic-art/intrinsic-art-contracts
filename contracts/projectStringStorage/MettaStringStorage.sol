// SPDX-License-Identifier: GNU GPLv3
pragma solidity =0.8.19;

import {IStringStorage} from "../interfaces/IStringStorage.sol";

contract MettaStringStorage is IStringStorage {
  // strings stored in separate variables instead of array
  // since solidity doesn't support constant string array variables
  string constant private _stringSlot0 = "{\"name\": \"Metta\",\"description\": \"Metta by Matto\",\"artistName\": \"Matto\",\"website\": \"https://matto.xyz/\",\"license\": \"CC BY-NC 4.0\",\"scriptLibrary\": \"na\",\"aspectRatio\": \"16:9\"}";
  string constant private _stringSlot1 ="console.log(\"Metta v4.1 \\xa9 2023 Matto\"),console.log(`TOKEN ID: ${artwork.tokenID}`),console.log(`TOKEN ENTROPY: ${artwork.seed}`),console.log(\"\");let tokenId=artwork.tokenID,tokenEntropy=artwork.seed,tokenEntropyPairs=createPairs(tokenEntropy),p=[],matte=16,hue,u,nodes,freeze,reach,connections,thickness,fade,cellDesign,cellColorMode,gradientShift,seekerNodeMod,paused=!0,count=0,R=(e=1)=>Math.floor(random()*e);function setup(){let e,t;window.innerWidth>window.innerHeight?(t=.5625*(e=window.innerWidth))>window.innerHeight&&(e=(t=window.innerHeight)/.5625):(e=.5625*(t=window.innerHeight))>window.innerWidth&&(t=(e=window.innerWidth)/.5625),createCanvas(e,t),colorMode(HSL,360,100,100);randomSeed(getValue(0,255)*getValue(0,255)*getValue(0,255)*getValue(0,255)),hue=20*getValue(1,18),nodes=\"minimum\"==artwork.traits.nodes?5:\"low\"==artwork.traits.nodes?20:\"medium\"==artwork.traits.nodes?60:125,connections=\"low\"==artwork.traits.connections?2:\"medium\"==artwork.traits.connections?4:10,thickness=\"micron003\"==artwork.traits.thickness?0:\"micron01\"==artwork.traits.thickness?1:2,fade=\"yes\"==artwork.traits.fade,cellDesign=\"linesAndWalls\"==artwork.traits.cellDesign?0:\"startrail\"==artwork.traits.cellDesign?1:\"popcorn\"==artwork.traits.cellDesign?2:\"shards\"==artwork.traits.cellDesign?3:4,cellColorMode=\"triX\"==artwork.traits.cellColorMode?0:\"synchronized\"==artwork.traits.cellColorMode?1:\"agreeToDisaggree\"==artwork.traits.cellColorMode?2:3,ringColorMode=\"invisible\"==artwork.traits.ringColorMode?2:\"triX\"==artwork.traits.ringColorMode?0:1,reach=\"low\"==artwork.traits.reach?0:\"medium\"==artwork.traits.reach?1:2,gradientShift=getValue(0,360),frameRate(freeze=95),seekerNodeMod=5==nodes?3:Math.floor(nodes/2),u=(thickness+1)*(window.innerHeight+window.innerWidth)/4e3,fade?background(10):background(0);for(let o=0;o<nodes;o++)p.push({x:R(1.5*e)-e/4,y:R(1.5*t)-t/4,r:0,c:[R(70)+20,R(90)+10]}),0==o&&(0==cellColorMode?console.log(\"(Palette: B/W)\"):3==cellColorMode?console.log(\"(Palette: Gradient)\"):(console.log(\"(Primary Hue: \"+hue+\")\"),2==cellColorMode&&console.log(\"(Secondary Hue: \"+(hue+180)%360+\")\")))}function draw(){if(!paused||count<freeze){++count<freeze?frameRate(freeze-count+3):frameRate(30),fade&&(fill(0,100,0,.02),noStroke(),rect(0,0,width,height)),noFill();for(let e=0;e<1e3;e++){let t=R(width),o=R(height),n=width**3,r,l;for(let i=0;i<p.length;i++)(l=dist(t,o,p[i].x,p[i].y))<n&&(n=l,r=i);strokeWeight(.5*u);let $,s;0==cellColorMode?($=hue,s=0):1==cellColorMode?($=hue,s=p[r].c[0]):2==cellColorMode?r%2==0?($=hue,s=p[r].c[0]):($=(hue+180)%360,s=p[r].c[0]):3==cellColorMode&&(tokenId%3==0?($=p[r].x/width*360+gradientShift,s=p[r].c[0]):tokenId%3==1?($=p[r].y/height*360+gradientShift,s=p[r].c[0]):($=(p[r].x+p[r].y)/(width+height)*360+gradientShift,s=p[r].c[0])),stroke($,s,p[r].c[1]);let a=p[r].x-t,c=p[r].y-o,d=20*Math.sqrt(a*a+c*c),h=p[r].x+.75*(t-p[r].x),_=p[r].y+.75*(o-p[r].y),g=p[r].x+1.1*(t-p[r].x),y=p[r].y+1.1*(o-p[r].y),f=a/d,x=c/d,k,m,M=1==cellDesign?d/20:0==cellDesign?d/30:d/40,C=t+-x*M,D=o+f*M,P=t+x*M,E=o+-f*M;if(0==cellDesign)0==reach?line(p[r].x,p[r].y,h,_):1==reach?line(p[r].x,p[r].y,t,o):line(p[r].x,p[r].y,g,y),line(C,D,P,E);else if(1==cellDesign){let w;w=0==reach?.75*n:1==reach?n:1.25*n;let N=Math.atan2(D-p[r].y,C-p[r].x),I=Math.atan2(E-p[r].y,P-p[r].x);arc(p[r].x,p[r].y,2*w,2*w,N,I)}else if(2==cellDesign)fill($,s,p[r].c[1]),0==reach?circle(h,_,1.5*u):1==reach?circle(t,o,1.5*u):circle(g,y,1.5*u),noFill();else if(3==cellDesign){let H=0==reach?.7:.9;reach<2&&(C=p[r].x+H*(C-p[r].x),D=p[r].y+H*(D-p[r].y),P=p[r].x+H*(P-p[r].x),E=p[r].y+H*(E-p[r].y)),0==reach?quad(p[r].x,p[r].y,C,D,h,_,P,E):1==reach?quad(p[r].x,p[r].y,C,D,t,o,P,E):quad(h,_,C,D,g,y,P,E)}n>p[r].r&&(p[r].r=n,strokeWeight(50/p[r].r*u),ringColorMode<2&&(0==ringColorMode?stroke(0,0,p[r].c[1]):1==ringColorMode&&stroke(hue,p[r].c[0],p[r].c[1]),circle(p[r].x,p[r].y,2*p[r].r)))}moveTowardNClosest(connections)}}function moveTowardNClosest(e){for(let t=0;t<p.length;t++){let o=[];for(let n=0;n<p.length;n++)if(t!==n){let r=dist(p[t].x,p[t].y,p[n].x,p[n].y);o.push({dist:r,point:p[n]})}o.sort((e,t)=>e.dist-t.dist);let l=o[0].dist;strokeWeight(2*u),circle(p[t].x,p[t].y,3*u);for(let i=0;i<e&&i<o.length;i++){let $=u/Math.pow(1.5,i);line(p[t].x,p[t].y,o[i].point.x,o[i].point.y),strokeWeight($*u);let s=1/(500*Math.pow(2,i));0!=t&&t%seekerNodeMod==0&&(s*=10),p[t].x+=(o[i].point.x-p[t].x)*s,p[t].y+=(o[i].point.y-p[t].y)*s}if(l<=5){if(p[t].x=R(1.5*width)-width/4,p[t].y=R(1.5*height)-height/4,p[t].r=0,0==t){let a=tokenId%2==0?hue-10:hue+10;a<0?a=360+a:a>360&&(a-=360),hue=a,console.log(\"(New hue: \"+hue+\")\")}p[t].c=[R(70)+20,R(90)+10]}}}function createPairs(e){let t=[];for(let o=0;o<(e.length-2)/2;o++)t.push(parseInt(e.slice(2+2*o,4+2*o),16));return t}function getValue(e,t){if(0===tokenEntropyPairs.length)throw Error(\"No entropy values left in tokenEntropyPairs.\");let o=Math.floor(tokenEntropyPairs[0]*((t-e+1)/256)+e);return tokenEntropyPairs.shift(),o}function doubleClicked(){paused=!paused}function keyPressed(){return\"p\"===key||\"P\"===key?paused=!paused:\"s\"===key||\"S\"===key?saveCanvas(`Community-${tokenId}_${tokenEntropy}`,\"png\"):\"<\"===key?(0!=matte?matte--:matte=16,updateMatte()):\">\"===key&&(16!=matte?matte++:matte=0,updateMatte()),!1}function updateMatte(){document.body.style.backgroundColor=`rgb(${16*matte},${16*matte},${16*matte})`}";

  /** @inheritdoc IStringStorage*/
  function stringAtSlot(uint8 _slot) external pure returns (string memory) {
    if (_slot == 0) return _stringSlot0;
    if (_slot == 1) return _stringSlot1;
    revert EmptySlot();
  }
}