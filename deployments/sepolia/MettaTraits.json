{
  "address": "0xF09D7F5b01a9ef13E386881fA4185296552bE0Ae",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_projectRegistry",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string[]",
              "name": "traitTypeNames",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "traitTypeValues",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "traitNames",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "traitValues",
              "type": "string[]"
            },
            {
              "internalType": "uint256[]",
              "name": "traitTypeIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "traitMaxSupplys",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ITraits.TraitsSetup",
          "name": "_traitsSetup",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "_primarySalesPayees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_primarySalesShares",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_whitelistAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_whitelistAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadySetup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionNotLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEthAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTraits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoWhitelistMints",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSetup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyArtwork",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProjectRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TraitsSaleStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WhitelistStartTime",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_auctionStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_auctionEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_auctionStartPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_auctionEndPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_auctionPriceSteps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_auctionExponential",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_traitsSaleStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_whitelistStartTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "TraitsMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artwork",
      "outputs": [
        {
          "internalType": "contract IArtwork",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionExponential",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionPriceSteps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintTraits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_artistAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "mintTraitsArtistProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "mintTraitsWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectRegistry",
      "outputs": [
        {
          "internalType": "contract IProjectRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "releasable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "releasable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "trait",
      "outputs": [
        {
          "internalType": "string",
          "name": "_traitName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitValue",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitTypeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitTypeValue",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitPriceStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitTypes",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTotalSupplys",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitMaxSupplys",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitsSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "transferTraitsToMintArtwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStartPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionPriceSteps",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_auctionExponential",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_traitsSaleStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_whitelistStartTime",
          "type": "uint256"
        }
      ],
      "name": "updateAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "whitelistMintsRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbe99fc26fee6a457c04713ebacbbce6c3a18861a99147db998c5184bea58ceef",
  "receipt": {
    "to": null,
    "from": "0xAa9D46AE079851116967c6573f961B304095C34a",
    "contractAddress": "0xF09D7F5b01a9ef13E386881fA4185296552bE0Ae",
    "transactionIndex": 38,
    "gasUsed": "7292999",
    "logsBloom": "0x
    "blockHash": "0x2932788d57f77636cf90b10130d3685349c90463b70a3e45a66a0835c17334cf",
    "transactionHash": "0xbe99fc26fee6a457c04713ebacbbce6c3a18861a99147db998c5184bea58ceef",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 4911088,
        "transactionHash": "0xbe99fc26fee6a457c04713ebacbbce6c3a18861a99147db998c5184bea58ceef",
        "address": "0xF09D7F5b01a9ef13E386881fA4185296552bE0Ae",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000aa9d46ae079851116967c6573f961b304095c34a0000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 40,
        "blockHash": "0x2932788d57f77636cf90b10130d3685349c90463b70a3e45a66a0835c17334cf"
      }
    ],
    "blockNumber": 4911088,
    "cumulativeGasUsed": "9941437",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x73457eA2661d36Acb7879995a738E8853aFC2547",
    {
      "traitTypeNames": [
        "View",
        "Connections",
        "Cell Dynamic",
        "Cell Design",
        "Color Mode",
        "Stroke",
        "Mode"
      ],
      "traitTypeValues": [
        "nodes",
        "connections",
        "cellDynamic",
        "cellDesign",
        "colorMode",
        "thickness",
        "mode"
      ],
      "traitNames": [
        "Macro",
        "Medium",
        "Full",
        "Wide",
        "Minimal",
        "Intermediate",
        "Abundant",
        "Discreet",
        "Adjacent",
        "Interwoven",
        "Lines & Walls",
        "Startrail",
        "Popcorn",
        "Shards",
        "Invisible",
        "Tri-X",
        "Synchronized",
        "Agree To Disagree",
        "Gradient",
        "Light",
        "Regular",
        "Bold",
        "Ephemeral",
        "Enduring",
        "Veiled",
        "Ephemeral Frenzy",
        "Enduring Frenzy"
      ],
      "traitValues": [
        "5",
        "20",
        "60",
        "125",
        "2",
        "4",
        "10",
        "0",
        "1",
        "2",
        "0",
        "1",
        "2",
        "3",
        "4",
        "0",
        "1",
        "2",
        "3",
        "0",
        "1",
        "2",
        "0",
        "1",
        "2",
        "3",
        "4"
      ],
      "traitTypeIndexes": [
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        6,
        6,
        6,
        6,
        6
      ],
      "traitMaxSupplys": [
        "72",
        "128",
        "120",
        "80",
        "104",
        "136",
        "160",
        "96",
        "200",
        "104",
        "120",
        "104",
        "88",
        "48",
        "40",
        "120",
        "120",
        "96",
        "64",
        "104",
        "160",
        "136",
        "128",
        "96",
        "80",
        "64",
        "32"
      ]
    },
    [
      "0xAa9D46AE079851116967c6573f961B304095C34a"
    ],
    [
      "100"
    ],
    [
      "0xAa9D46AE079851116967c6573f961B304095C34a"
    ],
    [
      "100"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "91710114290dca0c547d7cd4877d9d8a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_projectRegistry\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string[]\",\"name\":\"traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"traitTypeValues\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"traitMaxSupplys\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ITraits.TraitsSetup\",\"name\":\"_traitsSetup\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_primarySalesPayees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_primarySalesShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_whitelistAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_whitelistAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEthAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTraits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWhitelistMints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyArtwork\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProjectRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TraitsSaleStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhitelistStartTime\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionStartPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionEndPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionPriceSteps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_auctionExponential\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_traitsSaleStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_whitelistStartTime\",\"type\":\"uint256\"}],\"name\":\"AuctionScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"TraitsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artwork\",\"outputs\":[{\"internalType\":\"contract IArtwork\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionExponential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionPriceSteps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mintTraits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"mintTraitsArtistProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"mintTraitsWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectRegistry\",\"outputs\":[{\"internalType\":\"contract IProjectRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"trait\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_traitName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitValue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitTypeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitTypeValue\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPriceStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitTypes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTotalSupplys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitMaxSupplys\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitsSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferTraitsToMintArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionPriceSteps\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_auctionExponential\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_traitsSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistStartTime\",\"type\":\"uint256\"}],\"name\":\"updateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"whitelistMintsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"maxSupply(uint256)\":{\"returns\":{\"_maxSupply\":\"the max supply of the token\"}},\"mintTraits(address,uint256[],uint256[])\":{\"params\":{\"_recipient\":\"the address to receive the trait tokens\",\"_traitAmounts\":\"the amounts of each token ID to buy\",\"_traitTokenIds\":\"the trait token IDs to buy\"}},\"mintTraitsArtistProof(address,uint256[])\":{\"params\":{\"_artistAddress\":\"the artist address to receive the trait tokens\",\"_traitTokenIds\":\"the trait token IDs to mint the artwork with\"}},\"mintTraitsWhitelist(address,uint256[])\":{\"params\":{\"_recipient\":\"the address to receive the trait tokens\",\"_traitTokenIds\":\"the trait token IDs to mint the artwork with\"}},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"releasable(address)\":{\"details\":\"Getter for the amount of payee's releasable Ether.\"},\"releasable(address,address)\":{\"details\":\"Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an IERC20 contract.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setup(bytes)\":{\"params\":{\"_data\":\"bytes data containt the artwork contract address and auction data\"}},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"the interface ID to check\"},\"returns\":{\"_0\":\"bool True if the interface is supported, otherwise False\"}},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"trait(uint256)\":{\"params\":{\"_tokenId\":\"token ID to get info about\"},\"returns\":{\"_traitName\":\"human readable trait name\",\"_traitTypeName\":\"human readable trait type name\",\"_traitTypeValue\":\"trait type value used in the generative script\",\"_traitValue\":\"trait type value used in the generative script\"}},\"traitPrice()\":{\"returns\":{\"_0\":\"the current trait price in ether\"}},\"traitPriceStep()\":{\"returns\":{\"_0\":\"the current price step\"}},\"traitTypes()\":{\"returns\":{\"_traitTypeNames\":\"human readable trait type names\",\"_traitTypeValues\":\"trait type values used in the generative script\"}},\"traits()\":{\"returns\":{\"_traitMaxSupplys\":\"max supply of each trait\",\"_traitNames\":\"human readable trait names\",\"_traitTokenIds\":\"token IDs of the traits\",\"_traitTotalSupplys\":\"total supply of each trait\",\"_traitTypeIndexes\":\"trait type index each trait belongs to\",\"_traitTypeNames\":\"human readable trait type names\",\"_traitTypeValues\":\"trait type values used in the generative script\",\"_traitValues\":\"trait type values used in the generative script\"}},\"transferTraitsToMintArtwork(address,uint256[])\":{\"params\":{\"_caller\":\"the address creating the artwork\",\"_traitTokenIds\":\"the trait token IDs used to create the artwork\"}},\"updateAuction(uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256)\":{\"params\":{\"_auctionEndPrice\":\"trait price the auction ends at\",\"_auctionEndTime\":\"timestamp the auction ends at\",\"_auctionExponential\":\"true indicates auction curve is exponential, otherwise linear\",\"_auctionPriceSteps\":\"number of different prices auction steps through\",\"_auctionStartPrice\":\"trait price the auction begins at\",\"_auctionStartTime\":\"timestamp the auction begins at\",\"_traitsSaleStartTime\":\"timestamp at which traits can be bought individually\",\"_whitelistStartTime\":\"timestamp at which whitelisted users can start minting\"}},\"uri(uint256)\":{\"params\":{\"_tokenId\":\"the token ID to get the URI for\"},\"returns\":{\"_0\":\"string the token specific URI\"}},\"whitelistMintsRemaining(address)\":{\"returns\":{\"_0\":\"uint256 the number of whitelist mints remaining\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"maxSupply(uint256)\":{\"notice\":\"Returns the max supply of the specified token ID\"},\"mintTraits(address,uint256[],uint256[])\":{\"notice\":\"Allows a user to mint any number of traits and amounts using ether\"},\"mintTraitsArtistProof(address,uint256[])\":{\"notice\":\"Allows the artist to mint traits for free for the proof artwork1\"},\"mintTraitsWhitelist(address,uint256[])\":{\"notice\":\"Allows a whitelisted user to mint traits for free\"},\"setup(bytes)\":{\"notice\":\"Sets the address of the Artwork contract and the auction configuration\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether the specified interface ID is supported by the contract\"},\"trait(uint256)\":{\"notice\":\"Returns info about an individual trait\"},\"traitPrice()\":{\"notice\":\"Returns the current trait price\"},\"traitPriceStep()\":{\"notice\":\"Returns which price step the auction is currently on\"},\"traitTypes()\":{\"notice\":\"Returns the trait types\"},\"traits()\":{\"notice\":\"Returns info about all traits\"},\"transferTraitsToMintArtwork(address,uint256[])\":{\"notice\":\"Called by the Artwork contract to transfer traits from the caller to the Artwork contract to create a new Artwork token\"},\"updateAuction(uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256)\":{\"notice\":\"Updates the schedule of the dutch auction, can only be called if the dutch auction hasn't started yet, and can only update the auction to a later time, not sooner\"},\"uri(uint256)\":{\"notice\":\"Returns the URI of the specified token ID\"},\"whitelistMintsRemaining(address)\":{\"notice\":\"Returns how many more whitelist mints the specified address has\"}},\"notice\":\"Implements ERC-1155 standard for trait tokens, and provides Dutch Auction functionality for initial trait sales\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Traits.sol\":\"Traits\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/finance/PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\\n * time of contract deployment and can't be updated thereafter.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable Ether.\\n     */\\n    function releasable(address account) public view returns (uint256) {\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        return _pendingPayment(account, totalReceived, released(account));\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(IERC20 token, address account) public view returns (uint256) {\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        return _pendingPayment(account, totalReceived, released(token, account));\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _totalReleased is the sum of all values in _released.\\n        // If \\\"_totalReleased += payment\\\" does not overflow, then \\\"_released[account] += payment\\\" cannot overflow.\\n        _totalReleased += payment;\\n        unchecked {\\n            _released[account] += payment;\\n        }\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(token, account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\\n        // If \\\"_erc20TotalReleased[token] += payment\\\" does not overflow, then \\\"_erc20Released[token][account] += payment\\\"\\n        // cannot overflow.\\n        _erc20TotalReleased[token] += payment;\\n        unchecked {\\n            _erc20Released[token][account] += payment;\\n        }\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\",\"keccak256\":\"0xba00a079c0def02f9e905ed091f01bcf9caa41ec215862a315e9f3838be61cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {ITraits} from \\\"./interfaces/ITraits.sol\\\";\\nimport {IArtwork} from \\\"./interfaces/IArtwork.sol\\\";\\nimport {IProjectRegistry} from \\\"./interfaces/IProjectRegistry.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {ERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport {ERC1155, IERC165} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {PaymentSplitter} from \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\nimport {ERC1155Supply} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\n\\n/**\\n * Implements ERC-1155 standard for trait tokens,\\n * and provides Dutch Auction functionality for initial trait sales\\n */\\ncontract Traits is ITraits, ERC2981, ERC1155, ERC1155Supply, PaymentSplitter {\\n    using Strings for uint256;\\n    using Strings for address;\\n\\n    bool public auctionExponential;\\n    string public constant VERSION = \\\"1.0\\\";\\n    IArtwork public artwork;\\n    IProjectRegistry public projectRegistry;\\n    uint256 public auctionStartTime;\\n    uint256 public auctionEndTime;\\n    uint256 public auctionStartPrice;\\n    uint256 public auctionEndPrice;\\n    uint256 public auctionPriceSteps;\\n    uint256 public traitsSaleStartTime;\\n    uint256 public whitelistStartTime;\\n    TraitType[] private _traitTypes;\\n    Trait[] private _traits;\\n    mapping(address => uint256) private _whitelistMintsRemaining;\\n\\n    modifier onlyArtwork() {\\n        if (msg.sender != address(artwork)) revert OnlyArtwork();\\n        _;\\n    }\\n\\n    modifier onlyProjectRegistry() {\\n        if (msg.sender != address(projectRegistry))\\n            revert OnlyProjectRegistry();\\n        _;\\n    }\\n\\n    constructor(\\n        address _projectRegistry,\\n        TraitsSetup memory _traitsSetup,\\n        address[] memory _primarySalesPayees,\\n        uint256[] memory _primarySalesShares,\\n        address[] memory _whitelistAddresses,\\n        uint256[] memory _whitelistAmounts\\n    ) ERC1155(\\\"\\\") PaymentSplitter(_primarySalesPayees, _primarySalesShares) {\\n        if (_whitelistAddresses.length != _whitelistAmounts.length)\\n            revert InvalidArrayLengths();\\n\\n        projectRegistry = IProjectRegistry(_projectRegistry);\\n\\n        _createTraitsAndTypes(\\n            _traitsSetup.traitTypeNames,\\n            _traitsSetup.traitTypeValues,\\n            _traitsSetup.traitNames,\\n            _traitsSetup.traitValues,\\n            _traitsSetup.traitTypeIndexes,\\n            _traitsSetup.traitMaxSupplys\\n        );\\n\\n        for (uint256 i; i < _whitelistAddresses.length; ) {\\n            _whitelistMintsRemaining[\\n                _whitelistAddresses[i]\\n            ] = _whitelistAmounts[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function setup(bytes calldata _data) external onlyProjectRegistry {\\n        if (address(artwork) != address(0)) revert AlreadySetup();\\n\\n        (\\n            address _artwork,\\n            bool _auctionExponential,\\n            uint256 _auctionStartTime,\\n            uint256 _auctionEndTime,\\n            uint256 _auctionStartPrice,\\n            uint256 _auctionEndPrice,\\n            uint256 _auctionPriceSteps,\\n            uint256 _traitsSaleStartTime,\\n            uint256 _whitelistStartTime\\n        ) = abi.decode(\\n                _data,\\n                (\\n                    address,\\n                    bool,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    uint256\\n                )\\n            );\\n\\n        artwork = IArtwork(_artwork);\\n\\n        _updateAuction(\\n            _auctionStartTime,\\n            _auctionEndTime,\\n            _auctionStartPrice,\\n            _auctionEndPrice,\\n            _auctionPriceSteps,\\n            _auctionExponential,\\n            _traitsSaleStartTime,\\n            _whitelistStartTime\\n        );\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function updateAuction(\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionPriceSteps,\\n        bool _auctionExponential,\\n        uint256 _traitsSaleStartTime,\\n        uint256 _whitelistStartTime\\n    ) external onlyProjectRegistry {\\n        if (auctionStartTime == 0) revert NotSetup();\\n\\n        _updateAuction(\\n            _auctionStartTime,\\n            _auctionEndTime,\\n            _auctionStartPrice,\\n            _auctionEndPrice,\\n            _auctionPriceSteps,\\n            _auctionExponential,\\n            _traitsSaleStartTime,\\n            _whitelistStartTime\\n        );\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function mintTraits(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds,\\n        uint256[] calldata _traitAmounts\\n    ) external payable {\\n        if (_traitTokenIds.length != _traitAmounts.length)\\n            revert InvalidArrayLengths();\\n        if (\\n            msg.sender != address(artwork) &&\\n            block.timestamp < traitsSaleStartTime\\n        ) revert TraitsSaleStartTime();\\n\\n        uint256 _traitCount;\\n\\n        for (uint256 i; i < _traitAmounts.length; ) {\\n            _traitCount += _traitAmounts[i];\\n            if (\\n                totalSupply(_traitTokenIds[i]) + _traitAmounts[i] >\\n                _traits[_traitTokenIds[i]].maxSupply\\n            ) revert MaxSupply();\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (msg.value < _traitCount * traitPrice()) revert InvalidEthAmount();\\n\\n        _mintBatch(_recipient, _traitTokenIds, _traitAmounts, \\\"\\\");\\n\\n        emit TraitsMinted(_recipient, _traitTokenIds, _traitAmounts);\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function mintTraitsArtistProof(\\n        address _artistAddress,\\n        uint256[] calldata _traitTokenIds\\n    ) external onlyArtwork {\\n        _mintTraitsWhitelistOrProof(_artistAddress, _traitTokenIds);\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function mintTraitsWhitelist(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds\\n    ) external onlyArtwork {\\n        if (block.timestamp < whitelistStartTime) revert WhitelistStartTime();\\n        if (_whitelistMintsRemaining[_recipient] == 0)\\n            revert NoWhitelistMints();\\n\\n        _whitelistMintsRemaining[_recipient]--;\\n\\n        _mintTraitsWhitelistOrProof(_recipient, _traitTokenIds);\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function transferTraitsToMintArtwork(\\n        address _caller,\\n        uint256[] calldata _traitTokenIds\\n    ) external onlyArtwork {\\n        if (_traitTokenIds.length != _traitTypes.length)\\n            revert InvalidArrayLengths();\\n\\n        uint256[] memory amounts = new uint256[](_traitTokenIds.length);\\n\\n        for (uint256 i; i < _traitTokenIds.length; ) {\\n            if (_traits[_traitTokenIds[i]].typeIndex != i)\\n                revert InvalidTraits();\\n            amounts[i] = 1;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _safeBatchTransferFrom(\\n            _caller,\\n            address(artwork),\\n            _traitTokenIds,\\n            amounts,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function traitTypes()\\n        external\\n        view\\n        returns (\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues\\n        )\\n    {\\n        uint256 traitTypeCount = _traitTypes.length;\\n        _traitTypeNames = new string[](traitTypeCount);\\n        _traitTypeValues = new string[](traitTypeCount);\\n\\n        for (uint256 i; i < traitTypeCount; ) {\\n            _traitTypeNames[i] = _traitTypes[i].name;\\n            _traitTypeValues[i] = _traitTypes[i].value;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function trait(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory _traitName,\\n            string memory _traitValue,\\n            string memory _traitTypeName,\\n            string memory _traitTypeValue\\n        )\\n    {\\n        if (_tokenId >= _traits.length) revert InvalidTokenId();\\n\\n        _traitName = _traits[_tokenId].name;\\n        _traitValue = _traits[_tokenId].value;\\n        _traitTypeName = _traitTypes[_traits[_tokenId].typeIndex].name;\\n        _traitTypeValue = _traitTypes[_traits[_tokenId].typeIndex].value;\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function traits()\\n        external\\n        view\\n        returns (\\n            uint256[] memory _traitTokenIds,\\n            string[] memory _traitNames,\\n            string[] memory _traitValues,\\n            uint256[] memory _traitTypeIndexes,\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues,\\n            uint256[] memory _traitTotalSupplys,\\n            uint256[] memory _traitMaxSupplys\\n        )\\n    {\\n        uint256 traitCount = _traits.length;\\n        _traitTokenIds = new uint256[](traitCount);\\n        _traitNames = new string[](traitCount);\\n        _traitValues = new string[](traitCount);\\n        _traitTypeIndexes = new uint256[](traitCount);\\n        _traitTypeNames = new string[](traitCount);\\n        _traitTypeValues = new string[](traitCount);\\n        _traitTotalSupplys = new uint256[](traitCount);\\n        _traitMaxSupplys = new uint256[](traitCount);\\n        for (uint256 i; i < traitCount; ) {\\n            _traitTokenIds[i] = i;\\n            _traitNames[i] = _traits[i].name;\\n            _traitValues[i] = _traits[i].value;\\n            _traitTypeIndexes[i] = _traits[i].typeIndex;\\n            _traitTypeNames[i] = _traitTypes[_traits[i].typeIndex].name;\\n            _traitTypeValues[i] = _traitTypes[_traits[i].typeIndex].value;\\n            _traitTotalSupplys[i] = totalSupply(i);\\n            _traitMaxSupplys[i] = _traits[i].maxSupply;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function traitPriceStep() public view returns (uint256) {\\n        if (block.timestamp < auctionStartTime) revert AuctionNotLive();\\n        if (block.timestamp >= auctionEndTime) return auctionPriceSteps - 1;\\n\\n        return\\n            (auctionPriceSteps * (block.timestamp - auctionStartTime)) /\\n            (auctionEndTime - auctionStartTime);\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function traitPrice() public view returns (uint256) {\\n        if (block.timestamp < auctionStartTime) revert AuctionNotLive();\\n        if (block.timestamp >= auctionEndTime) {\\n            // Auction has ended\\n            return auctionEndPrice;\\n        }\\n\\n        // Auction is active\\n        if (auctionExponential) {\\n            // Exponential curve auction\\n            return\\n                (((auctionStartPrice - auctionEndPrice) *\\n                    (auctionPriceSteps - traitPriceStep() - 1) ** 2) /\\n                    (auctionPriceSteps - 1) ** 2) + auctionEndPrice;\\n        } else {\\n            // Linear curve auction\\n            return\\n                auctionStartPrice -\\n                ((traitPriceStep() * (auctionStartPrice - auctionEndPrice)) /\\n                    (auctionPriceSteps - 1));\\n        }\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function whitelistMintsRemaining(\\n        address _user\\n    ) external view returns (uint256) {\\n        return _whitelistMintsRemaining[_user];\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function maxSupply(\\n        uint256 _tokenId\\n    ) external view returns (uint256 _maxSupply) {\\n        _maxSupply = _traits[_tokenId].maxSupply;\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function uri(\\n        uint256 _tokenId\\n    ) public view override(ERC1155, ITraits) returns (string memory) {\\n        if (_tokenId >= _traits.length) revert InvalidTokenId();\\n\\n        string memory baseURI = projectRegistry.baseURI();\\n\\n        return\\n            bytes(baseURI).length != 0\\n                ? string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        address(this).toHexString(),\\n                        \\\"/\\\",\\n                        _tokenId.toString()\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ITraits, ERC1155, ERC2981) returns (bool) {\\n        return\\n            interfaceId == type(ITraits).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) public view override returns (address, uint256) {\\n        return artwork.royaltyInfo(tokenId, salePrice);\\n    }\\n\\n    /** @inheritdoc ERC1155*/\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155, ERC1155Supply) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * Mints traits for artist proof and for whitelisted mints\\n     *\\n     * @param _recipient address to receive the minted traits\\n     * @param _traitTokenIds trait token IDs to mint\\n     */\\n    function _mintTraitsWhitelistOrProof(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds\\n    ) private {\\n        if (_traitTokenIds.length != _traitTypes.length)\\n            revert InvalidArrayLengths();\\n\\n        uint256[] memory traitAmounts = new uint256[](_traitTokenIds.length);\\n\\n        for (uint256 i; i < _traitTokenIds.length; ) {\\n            if (_traits[_traitTokenIds[i]].typeIndex != i)\\n                revert InvalidTraits();\\n            if (\\n                totalSupply(_traitTokenIds[i]) + 1 >\\n                _traits[_traitTokenIds[i]].maxSupply\\n            ) revert MaxSupply();\\n            traitAmounts[i] = 1;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _mintBatch(_recipient, _traitTokenIds, traitAmounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * Sets up the traits and trait types\\n     *\\n     * @param _traitTypeNames human readable trait type names\\n     * @param _traitTypeValues trait type values used in the generative scripts\\n     * @param _traitNames human readable trait names\\n     * @param _traitValues trait values used in the generative scripts\\n     * @param _traitTypeIndexes trait type indexes each trait belongs to\\n     * @param _traitMaxSupplys maximum number of mints for each trait\\n     */\\n    function _createTraitsAndTypes(\\n        string[] memory _traitTypeNames,\\n        string[] memory _traitTypeValues,\\n        string[] memory _traitNames,\\n        string[] memory _traitValues,\\n        uint256[] memory _traitTypeIndexes,\\n        uint256[] memory _traitMaxSupplys\\n    ) private {\\n        if (\\n            _traitTypeNames.length == 0 ||\\n            _traitNames.length == 0 ||\\n            _traitTypeNames.length != _traitTypeValues.length ||\\n            _traitNames.length != _traitValues.length ||\\n            _traitNames.length != _traitTypeIndexes.length ||\\n            _traitNames.length != _traitMaxSupplys.length\\n        ) revert InvalidArrayLengths();\\n\\n        // Push trait types to array\\n        for (uint256 i; i < _traitTypeNames.length; ) {\\n            _traitTypes.push(\\n                TraitType({\\n                    name: _traitTypeNames[i],\\n                    value: _traitTypeValues[i]\\n                })\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Push traits to array\\n        for (uint256 i; i < _traitNames.length; ) {\\n            _traits.push(\\n                Trait({\\n                    name: _traitNames[i],\\n                    value: _traitValues[i],\\n                    typeIndex: _traitTypeIndexes[i],\\n                    maxSupply: _traitMaxSupplys[i]\\n                })\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Updates auction data\\n     *\\n     * @param _auctionStartTime timestamp the auction begins at\\n     * @param _auctionEndTime timestamp the auction ends at\\n     * @param _auctionStartPrice trait price the auction begins at\\n     * @param _auctionEndPrice trait price the auction ends at\\n     * @param _auctionPriceSteps number of different prices auction steps through\\n     * @param _auctionExponential true indicates auction curve is exponential, otherwise linear\\n     * @param _traitsSaleStartTime timestamp at which traits can be bought individually\\n     * @param _whitelistStartTime timestamp at which whitelisted users can start minting\\n     */\\n    function _updateAuction(\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionPriceSteps,\\n        bool _auctionExponential,\\n        uint256 _traitsSaleStartTime,\\n        uint256 _whitelistStartTime\\n    ) private {\\n        if (\\n            _auctionEndTime < _auctionStartTime ||\\n            _auctionEndPrice > _auctionStartPrice ||\\n            _traitsSaleStartTime < _auctionStartTime ||\\n            _auctionStartTime < block.timestamp ||\\n            _auctionPriceSteps < 2\\n        ) revert InvalidAuction();\\n\\n        auctionStartTime = _auctionStartTime;\\n        auctionEndTime = _auctionEndTime;\\n        auctionStartPrice = _auctionStartPrice;\\n        auctionEndPrice = _auctionEndPrice;\\n        auctionPriceSteps = _auctionPriceSteps;\\n        auctionExponential = _auctionExponential;\\n        traitsSaleStartTime = _traitsSaleStartTime;\\n        whitelistStartTime = _whitelistStartTime;\\n\\n        emit AuctionScheduled(\\n            _auctionStartTime,\\n            _auctionEndTime,\\n            _auctionStartPrice,\\n            _auctionEndPrice,\\n            _auctionPriceSteps,\\n            _auctionExponential,\\n            _traitsSaleStartTime,\\n            _whitelistStartTime\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xfe6ffaae9b09780a66e70411b6c23e5ac2e442448cfc582816fd54a5dcce6087\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IArtwork.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\ninterface IArtwork is IERC2981, IERC721 {\\n    struct ArtworkData {\\n        bytes32 hash;\\n        uint256[] traitTokenIds;\\n    }\\n\\n    struct StringStorageData {\\n      uint8 stringStorageSlot;\\n      address stringStorageAddress;\\n    }\\n\\n    error OnlyProjectRegistry();\\n    error ProofAlreadyMinted();\\n    error TraitsAlreadySet();\\n    error TraitsNotSet();\\n    error OnlyArtist();\\n    error OnlyArtistOrProjectRegistry();\\n    error OnlyArtworkOwner();\\n    error AlreadySetup();\\n\\n    event ArtworkMinted(\\n        uint256 indexed artworkTokenId,\\n        uint256[] traitTokenIds,\\n        bytes32 hash,\\n        address indexed creator\\n    );\\n    event TraitsReclaimed(\\n        uint256 indexed artworkTokenId,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * Sets up the contract\\n     *\\n     * @param _data bytes containing address of the traits contract\\n     */\\n    function setup(bytes calldata _data) external;\\n\\n    /**\\n     * Mints a new artwork with the specified trait token IDs\\n     * The caller must own the specified traits\\n     *\\n     * @param _traitTokenIds the trait token IDs to create the artwork with\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     * @return _artworkTokenId the token ID of the newly minted artwork\\n     */\\n    function mintArtwork(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external returns (uint256 _artworkTokenId);\\n\\n    /**\\n     * Reclaims the traits the specified artwork token into the traits its composed of\\n     * The artwork token is burned, and the token ID will never be reused\\n     * The traits are transferred to the caller's address\\n     *\\n     * @param _artworkTokenId the token ID of the artwork being reclaimed\\n     */\\n    function reclaimTraits(uint256 _artworkTokenId) external;\\n\\n    /**\\n     * Allows the artist or project registry to mint the proof mint\\n     *\\n     * @param _traitTokenIds token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintArtworkProof(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external;\\n\\n    /**\\n     * Allows an address on the whitelist to mint an artwork for free\\n     *\\n     * @param _traitTokenIds token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintArtworkWhitelist(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external;\\n\\n    /**\\n     * Mints traits with specified amounts, and mints an artwork in a single transaction\\n     * ETH amount needed for trait mints must be sent\\n     *\\n     * @param _traitTokenIdsToBuy token IDs of the traits to buy\\n     * @param _traitAmountsToBuy amounts of each trait to buy\\n     * @param _traitTokenIdsToCreateArtwork token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintTraitsAndArtwork(\\n        uint256[] calldata _traitTokenIdsToBuy,\\n        uint256[] calldata _traitAmountsToBuy,\\n        uint256[] calldata _traitTokenIdsToCreateArtwork,\\n        uint256 _saltNonce\\n    ) external payable;\\n\\n    /**\\n     * Returns the URI of the specified token ID\\n     *\\n     * @param _tokenId token ID to get URI for\\n     * @return string the token URI\\n     */\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    /**\\n     * Returns info about the specified artwork token\\n     *\\n     * @param _artworkTokenId token ID of the artwork\\n     * @return _traitTokenIds the token IDs of the traits the artwork contains\\n     * @return _traitNames the human readable trait names contained in the artwork\\n     * @return _traitValues the trait values used by the generative script\\n     * @return _traitTypeNames the human readable trait type names\\n     * @return _traitTypeValues the trait type values used by the generative script\\n     * @return _hash the artwork hash\\n     */\\n    function artwork(\\n        uint256 _artworkTokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory _traitTokenIds,\\n            string[] memory _traitNames,\\n            string[] memory _traitValues,\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues,\\n            bytes32 _hash\\n        );\\n\\n    /**\\n     * Returns a string containing the project metadata in JSON format\\n     *\\n     * @return string the project metadata in JSON format\\n     */\\n    function metadataJSON() external view returns (string memory);\\n\\n    /**\\n     * Returns the string that contains the generative art javascript\\n     *\\n     * @return string the generative art javascript\\n     */\\n    function script() external view returns (string memory);\\n\\n    /**\\n     * Returns the specified user's nonce, which is used to generate artwork hashes\\n     *\\n     * @param _user the address of the user\\n     * @return uint256 the user's nonce\\n     */\\n    function userNonce(address _user) external view returns (uint256);\\n\\n    /**\\n     * Returns whether the specified interface ID is supported by the contract\\n     *\\n     * @param interfaceId the interface ID to check\\n     * @return bool True if the interface is supported, otherwise False\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xda7890c83516b75ef36bbee6a4a9bf8e1f6661fe8caacc5e7767b0e605187fc6\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IProjectRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\ninterface IProjectRegistry {\\n    struct Project {\\n        address artwork;\\n        address traits;\\n    }\\n\\n    error OnlyAdmin();\\n    error InvalidAddress();\\n    error InvalidArrayLengths();\\n\\n    event BaseURIUpdated(string baseURI);\\n    event ProjectRegistered(\\n        uint256 indexed projectId,\\n        address indexed artwork,\\n        address indexed traits\\n    );\\n    event AdminAdded(address indexed account);\\n    event AdminRemoved(address indexed account);\\n\\n    /**\\n     * Updates the URI base string\\n     *\\n     * @param _baseURI the updated base URI string\\n     */\\n    function updateBaseURI(string memory _baseURI) external;\\n\\n    /**\\n     * Registers a project by storing the Artwork and Traits contract addresses,\\n     * and calls setup on both contracts with the corresponding bytes data\\n     *\\n     * @param _artwork the address of the Artwork contract\\n     * @param _artworkData data to pass to setup function of the Artwork contract\\n     * @param _traits the address of the Traits contract\\n     * @param _traitsData data to pass to setup function of the Traits contract\\n     */\\n    function registerProject(\\n        address _artwork,\\n        bytes calldata _artworkData,\\n        address _traits,\\n        bytes calldata _traitsData\\n    ) external;\\n\\n    /**\\n     * Executes an arbitrary number of external function calls\\n     *\\n     * @param _targets the array of addresses to call\\n     * @param _values array of Ether amounts for each transaction\\n     * @param _calldatas array of transaction calldata bytes\\n     */\\n    function execute(\\n        address[] calldata _targets,\\n        uint256[] calldata _values,\\n        bytes[] calldata _calldatas\\n    ) external;\\n\\n    /**\\n     * Adds multiple addresses to be made admins\\n     *\\n     * @param _admins the addresses to make admins\\n     */\\n    function addAdmins(address[] memory _admins) external;\\n\\n    /**\\n     * Removes multiple addresses from being admins\\n     *\\n     * @param _admins the addresses remove from being admins\\n     */\\n    function removeAdmins(address[] memory _admins) external;\\n\\n    /**\\n     * Returns the base URI string\\n     *\\n     * @return the base URI string\\n     */\\n    function baseURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x64f8e5cbbe9b44f3c787c487b902cc7deda4b9c734ce7e49a50e4c8c6ff4e0a7\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface ITraits is IERC1155 {\\n    struct TraitType {\\n        string name;\\n        string value;\\n    }\\n\\n    struct Trait {\\n        string name;\\n        string value;\\n        uint256 typeIndex;\\n        uint256 maxSupply;\\n    }\\n\\n    struct TraitsSetup {\\n        string[] traitTypeNames;\\n        string[] traitTypeValues;\\n        string[] traitNames;\\n        string[] traitValues;\\n        uint256[] traitTypeIndexes;\\n        uint256[] traitMaxSupplys;\\n    }\\n\\n    event TraitsMinted(\\n        address indexed recipient,\\n        uint256[] traitTokenIds,\\n        uint256[] traitAmounts\\n    );\\n\\n    event AuctionScheduled(\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionPriceSteps,\\n        bool _auctionExponential,\\n        uint256 _traitsSaleStartTime,\\n        uint256 _whitelistStartTime\\n    );\\n\\n    error OnlyArtwork();\\n    error OnlyProjectRegistry();\\n    error AlreadySetup();\\n    error NotSetup();\\n    error InvalidArrayLengths();\\n    error InvalidAuction();\\n    error MaxSupply();\\n    error InvalidEthAmount();\\n    error InvalidTraits();\\n    error AuctionNotLive();\\n    error InvalidTokenId();\\n    error TraitsSaleStartTime();\\n    error WhitelistStartTime();\\n    error NoWhitelistMints();\\n\\n    /**\\n     * Sets the address of the Artwork contract and the auction configuration\\n     *\\n     * @param _data bytes data containt the artwork contract address and auction data\\n     */\\n    function setup(\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * Updates the schedule of the dutch auction, can only\\n     * be called if the dutch auction hasn't started yet, and\\n     * can only update the auction to a later time, not sooner\\n     *\\n     * @param _auctionStartTime timestamp the auction begins at\\n     * @param _auctionEndTime timestamp the auction ends at\\n     * @param _auctionStartPrice trait price the auction begins at\\n     * @param _auctionEndPrice trait price the auction ends at\\n     * @param _auctionPriceSteps number of different prices auction steps through\\n     * @param _auctionExponential true indicates auction curve is exponential, otherwise linear\\n     * @param _traitsSaleStartTime timestamp at which traits can be bought individually\\n     * @param _whitelistStartTime timestamp at which whitelisted users can start minting\\n     */\\n    function updateAuction(\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionPriceSteps,\\n        bool _auctionExponential,\\n        uint256 _traitsSaleStartTime,\\n        uint256 _whitelistStartTime\\n    ) external;\\n\\n    /**\\n     * Allows a user to mint any number of traits and amounts using ether\\n     *\\n     * @param _recipient the address to receive the trait tokens\\n     * @param _traitTokenIds the trait token IDs to buy\\n     * @param _traitAmounts the amounts of each token ID to buy\\n     */\\n    function mintTraits(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds,\\n        uint256[] calldata _traitAmounts\\n    ) external payable;\\n\\n    /**\\n     * Allows the artist to mint traits for free for the proof artwork1\\n     *\\n     * @param _artistAddress the artist address to receive the trait tokens\\n     * @param _traitTokenIds the trait token IDs to mint the artwork with\\n     */\\n    function mintTraitsArtistProof(\\n        address _artistAddress,\\n        uint256[] calldata _traitTokenIds\\n    ) external;\\n\\n    /**\\n     * Allows a whitelisted user to mint traits for free\\n     *\\n     * @param _recipient the address to receive the trait tokens\\n     * @param _traitTokenIds the trait token IDs to mint the artwork with\\n     */\\n    function mintTraitsWhitelist(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds\\n    ) external;\\n\\n    /**\\n     * Called by the Artwork contract to transfer traits from the caller to the Artwork\\n     * contract to create a new Artwork token\\n     *\\n     * @param _caller the address creating the artwork\\n     * @param _traitTokenIds the trait token IDs used to create the artwork\\n     */\\n    function transferTraitsToMintArtwork(\\n        address _caller,\\n        uint256[] calldata _traitTokenIds\\n    ) external;\\n\\n    /**\\n     * Returns the trait types\\n     *\\n     * @return _traitTypeNames human readable trait type names\\n     * @return _traitTypeValues trait type values used in the generative script\\n     */\\n    function traitTypes()\\n        external\\n        view\\n        returns (\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues\\n        );\\n\\n    /**\\n     * Returns info about an individual trait\\n     *\\n     * @param _tokenId token ID to get info about\\n     * @return _traitName human readable trait name\\n     * @return _traitValue trait type value used in the generative script\\n     * @return _traitTypeName human readable trait type name\\n     * @return _traitTypeValue trait type value used in the generative script\\n     */\\n    function trait(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory _traitName,\\n            string memory _traitValue,\\n            string memory _traitTypeName,\\n            string memory _traitTypeValue\\n        );\\n\\n    /**\\n     * Returns info about all traits\\n     *\\n     * @return _traitTokenIds token IDs of the traits\\n     * @return _traitNames human readable trait names\\n     * @return _traitValues trait type values used in the generative script\\n     * @return _traitTypeIndexes trait type index each trait belongs to\\n     * @return _traitTypeNames human readable trait type names\\n     * @return _traitTypeValues trait type values used in the generative script\\n     * @return _traitTotalSupplys total supply of each trait\\n     * @return _traitMaxSupplys max supply of each trait\\n     */\\n    function traits()\\n        external\\n        view\\n        returns (\\n            uint256[] memory _traitTokenIds,\\n            string[] memory _traitNames,\\n            string[] memory _traitValues,\\n            uint256[] memory _traitTypeIndexes,\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues,\\n            uint256[] memory _traitTotalSupplys,\\n            uint256[] memory _traitMaxSupplys\\n        );\\n\\n    /**\\n     * Returns which price step the auction is currently on\\n     *\\n     * @return the current price step\\n     */\\n    function traitPriceStep() external view returns (uint256);\\n\\n    /**\\n     * Returns the current trait price\\n     *\\n     * @return _price the current trait price in ether\\n     */\\n    function traitPrice() external view returns (uint256 _price);\\n\\n    /**\\n     * Returns how many more whitelist mints the specified address has\\n     *\\n     * @return uint256 the number of whitelist mints remaining\\n     */\\n    function whitelistMintsRemaining(address _user) external view returns (uint256);\\n\\n    /**\\n     * Returns the max supply of the specified token ID\\n     *\\n     * @return _maxSupply the max supply of the token\\n     */\\n    function maxSupply(\\n        uint256 _tokenId\\n    ) external view returns (uint256 _maxSupply);\\n\\n    /**\\n     * Returns the URI of the specified token ID\\n     *\\n     * @param _tokenId the token ID to get the URI for\\n     * @return string the token specific URI\\n     */\\n    function uri(uint256 _tokenId) external view returns (string memory);\\n\\n    /**\\n     * Returns whether the specified interface ID is supported by the contract\\n     *\\n     * @param interfaceId the interface ID to check\\n     * @return bool True if the interface is supported, otherwise False\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6cd0eb00ce079e1fc6ae8ee2a748e7f86e9397438293c62b707221e56bc6230b\",\"license\":\"GNU GPLv3\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102ff5760003560e01c80638b83209b1161018f578063d756985b116100e1578063edeb832a1161008a578063fb37f91f11610064578063fb37f91f14610977578063ffa1ad741461098c578063ffc1613a146109d557600080fd5b8063edeb832a1461090d578063f242432a14610927578063f3457fdf1461094757600080fd5b8063e33b7de3116100bb578063e33b7de314610899578063e985e9c5146108ae578063eb54f9ec146108f757600080fd5b8063d756985b14610824578063d79779b21461083a578063e1fc334f1461087057600080fd5b8063a22cb46511610143578063bd85b0391161011d578063bd85b039146107a1578063c45ac050146107ce578063ce7c2ac2146107ee57600080fd5b8063a22cb46514610741578063a3f8eace14610761578063ba1693d11461078157600080fd5b80639852595c116101745780639852595c146106d55780639ded06df1461070b578063a04a6ac81461072b57600080fd5b80638b83209b1461069f5780639292caaf146106bf57600080fd5b80633f2a0f26116102535780634f558e79116101fc57806363a533de116101d657806363a533de14610649578063869f75941461066957806388392b5d1461068957600080fd5b80634f558e79146105e75780635a33d8dc146106165780635bf1af441461063657600080fd5b806348b750441161022d57806348b75044146105845780634b449cba146105a45780634e1273f4146105ba57600080fd5b80633f2a0f2614610508578063406072a91461052857806341a1f7f51461056e57600080fd5b80631f0a595b116102b55780632eb2c2d61161028f5780632eb2c2d6146104b357806337b2383f146104d35780633a98ef39146104f357600080fd5b80631f0a595b1461041457806326cc133e146104375780632a55205a1461047457600080fd5b806301ffc9a7116102e657806301ffc9a7146103955780630e89341c146103c557806319165587146103f257600080fd5b8062a9bb011461034d578062fdd58e1461037557600080fd5b36610348577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561035957600080fd5b50610362610a0b565b6040519081526020015b60405180910390f35b34801561038157600080fd5b50610362610390366004613e7e565b610b14565b3480156103a157600080fd5b506103b56103b0366004613ec0565b610bc2565b604051901515815260200161036c565b3480156103d157600080fd5b506103e56103e0366004613edd565b610c00565b60405161036c9190613f46565b3480156103fe57600080fd5b5061041261040d366004613f59565b610d0b565b005b34801561042057600080fd5b50610429610e75565b60405161036c929190613fcb565b34801561044357600080fd5b50600d5461045c9061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161036c565b34801561048057600080fd5b5061049461048f366004613ff9565b6110c8565b604080516001600160a01b03909316835260208301919091520161036c565b3480156104bf57600080fd5b506104126104ce366004614177565b611150565b3480156104df57600080fd5b506104126104ee36600461426a565b6111f2565b3480156104ff57600080fd5b50600654610362565b34801561051457600080fd5b5061041261052336600461426a565b611383565b34801561053457600080fd5b506103626105433660046142bf565b6001600160a01b039182166000908152600c6020908152604080832093909416825291909152205490565b34801561057a57600080fd5b5061036260135481565b34801561059057600080fd5b5061041261059f3660046142bf565b6113c3565b3480156105b057600080fd5b5061036260105481565b3480156105c657600080fd5b506105da6105d53660046142f8565b611557565b60405161036c9190614400565b3480156105f357600080fd5b506103b5610602366004613edd565b600090815260056020526040902054151590565b34801561062257600080fd5b50600e5461045c906001600160a01b031681565b610412610644366004614413565b611695565b34801561065557600080fd5b5061041261066436600461426a565b61190b565b34801561067557600080fd5b50610362610684366004613edd565b6119fc565b34801561069557600080fd5b5061036260145481565b3480156106ab57600080fd5b5061045c6106ba366004613edd565b611a2a565b3480156106cb57600080fd5b5061036260155481565b3480156106e157600080fd5b506103626106f0366004613f59565b6001600160a01b031660009081526009602052604090205490565b34801561071757600080fd5b50610412610726366004614496565b611a5a565b34801561073757600080fd5b5061036260125481565b34801561074d57600080fd5b5061041261075c366004614516565b611b39565b34801561076d57600080fd5b5061036261077c366004613f59565b611b48565b34801561078d57600080fd5b5061041261079c366004614544565b611b89565b3480156107ad57600080fd5b506103626107bc366004613edd565b60009081526005602052604090205490565b3480156107da57600080fd5b506103626107e93660046142bf565b611c0a565b3480156107fa57600080fd5b50610362610809366004613f59565b6001600160a01b031660009081526008602052604090205490565b34801561083057600080fd5b5061036260115481565b34801561084657600080fd5b50610362610855366004613f59565b6001600160a01b03166000908152600b602052604090205490565b34801561087c57600080fd5b50610885611cee565b60405161036c9897969594939291906145ac565b3480156108a557600080fd5b50600754610362565b3480156108ba57600080fd5b506103b56108c93660046142bf565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561090357600080fd5b50610362600f5481565b34801561091957600080fd5b50600d546103b59060ff1681565b34801561093357600080fd5b5061041261094236600461465b565b6123bb565b34801561095357600080fd5b50610967610962366004613edd565b612456565b60405161036c94939291906146c4565b34801561098357600080fd5b5061036261278c565b34801561099857600080fd5b506103e56040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b3480156109e157600080fd5b506103626109f0366004613f59565b6001600160a01b031660009081526018602052604090205490565b6000600f54421015610a30576040516358fd8d1160e01b815260040160405180910390fd5b6010544210610a40575060125490565b600d5460ff1615610ac95760125460026001601354610a5f9190614727565b610a69919061481e565b60026001610a7561278c565b601354610a829190614727565b610a8c9190614727565b610a96919061481e565b601254601154610aa69190614727565b610ab0919061482d565b610aba9190614844565b610ac49190614866565b905090565b6001601354610ad89190614727565b601254601154610ae89190614727565b610af061278c565b610afa919061482d565b610b049190614844565b601154610ac49190614727565b90565b60006001600160a01b038316610b975760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982167f9732804d000000000000000000000000000000000000000000000000000000001480610bbc5750610bbc826127fd565b6017546060908210610c25576040516307ed98ed60e31b815260040160405180910390fd5b600e54604080517f6c0360eb00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691636c0360eb91600480830192869291908290030181865afa158015610c87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610caf9190810190614879565b90508051600003610ccf5760405180602001604052806000815250610d04565b80610cd93061286f565b610ce285612885565b604051602001610cf4939291906148fb565b6040516020818303038152906040525b9392505050565b6001600160a01b038116600090815260086020526040902054610d7f5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610b8e565b6000610d8a82611b48565b905080600003610df05760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610b8e565b8060076000828254610e029190614866565b90915550506001600160a01b0382166000908152600960205260409020805482019055610e2f8282612925565b604080516001600160a01b0384168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a15050565b60165460609081908067ffffffffffffffff811115610e9657610e9661401b565b604051908082528060200260200182016040528015610ec957816020015b6060815260200190600190039081610eb45790505b5092508067ffffffffffffffff811115610ee557610ee561401b565b604051908082528060200260200182016040528015610f1857816020015b6060815260200190600190039081610f035790505b50915060005b818110156110c25760168181548110610f3957610f39614967565b90600052602060002090600202016000018054610f559061497d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f819061497d565b8015610fce5780601f10610fa357610100808354040283529160200191610fce565b820191906000526020600020905b815481529060010190602001808311610fb157829003601f168201915b5050505050848281518110610fe557610fe5614967565b60200260200101819052506016818154811061100357611003614967565b9060005260206000209060020201600101805461101f9061497d565b80601f016020809104026020016040519081016040528092919081815260200182805461104b9061497d565b80156110985780601f1061106d57610100808354040283529160200191611098565b820191906000526020600020905b81548152906001019060200180831161107b57829003601f168201915b50505050508382815181106110af576110af614967565b6020908102919091010152600101610f1e565b50509091565b600d5460405163152a902d60e11b8152600481018490526024810183905260009182916101009091046001600160a01b031690632a55205a906044016040805180830381865afa158015611120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114491906149b7565b915091505b9250929050565b6001600160a01b03851633148061116c575061116c85336108c9565b6111de5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610b8e565b6111eb8585858585612a3e565b5050505050565b600d5461010090046001600160a01b0316331461122257604051636447134960e01b815260040160405180910390fd5b60165481146112445760405163a9854bc960e01b815260040160405180910390fd5b60008167ffffffffffffffff81111561125f5761125f61401b565b604051908082528060200260200182016040528015611288578160200160208202803683370190505b50905060005b82811015611319578060178585848181106112ab576112ab614967565b90506020020135815481106112c2576112c2614967565b906000526020600020906004020160020154146112f257604051633221911d60e21b815260040160405180910390fd5b600182828151811061130657611306614967565b602090810291909101015260010161128e565b5061137d84600d60019054906101000a90046001600160a01b0316858580806020026020016040519081016040528093929190818152602001838360200280828437600092018290525060408051602081019091529081528893509150612a3e9050565b50505050565b600d5461010090046001600160a01b031633146113b357604051636447134960e01b815260040160405180910390fd5b6113be838383612cad565b505050565b6001600160a01b0381166000908152600860205260409020546114375760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610b8e565b60006114438383611c0a565b9050806000036114a95760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610b8e565b6001600160a01b0383166000908152600b6020526040812080548392906114d1908490614866565b90915550506001600160a01b038084166000908152600c6020908152604080832093861683529290522080548201905561150c838383612e6e565b604080516001600160a01b038481168252602082018490528516917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a2505050565b606081518351146115d05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610b8e565b6000835167ffffffffffffffff8111156115ec576115ec61401b565b604051908082528060200260200182016040528015611615578160200160208202803683370190505b50905060005b845181101561168d5761166085828151811061163957611639614967565b602002602001015185838151811061165357611653614967565b6020026020010151610b14565b82828151811061167257611672614967565b6020908102919091010152611686816149e5565b905061161b565b509392505050565b8281146116b55760405163a9854bc960e01b815260040160405180910390fd5b600d5461010090046001600160a01b031633148015906116d6575060145442105b1561170d576040517fac3d4d3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b828110156117f45783838281811061172b5761172b614967565b905060200201358261173d9190614866565b9150601786868381811061175357611753614967565b905060200201358154811061176a5761176a614967565b90600052602060002090600402016003015484848381811061178e5761178e614967565b905060200201356117c38888858181106117aa576117aa614967565b9050602002013560009081526005602052604090205490565b6117cd9190614866565b11156117ec57604051632cdb04a160e21b815260040160405180910390fd5b600101611711565b506117fd610a0b565b611807908261482d565b341015611840576040517f0772327b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118bc8686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092018290525060408051602081019091529081529250612eee915050565b856001600160a01b03167fcc92feddd651a5b2e45503e7d581b25712d631a27c2ddb440cbfd1a2beb17278868686866040516118fb9493929190614a49565b60405180910390a2505050505050565b600d5461010090046001600160a01b0316331461193b57604051636447134960e01b815260040160405180910390fd5b601554421015611977576040517f0ad21f0100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660009081526018602052604081205490036119c8576040517f52a14acc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660009081526018602052604081208054916119ec83614a70565b91905055506113be838383612cad565b600060178281548110611a1157611a11614967565b9060005260206000209060040201600301549050919050565b6000600a8281548110611a3f57611a3f614967565b6000918252602090912001546001600160a01b031692915050565b600e546001600160a01b03163314611a8557604051630b35571f60e21b815260040160405180910390fd5b600d5461010090046001600160a01b031615611acd576040517f7735869100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080808080808080611ae38a8c018c614a87565b98509850985098509850985098509850985088600d60016101000a8154816001600160a01b0302191690836001600160a01b03160217905550611b2c87878787878d88886130e0565b5050505050505050505050565b611b443383836131e7565b5050565b600080611b5460075490565b611b5e9047614866565b9050610d048382611b84866001600160a01b031660009081526009602052604090205490565b6132db565b600e546001600160a01b03163314611bb457604051630b35571f60e21b815260040160405180910390fd5b600f54600003611bf0576040517fb09c99c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c0088888888888888886130e0565b5050505050505050565b6001600160a01b0382166000908152600b602052604081205481906040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca69190614afc565b611cb09190614866565b6001600160a01b038086166000908152600c6020908152604080832093881683529290522054909150611ce690849083906132db565b949350505050565b606080606080606080606080600060178054905090508067ffffffffffffffff811115611d1d57611d1d61401b565b604051908082528060200260200182016040528015611d46578160200160208202803683370190505b5098508067ffffffffffffffff811115611d6257611d6261401b565b604051908082528060200260200182016040528015611d9557816020015b6060815260200190600190039081611d805790505b5097508067ffffffffffffffff811115611db157611db161401b565b604051908082528060200260200182016040528015611de457816020015b6060815260200190600190039081611dcf5790505b5096508067ffffffffffffffff811115611e0057611e0061401b565b604051908082528060200260200182016040528015611e29578160200160208202803683370190505b5095508067ffffffffffffffff811115611e4557611e4561401b565b604051908082528060200260200182016040528015611e7857816020015b6060815260200190600190039081611e635790505b5094508067ffffffffffffffff811115611e9457611e9461401b565b604051908082528060200260200182016040528015611ec757816020015b6060815260200190600190039081611eb25790505b5093508067ffffffffffffffff811115611ee357611ee361401b565b604051908082528060200260200182016040528015611f0c578160200160208202803683370190505b5092508067ffffffffffffffff811115611f2857611f2861401b565b604051908082528060200260200182016040528015611f51578160200160208202803683370190505b50915060005b818110156123af57808a8281518110611f7257611f72614967565b60200260200101818152505060178181548110611f9157611f91614967565b90600052602060002090600402016000018054611fad9061497d565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd99061497d565b80156120265780601f10611ffb57610100808354040283529160200191612026565b820191906000526020600020905b81548152906001019060200180831161200957829003601f168201915b505050505089828151811061203d5761203d614967565b60200260200101819052506017818154811061205b5761205b614967565b906000526020600020906004020160010180546120779061497d565b80601f01602080910402602001604051908101604052809291908181526020018280546120a39061497d565b80156120f05780601f106120c5576101008083540402835291602001916120f0565b820191906000526020600020905b8154815290600101906020018083116120d357829003601f168201915b505050505088828151811061210757612107614967565b60200260200101819052506017818154811061212557612125614967565b90600052602060002090600402016002015487828151811061214957612149614967565b60200260200101818152505060166017828154811061216a5761216a614967565b9060005260206000209060040201600201548154811061218c5761218c614967565b906000526020600020906002020160000180546121a89061497d565b80601f01602080910402602001604051908101604052809291908181526020018280546121d49061497d565b80156122215780601f106121f657610100808354040283529160200191612221565b820191906000526020600020905b81548152906001019060200180831161220457829003601f168201915b505050505086828151811061223857612238614967565b602002602001018190525060166017828154811061225857612258614967565b9060005260206000209060040201600201548154811061227a5761227a614967565b906000526020600020906002020160010180546122969061497d565b80601f01602080910402602001604051908101604052809291908181526020018280546122c29061497d565b801561230f5780601f106122e45761010080835404028352916020019161230f565b820191906000526020600020905b8154815290600101906020018083116122f257829003601f168201915b505050505085828151811061232657612326614967565b60200260200101819052506123478160009081526005602052604090205490565b84828151811061235957612359614967565b6020026020010181815250506017818154811061237857612378614967565b90600052602060002090600402016003015483828151811061239c5761239c614967565b6020908102919091010152600101611f57565b50509091929394959697565b6001600160a01b0385163314806123d757506123d785336108c9565b6124495760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610b8e565b6111eb8585858585613319565b6060806060806017805490508510612481576040516307ed98ed60e31b815260040160405180910390fd5b6017858154811061249457612494614967565b906000526020600020906004020160000180546124b09061497d565b80601f01602080910402602001604051908101604052809291908181526020018280546124dc9061497d565b80156125295780601f106124fe57610100808354040283529160200191612529565b820191906000526020600020905b81548152906001019060200180831161250c57829003601f168201915b505050505093506017858154811061254357612543614967565b9060005260206000209060040201600101805461255f9061497d565b80601f016020809104026020016040519081016040528092919081815260200182805461258b9061497d565b80156125d85780601f106125ad576101008083540402835291602001916125d8565b820191906000526020600020905b8154815290600101906020018083116125bb57829003601f168201915b505050505092506016601786815481106125f4576125f4614967565b9060005260206000209060040201600201548154811061261657612616614967565b906000526020600020906002020160000180546126329061497d565b80601f016020809104026020016040519081016040528092919081815260200182805461265e9061497d565b80156126ab5780601f10612680576101008083540402835291602001916126ab565b820191906000526020600020905b81548152906001019060200180831161268e57829003601f168201915b505050505091506016601786815481106126c7576126c7614967565b906000526020600020906004020160020154815481106126e9576126e9614967565b906000526020600020906002020160010180546127059061497d565b80601f01602080910402602001604051908101604052809291908181526020018280546127319061497d565b801561277e5780601f106127535761010080835404028352916020019161277e565b820191906000526020600020905b81548152906001019060200180831161276157829003601f168201915b505050505090509193509193565b6000600f544210156127b1576040516358fd8d1160e01b815260040160405180910390fd5b60105442106127c9576001601354610ac49190614727565b600f546010546127d99190614727565b600f546127e69042614727565b6013546127f3919061482d565b610ac49190614844565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061286057506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b80610bbc5750610bbc826134d6565b6060610bbc6001600160a01b0383166014613524565b6060600061289283613705565b600101905060008167ffffffffffffffff8111156128b2576128b261401b565b6040519080825280601f01601f1916602001820160405280156128dc576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846128e657509392505050565b804710156129755760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610b8e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146129c2576040519150601f19603f3d011682016040523d82523d6000602084013e6129c7565b606091505b50509050806113be5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610b8e565b8151835114612aa05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610b8e565b6001600160a01b038416612b045760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610b8e565b33612b138187878787876137e7565b60005b8451811015612c3f576000858281518110612b3357612b33614967565b602002602001015190506000858381518110612b5157612b51614967565b60209081029190910181015160008481526002835260408082206001600160a01b038e168352909352919091205490915081811015612be55760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610b8e565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612c24908490614866565b9250508190555050505080612c38906149e5565b9050612b16565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612c8f929190614b15565b60405180910390a4612ca58187878787876137f5565b505050505050565b6016548114612ccf5760405163a9854bc960e01b815260040160405180910390fd5b60008167ffffffffffffffff811115612cea57612cea61401b565b604051908082528060200260200182016040528015612d13578160200160208202803683370190505b50905060005b82811015612e2057806017858584818110612d3657612d36614967565b9050602002013581548110612d4d57612d4d614967565b90600052602060002090600402016002015414612d7d57604051633221911d60e21b815260040160405180910390fd5b6017848483818110612d9157612d91614967565b9050602002013581548110612da857612da8614967565b906000526020600020906004020160030154612dcf8585848181106117aa576117aa614967565b612dda906001614866565b1115612df957604051632cdb04a160e21b815260040160405180910390fd5b6001828281518110612e0d57612e0d614967565b6020908102919091010152600101612d19565b5061137d84848480806020026020016040519081016040528093929190818152602001838360200280828437600092018290525060408051602081019091529081528793509150612eee9050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526113be9084906139a3565b6001600160a01b038416612f6a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610b8e565b8151835114612fcc5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610b8e565b33612fdc816000878787876137e7565b60005b845181101561307857838181518110612ffa57612ffa614967565b60200260200101516002600087848151811061301857613018614967565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546130609190614866565b90915550819050613070816149e5565b915050612fdf565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516130c9929190614b15565b60405180910390a46111eb816000878787876137f5565b878710806130ed57508585115b806130f757508782105b8061310157504288105b8061310c5750600284105b15613143576040517f2156216000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f8890556010879055601186905560128590556013849055600d805460ff191684151590811790915560148390556015829055604080518a8152602081018a9052908101889052606081018790526080810186905260a081019190915260c0810183905260e081018290527f741f68979ac8d34093a453410adc90a9081503f2ce2ae3020f4755424497892b906101000160405180910390a15050505050505050565b816001600160a01b0316836001600160a01b03160361326e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610b8e565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6006546001600160a01b03841660009081526008602052604081205490918391613305908661482d565b61330f9190614844565b611ce69190614727565b6001600160a01b03841661337d5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610b8e565b33600061338985613a88565b9050600061339685613a88565b90506133a68389898585896137e7565b60008681526002602090815260408083206001600160a01b038c1684529091529020548581101561342c5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610b8e565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061346b908490614866565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46134cb848a8a8a8a8a613ad3565b505050505050505050565b60006001600160e01b0319821663152a902d60e11b1480610bbc57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610bbc565b6060600061353383600261482d565b61353e906002614866565b67ffffffffffffffff8111156135565761355661401b565b6040519080825280601f01601f191660200182016040528015613580576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106135b7576135b7614967565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061360257613602614967565b60200101906001600160f81b031916908160001a905350600061362684600261482d565b613631906001614866565b90505b60018111156136b6577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061367257613672614967565b1a60f81b82828151811061368857613688614967565b60200101906001600160f81b031916908160001a90535060049490941c936136af81614a70565b9050613634565b508315610d045760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b8e565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061374e577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061377a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061379857662386f26fc10000830492506010015b6305f5e10083106137b0576305f5e100830492506008015b61271083106137c457612710830492506004015b606483106137d6576064830492506002015b600a8310610bbc5760010192915050565b612ca5868686868686613bcf565b6001600160a01b0384163b15612ca55760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906138399089908990889088908890600401614b3a565b6020604051808303816000875af1925050508015613874575060408051601f3d908101601f1916820190925261387191810190614b98565b60015b61392957613880614bb5565b806308c379a0036138b95750613894614bd0565b8061389f57506138bb565b8060405162461bcd60e51b8152600401610b8e9190613f46565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610b8e565b6001600160e01b0319811663bc197c8160e01b1461399a5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610b8e565b50505050505050565b60006139f8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d5d9092919063ffffffff16565b8051909150156113be5780806020019051810190613a169190614c5a565b6113be5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b8e565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110613ac257613ac2614967565b602090810291909101015292915050565b6001600160a01b0384163b15612ca55760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190613b179089908990889088908890600401614c77565b6020604051808303816000875af1925050508015613b52575060408051601f3d908101601f19168201909252613b4f91810190614b98565b60015b613b5e57613880614bb5565b6001600160e01b0319811663f23a6e6160e01b1461399a5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610b8e565b6001600160a01b038516613c565760005b8351811015613c5457828181518110613bfb57613bfb614967565b602002602001015160056000868481518110613c1957613c19614967565b602002602001015181526020019081526020016000206000828254613c3e9190614866565b90915550613c4d9050816149e5565b9050613be0565b505b6001600160a01b038416612ca55760005b835181101561399a576000848281518110613c8457613c84614967565b602002602001015190506000848381518110613ca257613ca2614967565b6020026020010151905060006005600084815260200190815260200160002054905081811015613d3a5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610b8e565b60009283526005602052604090922091039055613d56816149e5565b9050613c67565b6060611ce6848460008585600080866001600160a01b03168587604051613d849190614caf565b60006040518083038185875af1925050503d8060008114613dc1576040519150601f19603f3d011682016040523d82523d6000602084013e613dc6565b606091505b5091509150613dd787838387613de2565b979650505050505050565b60608315613e51578251600003613e4a576001600160a01b0385163b613e4a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b8e565b5081611ce6565b611ce6838381511561389f5781518083602001fd5b6001600160a01b0381168114613e7b57600080fd5b50565b60008060408385031215613e9157600080fd5b8235613e9c81613e66565b946020939093013593505050565b6001600160e01b031981168114613e7b57600080fd5b600060208284031215613ed257600080fd5b8135610d0481613eaa565b600060208284031215613eef57600080fd5b5035919050565b60005b83811015613f11578181015183820152602001613ef9565b50506000910152565b60008151808452613f32816020860160208601613ef6565b601f01601f19169290920160200192915050565b602081526000610d046020830184613f1a565b600060208284031215613f6b57600080fd5b8135610d0481613e66565b600081518084526020808501808196508360051b8101915082860160005b85811015613fbe578284038952613fac848351613f1a565b98850198935090840190600101613f94565b5091979650505050505050565b604081526000613fde6040830185613f76565b8281036020840152613ff08185613f76565b95945050505050565b6000806040838503121561400c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156140575761405761401b565b6040525050565b600067ffffffffffffffff8211156140785761407861401b565b5060051b60200190565b600082601f83011261409357600080fd5b813560206140a08261405e565b6040516140ad8282614031565b83815260059390931b85018201928281019150868411156140cd57600080fd5b8286015b848110156140e857803583529183019183016140d1565b509695505050505050565b600067ffffffffffffffff82111561410d5761410d61401b565b50601f01601f191660200190565b600082601f83011261412c57600080fd5b8135614137816140f3565b6040516141448282614031565b82815285602084870101111561415957600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080600060a0868803121561418f57600080fd5b853561419a81613e66565b945060208601356141aa81613e66565b9350604086013567ffffffffffffffff808211156141c757600080fd5b6141d389838a01614082565b945060608801359150808211156141e957600080fd5b6141f589838a01614082565b9350608088013591508082111561420b57600080fd5b506142188882890161411b565b9150509295509295909350565b60008083601f84011261423757600080fd5b50813567ffffffffffffffff81111561424f57600080fd5b6020830191508360208260051b850101111561114957600080fd5b60008060006040848603121561427f57600080fd5b833561428a81613e66565b9250602084013567ffffffffffffffff8111156142a657600080fd5b6142b286828701614225565b9497909650939450505050565b600080604083850312156142d257600080fd5b82356142dd81613e66565b915060208301356142ed81613e66565b809150509250929050565b6000806040838503121561430b57600080fd5b823567ffffffffffffffff8082111561432357600080fd5b818501915085601f83011261433757600080fd5b813560206143448261405e565b6040516143518282614031565b83815260059390931b850182019282810191508984111561437157600080fd5b948201945b8386101561439857853561438981613e66565b82529482019490820190614376565b965050860135925050808211156143ae57600080fd5b506143bb85828601614082565b9150509250929050565b600081518084526020808501945080840160005b838110156143f5578151875295820195908201906001016143d9565b509495945050505050565b602081526000610d0460208301846143c5565b60008060008060006060868803121561442b57600080fd5b853561443681613e66565b9450602086013567ffffffffffffffff8082111561445357600080fd5b61445f89838a01614225565b9096509450604088013591508082111561447857600080fd5b5061448588828901614225565b969995985093965092949392505050565b600080602083850312156144a957600080fd5b823567ffffffffffffffff808211156144c157600080fd5b818501915085601f8301126144d557600080fd5b8135818111156144e457600080fd5b8660208285010111156144f657600080fd5b60209290920196919550909350505050565b8015158114613e7b57600080fd5b6000806040838503121561452957600080fd5b823561453481613e66565b915060208301356142ed81614508565b600080600080600080600080610100898b03121561456157600080fd5b883597506020890135965060408901359550606089013594506080890135935060a089013561458f81614508565b979a969950949793969295929450505060c08201359160e0013590565b60006101008083526145c08184018c6143c5565b905082810360208401526145d4818b613f76565b905082810360408401526145e8818a613f76565b905082810360608401526145fc81896143c5565b905082810360808401526146108188613f76565b905082810360a08401526146248187613f76565b905082810360c084015261463881866143c5565b905082810360e084015261464c81856143c5565b9b9a5050505050505050505050565b600080600080600060a0868803121561467357600080fd5b853561467e81613e66565b9450602086013561468e81613e66565b93506040860135925060608601359150608086013567ffffffffffffffff8111156146b857600080fd5b6142188882890161411b565b6080815260006146d76080830187613f1a565b82810360208401526146e98187613f1a565b905082810360408401526146fd8186613f1a565b90508281036060840152613dd78185613f1a565b634e487b7160e01b600052601160045260246000fd5b81810381811115610bbc57610bbc614711565b600181815b8085111561477557816000190482111561475b5761475b614711565b8085161561476857918102915b93841c939080029061473f565b509250929050565b60008261478c57506001610bbc565b8161479957506000610bbc565b81600181146147af57600281146147b9576147d5565b6001915050610bbc565b60ff8411156147ca576147ca614711565b50506001821b610bbc565b5060208310610133831016604e8410600b84101617156147f8575081810a610bbc565b614802838361473a565b806000190482111561481657614816614711565b029392505050565b6000610d0460ff84168361477d565b8082028115828204841417610bbc57610bbc614711565b60008261486157634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610bbc57610bbc614711565b60006020828403121561488b57600080fd5b815167ffffffffffffffff8111156148a257600080fd5b8201601f810184136148b357600080fd5b80516148be816140f3565b6040516148cb8282614031565b8281528660208486010111156148e057600080fd5b6148f1836020830160208701613ef6565b9695505050505050565b6000845161490d818460208901613ef6565b845190830190614921818360208901613ef6565b7f2f000000000000000000000000000000000000000000000000000000000000009101908152835161495a816001840160208801613ef6565b0160010195945050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061499157607f821691505b6020821081036149b157634e487b7160e01b600052602260045260246000fd5b50919050565b600080604083850312156149ca57600080fd5b82516149d581613e66565b6020939093015192949293505050565b6000600182016149f7576149f7614711565b5060010190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614a3057600080fd5b8260051b80836020870137939093016020019392505050565b604081526000614a5d6040830186886149fe565b8281036020840152613dd78185876149fe565b600081614a7f57614a7f614711565b506000190190565b60008060008060008060008060006101208a8c031215614aa657600080fd5b8935614ab181613e66565b985060208a0135614ac181614508565b989b989a505050506040870135966060810135966080820135965060a0820135955060c0820135945060e08201359350610100909101359150565b600060208284031215614b0e57600080fd5b5051919050565b604081526000614b2860408301856143c5565b8281036020840152613ff081856143c5565b60006001600160a01b03808816835280871660208401525060a06040830152614b6660a08301866143c5565b8281036060840152614b7881866143c5565b90508281036080840152614b8c8185613f1a565b98975050505050505050565b600060208284031215614baa57600080fd5b8151610d0481613eaa565b600060033d1115610b115760046000803e5060005160e01c90565b600060443d1015614bde5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715614c0e57505050505090565b8285019150815181811115614c265750505050505090565b843d8701016020828501011115614c405750505050505090565b614c4f60208286010187614031565b509095945050505050565b600060208284031215614c6c57600080fd5b8151610d0481614508565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613dd760a0830184613f1a565b60008251614cc1818460208701613ef6565b919091019291505056fea264697066735822122029934625536b00402abf3869a9a425b1684620217dabdb3eef0596dcb9f7a50a64736f6c63430008130033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "maxSupply(uint256)": {
        "returns": {
          "_maxSupply": "the max supply of the token"
        }
      },
      "mintTraits(address,uint256[],uint256[])": {
        "params": {
          "_recipient": "the address to receive the trait tokens",
          "_traitAmounts": "the amounts of each token ID to buy",
          "_traitTokenIds": "the trait token IDs to buy"
        }
      },
      "mintTraitsArtistProof(address,uint256[])": {
        "params": {
          "_artistAddress": "the artist address to receive the trait tokens",
          "_traitTokenIds": "the trait token IDs to mint the artwork with"
        }
      },
      "mintTraitsWhitelist(address,uint256[])": {
        "params": {
          "_recipient": "the address to receive the trait tokens",
          "_traitTokenIds": "the trait token IDs to mint the artwork with"
        }
      },
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "releasable(address)": {
        "details": "Getter for the amount of payee's releasable Ether."
      },
      "releasable(address,address)": {
        "details": "Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an IERC20 contract."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setup(bytes)": {
        "params": {
          "_data": "bytes data containt the artwork contract address and auction data"
        }
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "the interface ID to check"
        },
        "returns": {
          "_0": "bool True if the interface is supported, otherwise False"
        }
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "trait(uint256)": {
        "params": {
          "_tokenId": "token ID to get info about"
        },
        "returns": {
          "_traitName": "human readable trait name",
          "_traitTypeName": "human readable trait type name",
          "_traitTypeValue": "trait type value used in the generative script",
          "_traitValue": "trait type value used in the generative script"
        }
      },
      "traitPrice()": {
        "returns": {
          "_0": "the current trait price in ether"
        }
      },
      "traitPriceStep()": {
        "returns": {
          "_0": "the current price step"
        }
      },
      "traitTypes()": {
        "returns": {
          "_traitTypeNames": "human readable trait type names",
          "_traitTypeValues": "trait type values used in the generative script"
        }
      },
      "traits()": {
        "returns": {
          "_traitMaxSupplys": "max supply of each trait",
          "_traitNames": "human readable trait names",
          "_traitTokenIds": "token IDs of the traits",
          "_traitTotalSupplys": "total supply of each trait",
          "_traitTypeIndexes": "trait type index each trait belongs to",
          "_traitTypeNames": "human readable trait type names",
          "_traitTypeValues": "trait type values used in the generative script",
          "_traitValues": "trait type values used in the generative script"
        }
      },
      "transferTraitsToMintArtwork(address,uint256[])": {
        "params": {
          "_caller": "the address creating the artwork",
          "_traitTokenIds": "the trait token IDs used to create the artwork"
        }
      },
      "updateAuction(uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256)": {
        "params": {
          "_auctionEndPrice": "trait price the auction ends at",
          "_auctionEndTime": "timestamp the auction ends at",
          "_auctionExponential": "true indicates auction curve is exponential, otherwise linear",
          "_auctionPriceSteps": "number of different prices auction steps through",
          "_auctionStartPrice": "trait price the auction begins at",
          "_auctionStartTime": "timestamp the auction begins at",
          "_traitsSaleStartTime": "timestamp at which traits can be bought individually",
          "_whitelistStartTime": "timestamp at which whitelisted users can start minting"
        }
      },
      "uri(uint256)": {
        "params": {
          "_tokenId": "the token ID to get the URI for"
        },
        "returns": {
          "_0": "string the token specific URI"
        }
      },
      "whitelistMintsRemaining(address)": {
        "returns": {
          "_0": "uint256 the number of whitelist mints remaining"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "maxSupply(uint256)": {
        "notice": "Returns the max supply of the specified token ID"
      },
      "mintTraits(address,uint256[],uint256[])": {
        "notice": "Allows a user to mint any number of traits and amounts using ether"
      },
      "mintTraitsArtistProof(address,uint256[])": {
        "notice": "Allows the artist to mint traits for free for the proof artwork1"
      },
      "mintTraitsWhitelist(address,uint256[])": {
        "notice": "Allows a whitelisted user to mint traits for free"
      },
      "setup(bytes)": {
        "notice": "Sets the address of the Artwork contract and the auction configuration"
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns whether the specified interface ID is supported by the contract"
      },
      "trait(uint256)": {
        "notice": "Returns info about an individual trait"
      },
      "traitPrice()": {
        "notice": "Returns the current trait price"
      },
      "traitPriceStep()": {
        "notice": "Returns which price step the auction is currently on"
      },
      "traitTypes()": {
        "notice": "Returns the trait types"
      },
      "traits()": {
        "notice": "Returns info about all traits"
      },
      "transferTraitsToMintArtwork(address,uint256[])": {
        "notice": "Called by the Artwork contract to transfer traits from the caller to the Artwork contract to create a new Artwork token"
      },
      "updateAuction(uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256)": {
        "notice": "Updates the schedule of the dutch auction, can only be called if the dutch auction hasn't started yet, and can only update the auction to a later time, not sooner"
      },
      "uri(uint256)": {
        "notice": "Returns the URI of the specified token ID"
      },
      "whitelistMintsRemaining(address)": {
        "notice": "Returns how many more whitelist mints the specified address has"
      }
    },
    "notice": "Implements ERC-1155 standard for trait tokens, and provides Dutch Auction functionality for initial trait sales",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3848,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)3845_storage"
      },
      {
        "astId": 3853,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)3845_storage)"
      },
      {
        "astId": 713,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 719,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 721,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_uri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2083,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 232,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_totalShares",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 234,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 238,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_shares",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 242,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_released",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 245,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_payees",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 250,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_contract(IERC20)2408,t_uint256)"
      },
      {
        "astId": 257,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_contract(IERC20)2408,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6518,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionExponential",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 6524,
        "contract": "contracts/Traits.sol:Traits",
        "label": "artwork",
        "offset": 1,
        "slot": "13",
        "type": "t_contract(IArtwork)8055"
      },
      {
        "astId": 6527,
        "contract": "contracts/Traits.sol:Traits",
        "label": "projectRegistry",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IProjectRegistry)8140"
      },
      {
        "astId": 6529,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionStartTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6531,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionEndTime",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6533,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionStartPrice",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 6535,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionEndPrice",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 6537,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionPriceSteps",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 6539,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traitsSaleStartTime",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 6541,
        "contract": "contracts/Traits.sol:Traits",
        "label": "whitelistStartTime",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 6545,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_traitTypes",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_struct(TraitType)8164_storage)dyn_storage"
      },
      {
        "astId": 6549,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_traits",
        "offset": 0,
        "slot": "23",
        "type": "t_array(t_struct(Trait)8173_storage)dyn_storage"
      },
      {
        "astId": 6553,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_whitelistMintsRemaining",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Trait)8173_storage)dyn_storage": {
        "base": "t_struct(Trait)8173_storage",
        "encoding": "dynamic_array",
        "label": "struct ITraits.Trait[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TraitType)8164_storage)dyn_storage": {
        "base": "t_struct(TraitType)8164_storage",
        "encoding": "dynamic_array",
        "label": "struct ITraits.TraitType[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IArtwork)8055": {
        "encoding": "inplace",
        "label": "contract IArtwork",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2408": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IProjectRegistry)8140": {
        "encoding": "inplace",
        "label": "contract IProjectRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)2408,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)2408",
        "label": "mapping(contract IERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)2408,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)2408",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)3845_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)3845_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)3845_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 3842,
            "contract": "contracts/Traits.sol:Traits",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3844,
            "contract": "contracts/Traits.sol:Traits",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Trait)8173_storage": {
        "encoding": "inplace",
        "label": "struct ITraits.Trait",
        "members": [
          {
            "astId": 8166,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8168,
            "contract": "contracts/Traits.sol:Traits",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 8170,
            "contract": "contracts/Traits.sol:Traits",
            "label": "typeIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8172,
            "contract": "contracts/Traits.sol:Traits",
            "label": "maxSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TraitType)8164_storage": {
        "encoding": "inplace",
        "label": "struct ITraits.TraitType",
        "members": [
          {
            "astId": 8161,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8163,
            "contract": "contracts/Traits.sol:Traits",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}