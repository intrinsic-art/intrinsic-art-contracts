{
  "address": "0xE0bfA1b3aA3CAfAa016D37C1457Cb315885AA54E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_artistAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_projectRegistry",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_royaltyFeeNumerator",
          "type": "uint96"
        },
        {
          "internalType": "address[]",
          "name": "_royaltyPayees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_royaltyShares",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "stringStorageSlot",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "stringStorageAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IArtwork.StringStorageData",
          "name": "_metadataJSONStringStorage",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "stringStorageSlot",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "stringStorageAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IArtwork.StringStorageData",
          "name": "_scriptStringStorage",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadySetup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyArtist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyArtistOrProjectRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyArtworkOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProjectRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProofAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TraitsAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TraitsNotSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "artworkTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "ArtworkMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "artworkTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TraitsReclaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artistAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_artworkTokenId",
          "type": "uint256"
        }
      ],
      "name": "artwork",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataJSON",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataJSONStringStorage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "stringStorageSlot",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "stringStorageAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_saltNonce",
          "type": "uint256"
        }
      ],
      "name": "mintArtwork",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_artworkTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_saltNonce",
          "type": "uint256"
        }
      ],
      "name": "mintArtworkProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_saltNonce",
          "type": "uint256"
        }
      ],
      "name": "mintArtworkWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIdsToBuy",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitAmountsToBuy",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIdsToCreateArtwork",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_saltNonce",
          "type": "uint256"
        }
      ],
      "name": "mintTraitsAndArtwork",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectRegistry",
      "outputs": [
        {
          "internalType": "contract IProjectRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proofMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_artworkTokenId",
          "type": "uint256"
        }
      ],
      "name": "reclaimTraits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "script",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scriptStringStorage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "stringStorageSlot",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "stringStorageAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traits",
      "outputs": [
        {
          "internalType": "contract ITraits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fdd76afdde69dd7c276993271ca2bc7e91cc35b6df56337ddd0bd915425fcb2",
  "receipt": {
    "to": null,
    "from": "0xAa9D46AE079851116967c6573f961B304095C34a",
    "contractAddress": "0xE0bfA1b3aA3CAfAa016D37C1457Cb315885AA54E",
    "transactionIndex": 75,
    "gasUsed": "3872043",
    "logsBloom": "0x
    "blockHash": "0xa83280ab2a606dd6b897137e05119c83a891b85bf75342288540872515970ce3",
    "transactionHash": "0x9fdd76afdde69dd7c276993271ca2bc7e91cc35b6df56337ddd0bd915425fcb2",
    "logs": [
      {
        "transactionIndex": 75,
        "blockNumber": 4875739,
        "transactionHash": "0x9fdd76afdde69dd7c276993271ca2bc7e91cc35b6df56337ddd0bd915425fcb2",
        "address": "0xF3f04A20B2410DBf9eBA86f8fC97D0220b85D6f7",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000aa9d46ae079851116967c6573f961b304095c34a0000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 116,
        "blockHash": "0xa83280ab2a606dd6b897137e05119c83a891b85bf75342288540872515970ce3"
      }
    ],
    "blockNumber": 4875739,
    "cumulativeGasUsed": "15114533",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Tack Line Torn",
    "TLT",
    "0xAa9D46AE079851116967c6573f961B304095C34a",
    "0xADAeb8c54d477282a68eBFF457158e1bD583Fde6",
    "1000",
    [
      "0xAa9D46AE079851116967c6573f961B304095C34a"
    ],
    [
      "100"
    ],
    {
      "stringStorageSlot": 0,
      "stringStorageAddress": "0xA2a185C00Ff1ceadddcA10640147EaF6B4F2D4f1"
    },
    {
      "stringStorageSlot": 1,
      "stringStorageAddress": "0xA2a185C00Ff1ceadddcA10640147EaF6B4F2D4f1"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "5b2842188b54615a9ad983be93af906e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_projectRegistry\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address[]\",\"name\":\"_royaltyPayees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_royaltyShares\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stringStorageSlot\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"stringStorageAddress\",\"type\":\"address\"}],\"internalType\":\"struct IArtwork.StringStorageData\",\"name\":\"_metadataJSONStringStorage\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stringStorageSlot\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"stringStorageAddress\",\"type\":\"address\"}],\"internalType\":\"struct IArtwork.StringStorageData\",\"name\":\"_scriptStringStorage\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyArtist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyArtistOrProjectRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyArtworkOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProjectRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TraitsAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TraitsNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ArtworkMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TraitsReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkTokenId\",\"type\":\"uint256\"}],\"name\":\"artwork\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataJSONStringStorage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stringStorageSlot\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"stringStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_saltNonce\",\"type\":\"uint256\"}],\"name\":\"mintArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_saltNonce\",\"type\":\"uint256\"}],\"name\":\"mintArtworkProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_saltNonce\",\"type\":\"uint256\"}],\"name\":\"mintArtworkWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIdsToBuy\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitAmountsToBuy\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIdsToCreateArtwork\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_saltNonce\",\"type\":\"uint256\"}],\"name\":\"mintTraitsAndArtwork\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectRegistry\",\"outputs\":[{\"internalType\":\"contract IProjectRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkTokenId\",\"type\":\"uint256\"}],\"name\":\"reclaimTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"script\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scriptStringStorage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stringStorageSlot\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"stringStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITraits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"artwork(uint256)\":{\"params\":{\"_artworkTokenId\":\"token ID of the artwork\"},\"returns\":{\"_hash\":\"the artwork hash\",\"_traitNames\":\"the human readable trait names contained in the artwork\",\"_traitTokenIds\":\"the token IDs of the traits the artwork contains\",\"_traitTypeNames\":\"the human readable trait type names\",\"_traitTypeValues\":\"the trait type values used by the generative script\",\"_traitValues\":\"the trait values used by the generative script\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"metadataJSON()\":{\"returns\":{\"_0\":\"string the project metadata in JSON format\"}},\"mintArtwork(uint256[],uint256)\":{\"params\":{\"_saltNonce\":\"salt number that is used to generate the artwork hash\",\"_traitTokenIds\":\"the trait token IDs to create the artwork with\"},\"returns\":{\"_artworkTokenId\":\"the token ID of the newly minted artwork\"}},\"mintArtworkProof(uint256[],uint256)\":{\"params\":{\"_saltNonce\":\"salt number that is used to generate the artwork hash\",\"_traitTokenIds\":\"token IDs of the traits to use to create the artwork\"}},\"mintArtworkWhitelist(uint256[],uint256)\":{\"params\":{\"_saltNonce\":\"salt number that is used to generate the artwork hash\",\"_traitTokenIds\":\"token IDs of the traits to use to create the artwork\"}},\"mintTraitsAndArtwork(uint256[],uint256[],uint256[],uint256)\":{\"params\":{\"_saltNonce\":\"salt number that is used to generate the artwork hash\",\"_traitAmountsToBuy\":\"amounts of each trait to buy\",\"_traitTokenIdsToBuy\":\"token IDs of the traits to buy\",\"_traitTokenIdsToCreateArtwork\":\"token IDs of the traits to use to create the artwork\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"reclaimTraits(uint256)\":{\"params\":{\"_artworkTokenId\":\"the token ID of the artwork being reclaimed\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"script()\":{\"returns\":{\"_0\":\"string the generative art javascript\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setup(bytes)\":{\"params\":{\"_data\":\"bytes containing address of the traits contract\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"the interface ID to check\"},\"returns\":{\"_0\":\"bool True if the interface is supported, otherwise False\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"token ID to get URI for\"},\"returns\":{\"_0\":\"string the token URI\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"userNonce(address)\":{\"params\":{\"_user\":\"the address of the user\"},\"returns\":{\"_0\":\"uint256 the user's nonce\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"artwork(uint256)\":{\"notice\":\"Returns info about the specified artwork token\"},\"metadataJSON()\":{\"notice\":\"Returns a string containing the project metadata in JSON format\"},\"mintArtwork(uint256[],uint256)\":{\"notice\":\"Mints a new artwork with the specified trait token IDs The caller must own the specified traits\"},\"mintArtworkProof(uint256[],uint256)\":{\"notice\":\"Allows the artist or project registry to mint the proof mint\"},\"mintArtworkWhitelist(uint256[],uint256)\":{\"notice\":\"Allows an address on the whitelist to mint an artwork for free\"},\"mintTraitsAndArtwork(uint256[],uint256[],uint256[],uint256)\":{\"notice\":\"Mints traits with specified amounts, and mints an artwork in a single transaction ETH amount needed for trait mints must be sent\"},\"reclaimTraits(uint256)\":{\"notice\":\"Reclaims the traits the specified artwork token into the traits its composed of The artwork token is burned, and the token ID will never be reused The traits are transferred to the caller's address\"},\"script()\":{\"notice\":\"Returns the string that contains the generative art javascript\"},\"setup(bytes)\":{\"notice\":\"Sets up the contract\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether the specified interface ID is supported by the contract\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the URI of the specified token ID\"},\"userNonce(address)\":{\"notice\":\"Returns the specified user's nonce, which is used to generate artwork hashes\"}},\"notice\":\"Implements ERC-721 standard for artwork tokens, and functionality for minting artwork and reclaiming traits\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Artwork.sol\":\"Artwork\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/finance/PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\\n * time of contract deployment and can't be updated thereafter.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable Ether.\\n     */\\n    function releasable(address account) public view returns (uint256) {\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        return _pendingPayment(account, totalReceived, released(account));\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(IERC20 token, address account) public view returns (uint256) {\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        return _pendingPayment(account, totalReceived, released(token, account));\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _totalReleased is the sum of all values in _released.\\n        // If \\\"_totalReleased += payment\\\" does not overflow, then \\\"_released[account] += payment\\\" cannot overflow.\\n        _totalReleased += payment;\\n        unchecked {\\n            _released[account] += payment;\\n        }\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(token, account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\\n        // If \\\"_erc20TotalReleased[token] += payment\\\" does not overflow, then \\\"_erc20Released[token][account] += payment\\\"\\n        // cannot overflow.\\n        _erc20TotalReleased[token] += payment;\\n        unchecked {\\n            _erc20Released[token][account] += payment;\\n        }\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\",\"keccak256\":\"0xba00a079c0def02f9e905ed091f01bcf9caa41ec215862a315e9f3838be61cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Artwork.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {ITraits} from \\\"./interfaces/ITraits.sol\\\";\\nimport {IArtwork} from \\\"./interfaces/IArtwork.sol\\\";\\nimport {IStringStorage} from \\\"./interfaces/IStringStorage.sol\\\";\\nimport {IProjectRegistry} from \\\"./interfaces/IProjectRegistry.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {ERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport {PaymentSplitter} from \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {ERC1155Holder, ERC1155Receiver, IERC165} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\n/**\\n * Implements ERC-721 standard for artwork tokens, and\\n * functionality for minting artwork and reclaiming traits\\n */\\ncontract Artwork is IArtwork, IERC721Metadata, ERC2981, ERC721, ERC1155Holder {\\n    using Strings for uint256;\\n    using Strings for address;\\n\\n    bool public proofMinted;\\n    string public constant VERSION = \\\"1.0\\\";\\n    address public artistAddress;\\n    IProjectRegistry public projectRegistry;\\n    ITraits public traits;\\n    uint256 public nextTokenId;\\n    StringStorageData public metadataJSONStringStorage;\\n    StringStorageData public scriptStringStorage;\\n\\n    mapping(uint256 => ArtworkData) private artworkData;\\n    mapping(address => uint256) private userNonces;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _artistAddress,\\n        address _projectRegistry,\\n        uint96 _royaltyFeeNumerator,\\n        address[] memory _royaltyPayees,\\n        uint256[] memory _royaltyShares,\\n        StringStorageData memory _metadataJSONStringStorage,\\n        StringStorageData memory _scriptStringStorage\\n    ) ERC721(_name, _symbol) {\\n        artistAddress = _artistAddress;\\n        projectRegistry = IProjectRegistry(_projectRegistry);\\n        address royaltySplitter = address(\\n            new PaymentSplitter(_royaltyPayees, _royaltyShares)\\n        );\\n        _setDefaultRoyalty(royaltySplitter, _royaltyFeeNumerator);\\n\\n        metadataJSONStringStorage = _metadataJSONStringStorage;\\n        scriptStringStorage = _scriptStringStorage;\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function setup(bytes calldata _data) external {\\n        if (msg.sender != address(projectRegistry))\\n            revert OnlyProjectRegistry();\\n        if (address(traits) != address(0)) revert AlreadySetup();\\n\\n        address _traits = abi.decode(_data, (address));\\n\\n        traits = ITraits(_traits);\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function mintArtwork(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) public returns (uint256 _artworkTokenId) {\\n        bytes32 _hash = keccak256(\\n            abi.encodePacked(\\n                address(this),\\n                msg.sender,\\n                userNonces[msg.sender],\\n                _saltNonce\\n            )\\n        );\\n        _artworkTokenId = nextTokenId++;\\n        artworkData[_artworkTokenId].hash = _hash;\\n        artworkData[_artworkTokenId].traitTokenIds = _traitTokenIds;\\n        userNonces[msg.sender]++;\\n\\n        traits.transferTraitsToMintArtwork(msg.sender, _traitTokenIds);\\n        _safeMint(msg.sender, _artworkTokenId);\\n\\n        emit ArtworkMinted(_artworkTokenId, _traitTokenIds, _hash, msg.sender);\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function reclaimTraits(uint256 _artworkTokenId) external {\\n        if (msg.sender != _ownerOf(_artworkTokenId)) revert OnlyArtworkOwner();\\n\\n        // Clear Artwork state\\n        uint256[] memory traitTokenIds = artworkData[_artworkTokenId]\\n            .traitTokenIds;\\n        artworkData[_artworkTokenId].hash = 0;\\n        artworkData[_artworkTokenId].traitTokenIds = new uint256[](0);\\n\\n        uint256[] memory amounts = new uint256[](traitTokenIds.length);\\n        for (uint256 i; i < amounts.length; ) {\\n            amounts[i] = 1;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _burn(_artworkTokenId);\\n        traits.safeBatchTransferFrom(\\n            address(this),\\n            msg.sender,\\n            traitTokenIds,\\n            amounts,\\n            \\\"\\\"\\n        );\\n\\n        emit TraitsReclaimed(_artworkTokenId, msg.sender);\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function mintArtworkProof(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external {\\n        if (proofMinted) revert ProofAlreadyMinted();\\n        if (\\n            msg.sender != artistAddress &&\\n            msg.sender != address(projectRegistry)\\n        ) revert OnlyArtistOrProjectRegistry();\\n\\n        proofMinted = true;\\n\\n        traits.mintTraitsArtistProof(msg.sender, _traitTokenIds);\\n\\n        mintArtwork(_traitTokenIds, _saltNonce);\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function mintArtworkWhitelist(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external {\\n        traits.mintTraitsWhitelist(msg.sender, _traitTokenIds);\\n\\n        mintArtwork(_traitTokenIds, _saltNonce);\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function mintTraitsAndArtwork(\\n        uint256[] calldata _traitTokenIdsToBuy,\\n        uint256[] calldata _traitAmountsToBuy,\\n        uint256[] calldata _traitTokenIdsToCreateArtwork,\\n        uint256 _saltNonce\\n    ) external payable {\\n        traits.mintTraits{value: msg.value}(\\n            msg.sender,\\n            _traitTokenIdsToBuy,\\n            _traitAmountsToBuy\\n        );\\n\\n        mintArtwork(_traitTokenIdsToCreateArtwork, _saltNonce);\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function tokenURI(\\n        uint256 _tokenId\\n    )\\n        public\\n        view\\n        override(ERC721, IERC721Metadata, IArtwork)\\n        returns (string memory)\\n    {\\n        string memory baseURI = projectRegistry.baseURI();\\n\\n        return\\n            bytes(baseURI).length != 0\\n                ? string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        address(this).toHexString(),\\n                        \\\"/\\\",\\n                        _tokenId.toString()\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function artwork(\\n        uint256 _artworkTokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory _traitTokenIds,\\n            string[] memory _traitNames,\\n            string[] memory _traitValues,\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues,\\n            bytes32 _hash\\n        )\\n    {\\n        _requireMinted(_artworkTokenId);\\n\\n        uint256 traitCount = artworkData[_artworkTokenId].traitTokenIds.length;\\n        _traitTokenIds = artworkData[_artworkTokenId].traitTokenIds;\\n        _traitNames = new string[](traitCount);\\n        _traitValues = new string[](traitCount);\\n        _traitTypeNames = new string[](traitCount);\\n        _traitTypeValues = new string[](traitCount);\\n\\n        for (uint256 i; i < traitCount; ) {\\n            (\\n                _traitNames[i],\\n                _traitValues[i],\\n                _traitTypeNames[i],\\n                _traitTypeValues[i]\\n            ) = traits.trait(_traitTokenIds[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _hash = artworkData[_artworkTokenId].hash;\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function metadataJSON() external view returns (string memory) {\\n        return\\n            IStringStorage(metadataJSONStringStorage.stringStorageAddress)\\n                .stringAtSlot(metadataJSONStringStorage.stringStorageSlot);\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function script() external view returns (string memory) {\\n        return\\n            IStringStorage(scriptStringStorage.stringStorageAddress)\\n                .stringAtSlot(scriptStringStorage.stringStorageSlot);\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function userNonce(address _user) external view returns (uint256) {\\n        return userNonces[_user];\\n    }\\n\\n    /** @inheritdoc IArtwork*/\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(IERC165, ERC721, ERC1155Receiver, IArtwork, ERC2981)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IArtwork).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xa274588e8c7aa278dc44cf7e114038badb20f7d1048584bc828c07ec7ff063f9\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IArtwork.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\ninterface IArtwork is IERC2981, IERC721 {\\n    struct ArtworkData {\\n        bytes32 hash;\\n        uint256[] traitTokenIds;\\n    }\\n\\n    struct StringStorageData {\\n      uint8 stringStorageSlot;\\n      address stringStorageAddress;\\n    }\\n\\n    error OnlyProjectRegistry();\\n    error ProofAlreadyMinted();\\n    error TraitsAlreadySet();\\n    error TraitsNotSet();\\n    error OnlyArtist();\\n    error OnlyArtistOrProjectRegistry();\\n    error OnlyArtworkOwner();\\n    error AlreadySetup();\\n\\n    event ArtworkMinted(\\n        uint256 indexed artworkTokenId,\\n        uint256[] traitTokenIds,\\n        bytes32 hash,\\n        address indexed creator\\n    );\\n    event TraitsReclaimed(\\n        uint256 indexed artworkTokenId,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * Sets up the contract\\n     *\\n     * @param _data bytes containing address of the traits contract\\n     */\\n    function setup(bytes calldata _data) external;\\n\\n    /**\\n     * Mints a new artwork with the specified trait token IDs\\n     * The caller must own the specified traits\\n     *\\n     * @param _traitTokenIds the trait token IDs to create the artwork with\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     * @return _artworkTokenId the token ID of the newly minted artwork\\n     */\\n    function mintArtwork(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external returns (uint256 _artworkTokenId);\\n\\n    /**\\n     * Reclaims the traits the specified artwork token into the traits its composed of\\n     * The artwork token is burned, and the token ID will never be reused\\n     * The traits are transferred to the caller's address\\n     *\\n     * @param _artworkTokenId the token ID of the artwork being reclaimed\\n     */\\n    function reclaimTraits(uint256 _artworkTokenId) external;\\n\\n    /**\\n     * Allows the artist or project registry to mint the proof mint\\n     *\\n     * @param _traitTokenIds token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintArtworkProof(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external;\\n\\n    /**\\n     * Allows an address on the whitelist to mint an artwork for free\\n     *\\n     * @param _traitTokenIds token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintArtworkWhitelist(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external;\\n\\n    /**\\n     * Mints traits with specified amounts, and mints an artwork in a single transaction\\n     * ETH amount needed for trait mints must be sent\\n     *\\n     * @param _traitTokenIdsToBuy token IDs of the traits to buy\\n     * @param _traitAmountsToBuy amounts of each trait to buy\\n     * @param _traitTokenIdsToCreateArtwork token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintTraitsAndArtwork(\\n        uint256[] calldata _traitTokenIdsToBuy,\\n        uint256[] calldata _traitAmountsToBuy,\\n        uint256[] calldata _traitTokenIdsToCreateArtwork,\\n        uint256 _saltNonce\\n    ) external payable;\\n\\n    /**\\n     * Returns the URI of the specified token ID\\n     *\\n     * @param _tokenId token ID to get URI for\\n     * @return string the token URI\\n     */\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    /**\\n     * Returns info about the specified artwork token\\n     *\\n     * @param _artworkTokenId token ID of the artwork\\n     * @return _traitTokenIds the token IDs of the traits the artwork contains\\n     * @return _traitNames the human readable trait names contained in the artwork\\n     * @return _traitValues the trait values used by the generative script\\n     * @return _traitTypeNames the human readable trait type names\\n     * @return _traitTypeValues the trait type values used by the generative script\\n     * @return _hash the artwork hash\\n     */\\n    function artwork(\\n        uint256 _artworkTokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory _traitTokenIds,\\n            string[] memory _traitNames,\\n            string[] memory _traitValues,\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues,\\n            bytes32 _hash\\n        );\\n\\n    /**\\n     * Returns a string containing the project metadata in JSON format\\n     *\\n     * @return string the project metadata in JSON format\\n     */\\n    function metadataJSON() external view returns (string memory);\\n\\n    /**\\n     * Returns the string that contains the generative art javascript\\n     *\\n     * @return string the generative art javascript\\n     */\\n    function script() external view returns (string memory);\\n\\n    /**\\n     * Returns the specified user's nonce, which is used to generate artwork hashes\\n     *\\n     * @param _user the address of the user\\n     * @return uint256 the user's nonce\\n     */\\n    function userNonce(address _user) external view returns (uint256);\\n\\n    /**\\n     * Returns whether the specified interface ID is supported by the contract\\n     *\\n     * @param interfaceId the interface ID to check\\n     * @return bool True if the interface is supported, otherwise False\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xda7890c83516b75ef36bbee6a4a9bf8e1f6661fe8caacc5e7767b0e605187fc6\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IProjectRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\ninterface IProjectRegistry {\\n    struct Project {\\n        address artwork;\\n        address traits;\\n    }\\n\\n    error OnlyAdmin();\\n    error InvalidAddress();\\n    error InvalidArrayLengths();\\n\\n    event BaseURIUpdated(string baseURI);\\n    event ProjectRegistered(\\n        uint256 indexed projectId,\\n        address indexed artwork,\\n        address indexed traits\\n    );\\n    event AdminAdded(address indexed account);\\n    event AdminRemoved(address indexed account);\\n\\n    /**\\n     * Updates the URI base string\\n     *\\n     * @param _baseURI the updated base URI string\\n     */\\n    function updateBaseURI(string memory _baseURI) external;\\n\\n    /**\\n     * Registers a project by storing the Artwork and Traits contract addresses,\\n     * and calls setup on both contracts with the corresponding bytes data\\n     *\\n     * @param _artwork the address of the Artwork contract\\n     * @param _artworkData data to pass to setup function of the Artwork contract\\n     * @param _traits the address of the Traits contract\\n     * @param _traitsData data to pass to setup function of the Traits contract\\n     */\\n    function registerProject(\\n        address _artwork,\\n        bytes calldata _artworkData,\\n        address _traits,\\n        bytes calldata _traitsData\\n    ) external;\\n\\n    /**\\n     * Executes an arbitrary number of external function calls\\n     *\\n     * @param _targets the array of addresses to call\\n     * @param _values array of Ether amounts for each transaction\\n     * @param _calldatas array of transaction calldata bytes\\n     */\\n    function execute(\\n        address[] calldata _targets,\\n        uint256[] calldata _values,\\n        bytes[] calldata _calldatas\\n    ) external;\\n\\n    /**\\n     * Adds multiple addresses to be made admins\\n     *\\n     * @param _admins the addresses to make admins\\n     */\\n    function addAdmins(address[] memory _admins) external;\\n\\n    /**\\n     * Removes multiple addresses from being admins\\n     *\\n     * @param _admins the addresses remove from being admins\\n     */\\n    function removeAdmins(address[] memory _admins) external;\\n\\n    /**\\n     * Returns the base URI string\\n     *\\n     * @return the base URI string\\n     */\\n    function baseURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x64f8e5cbbe9b44f3c787c487b902cc7deda4b9c734ce7e49a50e4c8c6ff4e0a7\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IStringStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\ninterface IStringStorage {\\n  error EmptySlot();\\n\\n  /**\\n   * Returns the string stored at the specific slot\\n   * Reverts if an invalid slot is provided\\n   *\\n   * @param _slot the slot to get the string at\\n   * @return string the string stored at the specified slot\\n   */\\n  function stringAtSlot(uint8 _slot) external pure returns (string memory);\\n}\",\"keccak256\":\"0x58496df391c00d33e6656241fc261ca7b150a393df0ffc409e1481e8c206518e\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface ITraits is IERC1155 {\\n    struct TraitType {\\n        string name;\\n        string value;\\n    }\\n\\n    struct Trait {\\n        string name;\\n        string value;\\n        uint256 typeIndex;\\n        uint256 maxSupply;\\n    }\\n\\n    struct TraitsSetup {\\n        string[] traitTypeNames;\\n        string[] traitTypeValues;\\n        string[] traitNames;\\n        string[] traitValues;\\n        uint256[] traitTypeIndexes;\\n        uint256[] traitMaxSupplys;\\n    }\\n\\n    event TraitsMinted(\\n        address indexed recipient,\\n        uint256[] traitTokenIds,\\n        uint256[] traitAmounts\\n    );\\n\\n    event AuctionScheduled(\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionPriceSteps,\\n        bool _auctionExponential,\\n        uint256 _traitsSaleStartTime,\\n        uint256 _whitelistStartTime\\n    );\\n\\n    error OnlyArtwork();\\n    error OnlyProjectRegistry();\\n    error AlreadySetup();\\n    error NotSetup();\\n    error InvalidArrayLengths();\\n    error InvalidAuction();\\n    error MaxSupply();\\n    error InvalidEthAmount();\\n    error InvalidTraits();\\n    error AuctionNotLive();\\n    error InvalidTokenId();\\n    error TraitsSaleStartTime();\\n    error WhitelistStartTime();\\n    error NoWhitelistMints();\\n\\n    /**\\n     * Sets the address of the Artwork contract and the auction configuration\\n     *\\n     * @param _data bytes data containt the artwork contract address and auction data\\n     */\\n    function setup(\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * Updates the schedule of the dutch auction, can only\\n     * be called if the dutch auction hasn't started yet, and\\n     * can only update the auction to a later time, not sooner\\n     *\\n     * @param _auctionStartTime timestamp the auction begins at\\n     * @param _auctionEndTime timestamp the auction ends at\\n     * @param _auctionStartPrice trait price the auction begins at\\n     * @param _auctionEndPrice trait price the auction ends at\\n     * @param _auctionPriceSteps number of different prices auction steps through\\n     * @param _auctionExponential true indicates auction curve is exponential, otherwise linear\\n     * @param _traitsSaleStartTime timestamp at which traits can be bought individually\\n     * @param _whitelistStartTime timestamp at which whitelisted users can start minting\\n     */\\n    function updateAuction(\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionPriceSteps,\\n        bool _auctionExponential,\\n        uint256 _traitsSaleStartTime,\\n        uint256 _whitelistStartTime\\n    ) external;\\n\\n    /**\\n     * Allows a user to mint any number of traits and amounts using ether\\n     *\\n     * @param _recipient the address to receive the trait tokens\\n     * @param _traitTokenIds the trait token IDs to buy\\n     * @param _traitAmounts the amounts of each token ID to buy\\n     */\\n    function mintTraits(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds,\\n        uint256[] calldata _traitAmounts\\n    ) external payable;\\n\\n    /**\\n     * Allows the artist to mint traits for free for the proof artwork1\\n     *\\n     * @param _artistAddress the artist address to receive the trait tokens\\n     * @param _traitTokenIds the trait token IDs to mint the artwork with\\n     */\\n    function mintTraitsArtistProof(\\n        address _artistAddress,\\n        uint256[] calldata _traitTokenIds\\n    ) external;\\n\\n    /**\\n     * Allows a whitelisted user to mint traits for free\\n     *\\n     * @param _recipient the address to receive the trait tokens\\n     * @param _traitTokenIds the trait token IDs to mint the artwork with\\n     */\\n    function mintTraitsWhitelist(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds\\n    ) external;\\n\\n    /**\\n     * Called by the Artwork contract to transfer traits from the caller to the Artwork\\n     * contract to create a new Artwork token\\n     *\\n     * @param _caller the address creating the artwork\\n     * @param _traitTokenIds the trait token IDs used to create the artwork\\n     */\\n    function transferTraitsToMintArtwork(\\n        address _caller,\\n        uint256[] calldata _traitTokenIds\\n    ) external;\\n\\n    /**\\n     * Returns the trait types\\n     *\\n     * @return _traitTypeNames human readable trait type names\\n     * @return _traitTypeValues trait type values used in the generative script\\n     */\\n    function traitTypes()\\n        external\\n        view\\n        returns (\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues\\n        );\\n\\n    /**\\n     * Returns info about an individual trait\\n     *\\n     * @param _tokenId token ID to get info about\\n     * @return _traitName human readable trait name\\n     * @return _traitValue trait type value used in the generative script\\n     * @return _traitTypeName human readable trait type name\\n     * @return _traitTypeValue trait type value used in the generative script\\n     */\\n    function trait(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory _traitName,\\n            string memory _traitValue,\\n            string memory _traitTypeName,\\n            string memory _traitTypeValue\\n        );\\n\\n    /**\\n     * Returns info about all traits\\n     *\\n     * @return _traitTokenIds token IDs of the traits\\n     * @return _traitNames human readable trait names\\n     * @return _traitValues trait type values used in the generative script\\n     * @return _traitTypeIndexes trait type index each trait belongs to\\n     * @return _traitTypeNames human readable trait type names\\n     * @return _traitTypeValues trait type values used in the generative script\\n     * @return _traitTotalSupplys total supply of each trait\\n     * @return _traitMaxSupplys max supply of each trait\\n     */\\n    function traits()\\n        external\\n        view\\n        returns (\\n            uint256[] memory _traitTokenIds,\\n            string[] memory _traitNames,\\n            string[] memory _traitValues,\\n            uint256[] memory _traitTypeIndexes,\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues,\\n            uint256[] memory _traitTotalSupplys,\\n            uint256[] memory _traitMaxSupplys\\n        );\\n\\n    /**\\n     * Returns which price step the auction is currently on\\n     *\\n     * @return the current price step\\n     */\\n    function traitPriceStep() external view returns (uint256);\\n\\n    /**\\n     * Returns the current trait price\\n     *\\n     * @return _price the current trait price in ether\\n     */\\n    function traitPrice() external view returns (uint256 _price);\\n\\n    /**\\n     * Returns how many more whitelist mints the specified address has\\n     *\\n     * @return uint256 the number of whitelist mints remaining\\n     */\\n    function whitelistMintsRemaining(address _user) external view returns (uint256);\\n\\n    /**\\n     * Returns the max supply of the specified token ID\\n     *\\n     * @return _maxSupply the max supply of the token\\n     */\\n    function maxSupply(\\n        uint256 _tokenId\\n    ) external view returns (uint256 _maxSupply);\\n\\n    /**\\n     * Returns the URI of the specified token ID\\n     *\\n     * @param _tokenId the token ID to get the URI for\\n     * @return string the token specific URI\\n     */\\n    function uri(uint256 _tokenId) external view returns (string memory);\\n\\n    /**\\n     * Returns whether the specified interface ID is supported by the contract\\n     *\\n     * @param interfaceId the interface ID to check\\n     * @return bool True if the interface is supported, otherwise False\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6cd0eb00ce079e1fc6ae8ee2a748e7f86e9397438293c62b707221e56bc6230b\",\"license\":\"GNU GPLv3\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004c7638038062004c768339810160408190526200003491620004ce565b8888600262000044838262000676565b50600362000053828262000676565b505060088054610100600160a81b0319166101006001600160a01b038b81169190910291909117909155600980546001600160a01b0319169189169190911790555060405160009085908590620000aa9062000243565b620000b792919062000742565b604051809103906000f080158015620000d4573d6000803e3d6000fd5b509050620000e381876200013e565b508151600c80546020948501516001600160a01b039081166101009081026001600160a81b031993841660ff96871617179093558451600d80549690970151909116909202931691161717905550620007ca95505050505050565b6127106001600160601b0382161115620001b25760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084015b60405180910390fd5b6001600160a01b0382166200020a5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401620001a9565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b61128180620039f583390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000292576200029262000251565b604052919050565b600082601f830112620002ac57600080fd5b81516001600160401b03811115620002c857620002c862000251565b6020620002de601f8301601f1916820162000267565b8281528582848701011115620002f357600080fd5b60005b8381101562000313578581018301518282018401528201620002f6565b506000928101909101919091529392505050565b80516001600160a01b03811681146200033f57600080fd5b919050565b80516001600160601b03811681146200033f57600080fd5b60006001600160401b0382111562000378576200037862000251565b5060051b60200190565b600082601f8301126200039457600080fd5b81516020620003ad620003a7836200035c565b62000267565b82815260059290921b84018101918181019086841115620003cd57600080fd5b8286015b84811015620003f357620003e58162000327565b8352918301918301620003d1565b509695505050505050565b600082601f8301126200041057600080fd5b8151602062000423620003a7836200035c565b82815260059290921b840181019181810190868411156200044357600080fd5b8286015b84811015620003f3578051835291830191830162000447565b6000604082840312156200047357600080fd5b604080519081016001600160401b038111828210171562000498576200049862000251565b8060405250809150825160ff81168114620004b257600080fd5b8152620004c26020840162000327565b60208201525092915050565b60008060008060008060008060006101608a8c031215620004ee57600080fd5b89516001600160401b03808211156200050657600080fd5b620005148d838e016200029a565b9a5060208c01519150808211156200052b57600080fd5b620005398d838e016200029a565b99506200054960408d0162000327565b98506200055960608d0162000327565b97506200056960808d0162000344565b965060a08c01519150808211156200058057600080fd5b6200058e8d838e0162000382565b955060c08c0151915080821115620005a557600080fd5b50620005b48c828d01620003fe565b935050620005c68b60e08c0162000460565b9150620005d88b6101208c0162000460565b90509295985092959850929598565b600181811c90821680620005fc57607f821691505b6020821081036200061d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200067157600081815260208120601f850160051c810160208610156200064c5750805b601f850160051c820191505b818110156200066d5782815560010162000658565b5050505b505050565b81516001600160401b0381111562000692576200069262000251565b620006aa81620006a38454620005e7565b8462000623565b602080601f831160018114620006e25760008415620006c95750858301515b600019600386901b1c1916600185901b1785556200066d565b600085815260208120601f198616915b828110156200071357888601518255948401946001909101908401620006f2565b5085821015620007325787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604080825283519082018190526000906020906060840190828701845b82811015620007865781516001600160a01b0316845292840192908401906001016200075f565b5050508381038285015284518082528583019183019060005b81811015620007bd578351835292840192918401916001016200079f565b5090979650505050505050565b61321b80620007da6000396000f3fe6080604052600436106102195760003560e01c806370a082311161011d578063c87b56dd116100b0578063ebe9eb9f1161007f578063f4e95c6b11610064578063f4e95c6b14610717578063fbb401041461072c578063ffa1ad741461074c57600080fd5b8063ebe9eb9f146106bd578063f23a6e61146106d257600080fd5b8063c87b56dd1461060f578063d7eb3f3a1461062f578063e1fc334f14610654578063e985e9c51461067457600080fd5b8063a1ee0544116100ec578063a1ee054414610557578063a22cb46514610571578063b88d4fde14610591578063bc197c81146105b157600080fd5b806370a08231146104ec57806375794a3c1461050c57806395d89b41146105225780639ded06df1461053757600080fd5b80632e04b8e7116101b05780635a33d8dc1161017f5780636352211e116101645780636352211e1461049957806368ae2546146104b95780636f7e674d146104d957600080fd5b80635a33d8dc1461044f5780635dcb49c51461046f57600080fd5b80632e04b8e71461039957806342842e0e146103dd57806344085365146103fd57806354682d721461041d57600080fd5b8063095ea7b3116101ec578063095ea7b3146102cf57806323b872dd146102ef578063287987231461030f5780632a55205a1461035a57600080fd5b806301ffc9a71461021e57806306fdde0314610253578063081812fc1461027557806308fd8493146102ad575b600080fd5b34801561022a57600080fd5b5061023e6102393660046126a2565b610795565b60405190151581526020015b60405180910390f35b34801561025f57600080fd5b506102686107d9565b60405161024a919061270f565b34801561028157600080fd5b50610295610290366004612722565b61086b565b6040516001600160a01b03909116815260200161024a565b3480156102b957600080fd5b506102cd6102c8366004612722565b610892565b005b3480156102db57600080fd5b506102cd6102ea366004612750565b610ae6565b3480156102fb57600080fd5b506102cd61030a36600461277c565b610c3a565b34801561031b57600080fd5b50600d546103399060ff81169061010090046001600160a01b031682565b6040805160ff90931683526001600160a01b0390911660208301520161024a565b34801561036657600080fd5b5061037a6103753660046127bd565b610cb1565b604080516001600160a01b03909316835260208301919091520161024a565b3480156103a557600080fd5b506103cf6103b43660046127df565b6001600160a01b03166000908152600f602052604090205490565b60405190815260200161024a565b3480156103e957600080fd5b506102cd6103f836600461277c565b610d6e565b34801561040957600080fd5b506102cd610418366004612841565b610d89565b34801561042957600080fd5b5061043d610438366004612722565b610e19565b60405161024a9695949392919061291a565b34801561045b57600080fd5b50600954610295906001600160a01b031681565b34801561047b57600080fd5b50600c546103399060ff81169061010090046001600160a01b031682565b3480156104a557600080fd5b506102956104b4366004612722565b6110ff565b3480156104c557600080fd5b506103cf6104d4366004612841565b611164565b6102cd6104e736600461298f565b611303565b3480156104f857600080fd5b506103cf6105073660046127df565b61139d565b34801561051857600080fd5b506103cf600b5481565b34801561052e57600080fd5b50610268611437565b34801561054357600080fd5b506102cd610552366004612a32565b611446565b34801561056357600080fd5b5060085461023e9060ff1681565b34801561057d57600080fd5b506102cd61058c366004612aa4565b611500565b34801561059d57600080fd5b506102cd6105ac366004612ba7565b61150f565b3480156105bd57600080fd5b506105f66105cc366004612c93565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040516001600160e01b0319909116815260200161024a565b34801561061b57600080fd5b5061026861062a366004612722565b611587565b34801561063b57600080fd5b506008546102959061010090046001600160a01b031681565b34801561066057600080fd5b50600a54610295906001600160a01b031681565b34801561068057600080fd5b5061023e61068f366004612d41565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156106c957600080fd5b50610268611662565b3480156106de57600080fd5b506105f66106ed366004612d6f565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b34801561072357600080fd5b506102686116e1565b34801561073857600080fd5b506102cd610747366004612841565b61171a565b34801561075857600080fd5b506102686040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b60006001600160e01b031982167f81942f3d0000000000000000000000000000000000000000000000000000000014806107d357506107d382611813565b92915050565b6060600280546107e890612dd8565b80601f016020809104026020016040519081016040528092919081815260200182805461081490612dd8565b80156108615780601f1061083657610100808354040283529160200191610861565b820191906000526020600020905b81548152906001019060200180831161084457829003601f168201915b5050505050905090565b600061087682611851565b506000908152600660205260409020546001600160a01b031690565b6000818152600460205260409020546001600160a01b031633146108e2576040517f1002a8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600e602090815260408083206001018054825181850281018501909352808352919290919083018282801561093b57602002820191906000526020600020905b815481526020019060010190808311610927575b5050506000858152600e6020526040812081905592935061095a915050565b604051908082528060200260200182016040528015610983578160200160208202803683370190505b50600e600084815260200190815260200160002060010190805190602001906109ad9291906125f1565b506000815167ffffffffffffffff8111156109ca576109ca612ae2565b6040519080825280602002602001820160405280156109f3578160200160208202803683370190505b50905060005b8151811015610a29576001828281518110610a1657610a16612e12565b60209081029190910101526001016109f9565b50610a33836118b8565b600a546040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632eb2c2d690610a82903090339087908790600401612e28565b600060405180830381600087803b158015610a9c57600080fd5b505af1158015610ab0573d6000803e3d6000fd5b50506040513392508591507f3a68f3980ec5280d87be81c5fa8cd81617be9bbf157acbe71d9321dca391e6a890600090a3505050565b6000610af1826110ff565b9050806001600160a01b0316836001600160a01b031603610b7f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610bb957506001600160a01b038116600090815260076020908152604080832033845290915290205460ff165b610c2b5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610b76565b610c35838361195b565b505050565b610c4433826119c9565b610ca65760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b76565b610c35838383611a48565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046bffffffffffffffffffffffff16928201929092528291610d305750604080518082019091526000546001600160a01b0381168252600160a01b90046bffffffffffffffffffffffff1660208201525b602081015160009061271090610d54906bffffffffffffffffffffffff1687612e99565b610d5e9190612eb0565b91519350909150505b9250929050565b610c358383836040518060200160405280600081525061150f565b600a546040517f63a533de0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906363a533de90610dd690339087908790600401612f1d565b600060405180830381600087803b158015610df057600080fd5b505af1158015610e04573d6000803e3d6000fd5b50505050610e13838383611164565b50505050565b60608060608060606000610e2c87611851565b6000878152600e6020908152604091829020600101805483518184028101840190945280845292918390830182828015610e8557602002820191906000526020600020905b815481526020019060010190808311610e71575b505050505096508067ffffffffffffffff811115610ea557610ea5612ae2565b604051908082528060200260200182016040528015610ed857816020015b6060815260200190600190039081610ec35790505b5095508067ffffffffffffffff811115610ef457610ef4612ae2565b604051908082528060200260200182016040528015610f2757816020015b6060815260200190600190039081610f125790505b5094508067ffffffffffffffff811115610f4357610f43612ae2565b604051908082528060200260200182016040528015610f7657816020015b6060815260200190600190039081610f615790505b5093508067ffffffffffffffff811115610f9257610f92612ae2565b604051908082528060200260200182016040528015610fc557816020015b6060815260200190600190039081610fb05790505b50925060005b818110156110e257600a5488516001600160a01b039091169063f3457fdf908a9084908110610ffc57610ffc612e12565b60200260200101516040518263ffffffff1660e01b815260040161102291815260200190565b600060405180830381865afa15801561103f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110679190810190612f8e565b8a858151811061107957611079612e12565b602002602001018a868151811061109257611092612e12565b602002602001018a87815181106110ab576110ab612e12565b602002602001018a88815181106110c4576110c4612e12565b60209081029190910101939093529290915291905252600101610fcb565b5050506000958652600e6020526040909520549395929491939092565b6000818152600460205260408120546001600160a01b0316806107d35760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b76565b336000818152600f60209081526040808320549051929384936111bb93309391889101606094851b6bffffffffffffffffffffffff1990811682529390941b90921660148401526028830152604882015260680190565b60408051601f198184030181529190528051602090910120600b805491925060006111e58361302f565b909155506000818152600e6020526040902082815590925061120b90600101868661263c565b50336000908152600f602052604081208054916112278361302f565b9091555050600a546040517f37b2383f0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906337b2383f9061127990339089908990600401612f1d565b600060405180830381600087803b15801561129357600080fd5b505af11580156112a7573d6000803e3d6000fd5b505050506112b53383611c4e565b336001600160a01b0316827f61e13485a36a1bab49bdef2c6884595827c2f5caf9160aff3047f78fae8d01e98787856040516112f393929190613048565b60405180910390a3509392505050565b600a546040517f5bf1af440000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690635bf1af449034906113569033908c908c908c908c9060040161306c565b6000604051808303818588803b15801561136f57600080fd5b505af1158015611383573d6000803e3d6000fd5b5050505050611393838383611164565b5050505050505050565b60006001600160a01b03821661141b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610b76565b506001600160a01b031660009081526005602052604090205490565b6060600380546107e890612dd8565b6009546001600160a01b0316331461148a576040517f2cd55c7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a546001600160a01b0316156114cd576040517f7735869100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006114db828401846127df565b600a80546001600160a01b0319166001600160a01b0392909216919091179055505050565b61150b338383611c68565b5050565b61151933836119c9565b61157b5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b76565b610e1384848484611d36565b60606000600960009054906101000a90046001600160a01b03166001600160a01b0316636c0360eb6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156115de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261160691908101906130ae565b90508051600003611626576040518060200160405280600081525061165b565b8061163030611db4565b61163985611dca565b60405160200161164b939291906130e3565b6040516020818303038152906040525b9392505050565b600d5460405163181957f960e21b815260ff8216600482015260609161010090046001600160a01b0316906360655fe4906024015b600060405180830381865afa1580156116b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116dc91908101906130ae565b905090565b600c5460405163181957f960e21b815260ff8216600482015260609161010090046001600160a01b0316906360655fe490602401611697565b60085460ff1615611757576040517f4f05cdd500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60085461010090046001600160a01b0316331480159061178257506009546001600160a01b03163314155b156117b9576040517f3ec0dfc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008805460ff19166001179055600a546040517f3f2a0f260000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633f2a0f2690610dd690339087908790600401612f1d565b60006001600160e01b031982167f4e2312e00000000000000000000000000000000000000000000000000000000014806107d357506107d382611e6a565b6000818152600460205260409020546001600160a01b03166118b55760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b76565b50565b60006118c3826110ff565b90506118d3816000846001611edc565b6118dc826110ff565b600083815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526005845282852080546000190190558785526004909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611990826110ff565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806119d5836110ff565b9050806001600160a01b0316846001600160a01b03161480611a1c57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b80611a405750836001600160a01b0316611a358461086b565b6001600160a01b0316145b949350505050565b826001600160a01b0316611a5b826110ff565b6001600160a01b031614611abf5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b76565b6001600160a01b038216611b3a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b76565b611b478383836001611edc565b826001600160a01b0316611b5a826110ff565b6001600160a01b031614611bbe5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b76565b600081815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260058552838620805460001901905590871680865283862080546001019055868652600490945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61150b828260405180602001604052806000815250611f64565b816001600160a01b0316836001600160a01b031603611cc95760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b76565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611d41848484611a48565b611d4d84848484611fe2565b610e135760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b76565b60606107d36001600160a01b038316601461212e565b60606000611dd78361230f565b600101905060008167ffffffffffffffff811115611df757611df7612ae2565b6040519080825280601f01601f191660200182016040528015611e21576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611e2b57509392505050565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480611ecd57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806107d357506107d3826123f1565b6001811115610e13576001600160a01b03841615611f22576001600160a01b03841660009081526005602052604081208054839290611f1c90849061314f565b90915550505b6001600160a01b03831615610e13576001600160a01b03831660009081526005602052604081208054839290611f59908490613162565b909155505050505050565b611f6e8383612458565b611f7b6000848484611fe2565b610c355760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b76565b60006001600160a01b0384163b1561212357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612026903390899088908890600401613175565b6020604051808303816000875af1925050508015612061575060408051601f3d908101601f1916820190925261205e918101906131b1565b60015b612109573d80801561208f576040519150601f19603f3d011682016040523d82523d6000602084013e612094565b606091505b5080516000036121015760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b76565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a40565b506001949350505050565b6060600061213d836002612e99565b612148906002613162565b67ffffffffffffffff81111561216057612160612ae2565b6040519080825280601f01601f19166020018201604052801561218a576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106121c1576121c1612e12565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061220c5761220c612e12565b60200101906001600160f81b031916908160001a9053506000612230846002612e99565b61223b906001613162565b90505b60018111156122c0577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061227c5761227c612e12565b1a60f81b82828151811061229257612292612e12565b60200101906001600160f81b031916908160001a90535060049490941c936122b9816131ce565b905061223e565b50831561165b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b76565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612358577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612384576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106123a257662386f26fc10000830492506010015b6305f5e10083106123ba576305f5e100830492506008015b61271083106123ce57612710830492506004015b606483106123e0576064830492506002015b600a83106107d35760010192915050565b60006001600160e01b031982167f2a55205a0000000000000000000000000000000000000000000000000000000014806107d357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146107d3565b6001600160a01b0382166124ae5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b76565b6000818152600460205260409020546001600160a01b0316156125135760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b76565b612521600083836001611edc565b6000818152600460205260409020546001600160a01b0316156125865760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b76565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805482825590600052602060002090810192821561262c579160200282015b8281111561262c578251825591602001919060010190612611565b50612638929150612677565b5090565b82805482825590600052602060002090810192821561262c579160200282015b8281111561262c57823582559160200191906001019061265c565b5b808211156126385760008155600101612678565b6001600160e01b0319811681146118b557600080fd5b6000602082840312156126b457600080fd5b813561165b8161268c565b60005b838110156126da5781810151838201526020016126c2565b50506000910152565b600081518084526126fb8160208601602086016126bf565b601f01601f19169290920160200192915050565b60208152600061165b60208301846126e3565b60006020828403121561273457600080fd5b5035919050565b6001600160a01b03811681146118b557600080fd5b6000806040838503121561276357600080fd5b823561276e8161273b565b946020939093013593505050565b60008060006060848603121561279157600080fd5b833561279c8161273b565b925060208401356127ac8161273b565b929592945050506040919091013590565b600080604083850312156127d057600080fd5b50508035926020909101359150565b6000602082840312156127f157600080fd5b813561165b8161273b565b60008083601f84011261280e57600080fd5b50813567ffffffffffffffff81111561282657600080fd5b6020830191508360208260051b8501011115610d6757600080fd5b60008060006040848603121561285657600080fd5b833567ffffffffffffffff81111561286d57600080fd5b612879868287016127fc565b909790965060209590950135949350505050565b600081518084526020808501945080840160005b838110156128bd578151875295820195908201906001016128a1565b509495945050505050565b6000815180845260208085019450848260051b860182860160005b8581101561290d5783830389526128fb8383516126e3565b988501989250908401906001016128e3565b5090979650505050505050565b60c08152600061292d60c083018961288d565b828103602084015261293f81896128c8565b9050828103604084015261295381886128c8565b9050828103606084015261296781876128c8565b9050828103608084015261297b81866128c8565b9150508260a0830152979650505050505050565b60008060008060008060006080888a0312156129aa57600080fd5b873567ffffffffffffffff808211156129c257600080fd5b6129ce8b838c016127fc565b909950975060208a01359150808211156129e757600080fd5b6129f38b838c016127fc565b909750955060408a0135915080821115612a0c57600080fd5b50612a198a828b016127fc565b989b979a50959894979596606090950135949350505050565b60008060208385031215612a4557600080fd5b823567ffffffffffffffff80821115612a5d57600080fd5b818501915085601f830112612a7157600080fd5b813581811115612a8057600080fd5b866020828501011115612a9257600080fd5b60209290920196919550909350505050565b60008060408385031215612ab757600080fd5b8235612ac28161273b565b915060208301358015158114612ad757600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612b2157612b21612ae2565b604052919050565b600067ffffffffffffffff821115612b4357612b43612ae2565b50601f01601f191660200190565b600082601f830112612b6257600080fd5b8135612b75612b7082612b29565b612af8565b818152846020838601011115612b8a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612bbd57600080fd5b8435612bc88161273b565b93506020850135612bd88161273b565b925060408501359150606085013567ffffffffffffffff811115612bfb57600080fd5b612c0787828801612b51565b91505092959194509250565b600082601f830112612c2457600080fd5b8135602067ffffffffffffffff821115612c4057612c40612ae2565b8160051b612c4f828201612af8565b9283528481018201928281019087851115612c6957600080fd5b83870192505b84831015612c8857823582529183019190830190612c6f565b979650505050505050565b600080600080600060a08688031215612cab57600080fd5b8535612cb68161273b565b94506020860135612cc68161273b565b9350604086013567ffffffffffffffff80821115612ce357600080fd5b612cef89838a01612c13565b94506060880135915080821115612d0557600080fd5b612d1189838a01612c13565b93506080880135915080821115612d2757600080fd5b50612d3488828901612b51565b9150509295509295909350565b60008060408385031215612d5457600080fd5b8235612d5f8161273b565b91506020830135612ad78161273b565b600080600080600060a08688031215612d8757600080fd5b8535612d928161273b565b94506020860135612da28161273b565b93506040860135925060608601359150608086013567ffffffffffffffff811115612dcc57600080fd5b612d3488828901612b51565b600181811c90821680612dec57607f821691505b602082108103612e0c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808716835280861660208401525060a06040830152612e5460a083018561288d565b8281036060840152612e66818561288d565b838103608090940193909352505060008152602001949350505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176107d3576107d3612e83565b600082612ecd57634e487b7160e01b600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612f0457600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b0384168152604060208201526000612f40604083018486612ed2565b95945050505050565b600082601f830112612f5a57600080fd5b8151612f68612b7082612b29565b818152846020838601011115612f7d57600080fd5b611a408260208301602087016126bf565b60008060008060808587031215612fa457600080fd5b845167ffffffffffffffff80821115612fbc57600080fd5b612fc888838901612f49565b95506020870151915080821115612fde57600080fd5b612fea88838901612f49565b9450604087015191508082111561300057600080fd5b61300c88838901612f49565b9350606087015191508082111561302257600080fd5b50612c0787828801612f49565b60006001820161304157613041612e83565b5060010190565b60408152600061305c604083018587612ed2565b9050826020830152949350505050565b6001600160a01b038616815260606020820152600061308f606083018688612ed2565b82810360408401526130a2818587612ed2565b98975050505050505050565b6000602082840312156130c057600080fd5b815167ffffffffffffffff8111156130d757600080fd5b611a4084828501612f49565b600084516130f58184602089016126bf565b8451908301906131098183602089016126bf565b7f2f00000000000000000000000000000000000000000000000000000000000000910190815283516131428160018401602088016126bf565b0160010195945050505050565b818103818111156107d3576107d3612e83565b808201808211156107d3576107d3612e83565b60006001600160a01b038087168352808616602084015250836040830152608060608301526131a760808301846126e3565b9695505050505050565b6000602082840312156131c357600080fd5b815161165b8161268c565b6000816131dd576131dd612e83565b50600019019056fea2646970667358221220a97189a0354b1b923a5e85c0033978dae2be56a8c0a02b1c8f8dd3be85ad800e64736f6c634300081300336080604052604051620012813803806200128183398101604081905262000026916200042e565b8051825114620000985760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084015b60405180910390fd5b6000825111620000eb5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f2070617965657300000000000060448201526064016200008f565b60005b82518110156200015757620001428382815181106200011157620001116200050c565b60200260200101518383815181106200012e576200012e6200050c565b60200260200101516200016060201b60201c565b806200014e8162000538565b915050620000ee565b50505062000570565b6001600160a01b038216620001cd5760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b60648201526084016200008f565b600081116200021f5760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a2073686172657320617265203000000060448201526064016200008f565b6001600160a01b038216600090815260026020526040902054156200029b5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b60648201526084016200008f565b60048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0384169081179091556000908152600260205260408120829055546200030390829062000554565b600055604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200038d576200038d6200034c565b604052919050565b60006001600160401b03821115620003b157620003b16200034c565b5060051b60200190565b600082601f830112620003cd57600080fd5b81516020620003e6620003e08362000395565b62000362565b82815260059290921b840181019181810190868411156200040657600080fd5b8286015b848110156200042357805183529183019183016200040a565b509695505050505050565b600080604083850312156200044257600080fd5b82516001600160401b03808211156200045a57600080fd5b818501915085601f8301126200046f57600080fd5b8151602062000482620003e08362000395565b82815260059290921b84018101918181019089841115620004a257600080fd5b948201945b83861015620004d95785516001600160a01b0381168114620004c95760008081fd5b82529482019490820190620004a7565b91880151919650909350505080821115620004f357600080fd5b506200050285828601620003bb565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016200054d576200054d62000522565b5060010190565b808201808211156200056a576200056a62000522565b92915050565b610d0180620005806000396000f3fe6080604052600436106100c05760003560e01c80639852595c11610074578063ce7c2ac21161004e578063ce7c2ac214610242578063d79779b214610278578063e33b7de3146102ae57600080fd5b80639852595c146101cc578063a3f8eace14610202578063c45ac0501461022257600080fd5b8063406072a9116100a5578063406072a91461015457806348b75044146101745780638b83209b1461019457600080fd5b8063191655871461010e5780633a98ef391461013057600080fd5b36610109577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561011a57600080fd5b5061012e610129366004610b23565b6102c3565b005b34801561013c57600080fd5b506000545b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061014161016f366004610b40565b610432565b34801561018057600080fd5b5061012e61018f366004610b40565b61045f565b3480156101a057600080fd5b506101b46101af366004610b79565b6105f3565b6040516001600160a01b03909116815260200161014b565b3480156101d857600080fd5b506101416101e7366004610b23565b6001600160a01b031660009081526003602052604090205490565b34801561020e57600080fd5b5061014161021d366004610b23565b610623565b34801561022e57600080fd5b5061014161023d366004610b40565b61066b565b34801561024e57600080fd5b5061014161025d366004610b23565b6001600160a01b031660009081526002602052604090205490565b34801561028457600080fd5b50610141610293366004610b23565b6001600160a01b031660009081526005602052604090205490565b3480156102ba57600080fd5b50600154610141565b6001600160a01b03811660009081526002602052604090205461033c5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b60648201526084015b60405180910390fd5b600061034782610623565b9050806000036103ad5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610333565b80600160008282546103bf9190610ba8565b90915550506001600160a01b03821660009081526003602052604090208054820190556103ec828261072a565b604080516001600160a01b0384168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a15050565b6001600160a01b038083166000908152600660209081526040808320938516835292905220545b92915050565b6001600160a01b0381166000908152600260205260409020546104d35760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610333565b60006104df838361066b565b9050806000036105455760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610333565b6001600160a01b0383166000908152600560205260408120805483929061056d908490610ba8565b90915550506001600160a01b0380841660009081526006602090815260408083209386168352929052208054820190556105a8838383610848565b604080516001600160a01b038481168252602082018490528516917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a2505050565b60006004828154811061060857610608610bbb565b6000918252602090912001546001600160a01b031692915050565b60008061062f60015490565b6106399047610ba8565b9050610664838261065f866001600160a01b031660009081526003602052604090205490565b6108c8565b9392505050565b6001600160a01b03821660009081526005602052604081205481906040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107079190610bd1565b6107119190610ba8565b9050610722838261065f8787610432565b949350505050565b8047101561077a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610333565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146107c7576040519150601f19603f3d011682016040523d82523d6000602084013e6107cc565b606091505b50509050806108435760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610333565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610843908490610903565b600080546001600160a01b0385168252600260205260408220548391906108ef9086610bea565b6108f99190610c01565b6107229190610c23565b6000610958826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109e89092919063ffffffff16565b80519091501561084357808060200190518101906109769190610c36565b6108435760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610333565b6060610722848460008585600080866001600160a01b03168587604051610a0f9190610c7c565b60006040518083038185875af1925050503d8060008114610a4c576040519150601f19603f3d011682016040523d82523d6000602084013e610a51565b606091505b5091509150610a6287838387610a6d565b979650505050505050565b60608315610adc578251600003610ad5576001600160a01b0385163b610ad55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610333565b5081610722565b6107228383815115610af15781518083602001fd5b8060405162461bcd60e51b81526004016103339190610c98565b6001600160a01b0381168114610b2057600080fd5b50565b600060208284031215610b3557600080fd5b813561066481610b0b565b60008060408385031215610b5357600080fd5b8235610b5e81610b0b565b91506020830135610b6e81610b0b565b809150509250929050565b600060208284031215610b8b57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561045957610459610b92565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610be357600080fd5b5051919050565b808202811582820484141761045957610459610b92565b600082610c1e57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561045957610459610b92565b600060208284031215610c4857600080fd5b8151801515811461066457600080fd5b60005b83811015610c73578181015183820152602001610c5b565b50506000910152565b60008251610c8e818460208701610c58565b9190910192915050565b6020815260008251806020840152610cb7816040850160208701610c58565b601f01601f1916919091016040019291505056fea2646970667358221220ce9a6bcd2b43e1c2ba849e49a590b0148fe0d414edba637b9113e5c3ad3c78c364736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102195760003560e01c806370a082311161011d578063c87b56dd116100b0578063ebe9eb9f1161007f578063f4e95c6b11610064578063f4e95c6b14610717578063fbb401041461072c578063ffa1ad741461074c57600080fd5b8063ebe9eb9f146106bd578063f23a6e61146106d257600080fd5b8063c87b56dd1461060f578063d7eb3f3a1461062f578063e1fc334f14610654578063e985e9c51461067457600080fd5b8063a1ee0544116100ec578063a1ee054414610557578063a22cb46514610571578063b88d4fde14610591578063bc197c81146105b157600080fd5b806370a08231146104ec57806375794a3c1461050c57806395d89b41146105225780639ded06df1461053757600080fd5b80632e04b8e7116101b05780635a33d8dc1161017f5780636352211e116101645780636352211e1461049957806368ae2546146104b95780636f7e674d146104d957600080fd5b80635a33d8dc1461044f5780635dcb49c51461046f57600080fd5b80632e04b8e71461039957806342842e0e146103dd57806344085365146103fd57806354682d721461041d57600080fd5b8063095ea7b3116101ec578063095ea7b3146102cf57806323b872dd146102ef578063287987231461030f5780632a55205a1461035a57600080fd5b806301ffc9a71461021e57806306fdde0314610253578063081812fc1461027557806308fd8493146102ad575b600080fd5b34801561022a57600080fd5b5061023e6102393660046126a2565b610795565b60405190151581526020015b60405180910390f35b34801561025f57600080fd5b506102686107d9565b60405161024a919061270f565b34801561028157600080fd5b50610295610290366004612722565b61086b565b6040516001600160a01b03909116815260200161024a565b3480156102b957600080fd5b506102cd6102c8366004612722565b610892565b005b3480156102db57600080fd5b506102cd6102ea366004612750565b610ae6565b3480156102fb57600080fd5b506102cd61030a36600461277c565b610c3a565b34801561031b57600080fd5b50600d546103399060ff81169061010090046001600160a01b031682565b6040805160ff90931683526001600160a01b0390911660208301520161024a565b34801561036657600080fd5b5061037a6103753660046127bd565b610cb1565b604080516001600160a01b03909316835260208301919091520161024a565b3480156103a557600080fd5b506103cf6103b43660046127df565b6001600160a01b03166000908152600f602052604090205490565b60405190815260200161024a565b3480156103e957600080fd5b506102cd6103f836600461277c565b610d6e565b34801561040957600080fd5b506102cd610418366004612841565b610d89565b34801561042957600080fd5b5061043d610438366004612722565b610e19565b60405161024a9695949392919061291a565b34801561045b57600080fd5b50600954610295906001600160a01b031681565b34801561047b57600080fd5b50600c546103399060ff81169061010090046001600160a01b031682565b3480156104a557600080fd5b506102956104b4366004612722565b6110ff565b3480156104c557600080fd5b506103cf6104d4366004612841565b611164565b6102cd6104e736600461298f565b611303565b3480156104f857600080fd5b506103cf6105073660046127df565b61139d565b34801561051857600080fd5b506103cf600b5481565b34801561052e57600080fd5b50610268611437565b34801561054357600080fd5b506102cd610552366004612a32565b611446565b34801561056357600080fd5b5060085461023e9060ff1681565b34801561057d57600080fd5b506102cd61058c366004612aa4565b611500565b34801561059d57600080fd5b506102cd6105ac366004612ba7565b61150f565b3480156105bd57600080fd5b506105f66105cc366004612c93565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040516001600160e01b0319909116815260200161024a565b34801561061b57600080fd5b5061026861062a366004612722565b611587565b34801561063b57600080fd5b506008546102959061010090046001600160a01b031681565b34801561066057600080fd5b50600a54610295906001600160a01b031681565b34801561068057600080fd5b5061023e61068f366004612d41565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156106c957600080fd5b50610268611662565b3480156106de57600080fd5b506105f66106ed366004612d6f565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b34801561072357600080fd5b506102686116e1565b34801561073857600080fd5b506102cd610747366004612841565b61171a565b34801561075857600080fd5b506102686040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b60006001600160e01b031982167f81942f3d0000000000000000000000000000000000000000000000000000000014806107d357506107d382611813565b92915050565b6060600280546107e890612dd8565b80601f016020809104026020016040519081016040528092919081815260200182805461081490612dd8565b80156108615780601f1061083657610100808354040283529160200191610861565b820191906000526020600020905b81548152906001019060200180831161084457829003601f168201915b5050505050905090565b600061087682611851565b506000908152600660205260409020546001600160a01b031690565b6000818152600460205260409020546001600160a01b031633146108e2576040517f1002a8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600e602090815260408083206001018054825181850281018501909352808352919290919083018282801561093b57602002820191906000526020600020905b815481526020019060010190808311610927575b5050506000858152600e6020526040812081905592935061095a915050565b604051908082528060200260200182016040528015610983578160200160208202803683370190505b50600e600084815260200190815260200160002060010190805190602001906109ad9291906125f1565b506000815167ffffffffffffffff8111156109ca576109ca612ae2565b6040519080825280602002602001820160405280156109f3578160200160208202803683370190505b50905060005b8151811015610a29576001828281518110610a1657610a16612e12565b60209081029190910101526001016109f9565b50610a33836118b8565b600a546040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632eb2c2d690610a82903090339087908790600401612e28565b600060405180830381600087803b158015610a9c57600080fd5b505af1158015610ab0573d6000803e3d6000fd5b50506040513392508591507f3a68f3980ec5280d87be81c5fa8cd81617be9bbf157acbe71d9321dca391e6a890600090a3505050565b6000610af1826110ff565b9050806001600160a01b0316836001600160a01b031603610b7f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610bb957506001600160a01b038116600090815260076020908152604080832033845290915290205460ff165b610c2b5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610b76565b610c35838361195b565b505050565b610c4433826119c9565b610ca65760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b76565b610c35838383611a48565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046bffffffffffffffffffffffff16928201929092528291610d305750604080518082019091526000546001600160a01b0381168252600160a01b90046bffffffffffffffffffffffff1660208201525b602081015160009061271090610d54906bffffffffffffffffffffffff1687612e99565b610d5e9190612eb0565b91519350909150505b9250929050565b610c358383836040518060200160405280600081525061150f565b600a546040517f63a533de0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906363a533de90610dd690339087908790600401612f1d565b600060405180830381600087803b158015610df057600080fd5b505af1158015610e04573d6000803e3d6000fd5b50505050610e13838383611164565b50505050565b60608060608060606000610e2c87611851565b6000878152600e6020908152604091829020600101805483518184028101840190945280845292918390830182828015610e8557602002820191906000526020600020905b815481526020019060010190808311610e71575b505050505096508067ffffffffffffffff811115610ea557610ea5612ae2565b604051908082528060200260200182016040528015610ed857816020015b6060815260200190600190039081610ec35790505b5095508067ffffffffffffffff811115610ef457610ef4612ae2565b604051908082528060200260200182016040528015610f2757816020015b6060815260200190600190039081610f125790505b5094508067ffffffffffffffff811115610f4357610f43612ae2565b604051908082528060200260200182016040528015610f7657816020015b6060815260200190600190039081610f615790505b5093508067ffffffffffffffff811115610f9257610f92612ae2565b604051908082528060200260200182016040528015610fc557816020015b6060815260200190600190039081610fb05790505b50925060005b818110156110e257600a5488516001600160a01b039091169063f3457fdf908a9084908110610ffc57610ffc612e12565b60200260200101516040518263ffffffff1660e01b815260040161102291815260200190565b600060405180830381865afa15801561103f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110679190810190612f8e565b8a858151811061107957611079612e12565b602002602001018a868151811061109257611092612e12565b602002602001018a87815181106110ab576110ab612e12565b602002602001018a88815181106110c4576110c4612e12565b60209081029190910101939093529290915291905252600101610fcb565b5050506000958652600e6020526040909520549395929491939092565b6000818152600460205260408120546001600160a01b0316806107d35760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b76565b336000818152600f60209081526040808320549051929384936111bb93309391889101606094851b6bffffffffffffffffffffffff1990811682529390941b90921660148401526028830152604882015260680190565b60408051601f198184030181529190528051602090910120600b805491925060006111e58361302f565b909155506000818152600e6020526040902082815590925061120b90600101868661263c565b50336000908152600f602052604081208054916112278361302f565b9091555050600a546040517f37b2383f0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906337b2383f9061127990339089908990600401612f1d565b600060405180830381600087803b15801561129357600080fd5b505af11580156112a7573d6000803e3d6000fd5b505050506112b53383611c4e565b336001600160a01b0316827f61e13485a36a1bab49bdef2c6884595827c2f5caf9160aff3047f78fae8d01e98787856040516112f393929190613048565b60405180910390a3509392505050565b600a546040517f5bf1af440000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690635bf1af449034906113569033908c908c908c908c9060040161306c565b6000604051808303818588803b15801561136f57600080fd5b505af1158015611383573d6000803e3d6000fd5b5050505050611393838383611164565b5050505050505050565b60006001600160a01b03821661141b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610b76565b506001600160a01b031660009081526005602052604090205490565b6060600380546107e890612dd8565b6009546001600160a01b0316331461148a576040517f2cd55c7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a546001600160a01b0316156114cd576040517f7735869100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006114db828401846127df565b600a80546001600160a01b0319166001600160a01b0392909216919091179055505050565b61150b338383611c68565b5050565b61151933836119c9565b61157b5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b76565b610e1384848484611d36565b60606000600960009054906101000a90046001600160a01b03166001600160a01b0316636c0360eb6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156115de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261160691908101906130ae565b90508051600003611626576040518060200160405280600081525061165b565b8061163030611db4565b61163985611dca565b60405160200161164b939291906130e3565b6040516020818303038152906040525b9392505050565b600d5460405163181957f960e21b815260ff8216600482015260609161010090046001600160a01b0316906360655fe4906024015b600060405180830381865afa1580156116b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116dc91908101906130ae565b905090565b600c5460405163181957f960e21b815260ff8216600482015260609161010090046001600160a01b0316906360655fe490602401611697565b60085460ff1615611757576040517f4f05cdd500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60085461010090046001600160a01b0316331480159061178257506009546001600160a01b03163314155b156117b9576040517f3ec0dfc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008805460ff19166001179055600a546040517f3f2a0f260000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633f2a0f2690610dd690339087908790600401612f1d565b60006001600160e01b031982167f4e2312e00000000000000000000000000000000000000000000000000000000014806107d357506107d382611e6a565b6000818152600460205260409020546001600160a01b03166118b55760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b76565b50565b60006118c3826110ff565b90506118d3816000846001611edc565b6118dc826110ff565b600083815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526005845282852080546000190190558785526004909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611990826110ff565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806119d5836110ff565b9050806001600160a01b0316846001600160a01b03161480611a1c57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b80611a405750836001600160a01b0316611a358461086b565b6001600160a01b0316145b949350505050565b826001600160a01b0316611a5b826110ff565b6001600160a01b031614611abf5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b76565b6001600160a01b038216611b3a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b76565b611b478383836001611edc565b826001600160a01b0316611b5a826110ff565b6001600160a01b031614611bbe5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b76565b600081815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260058552838620805460001901905590871680865283862080546001019055868652600490945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61150b828260405180602001604052806000815250611f64565b816001600160a01b0316836001600160a01b031603611cc95760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b76565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611d41848484611a48565b611d4d84848484611fe2565b610e135760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b76565b60606107d36001600160a01b038316601461212e565b60606000611dd78361230f565b600101905060008167ffffffffffffffff811115611df757611df7612ae2565b6040519080825280601f01601f191660200182016040528015611e21576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611e2b57509392505050565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480611ecd57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806107d357506107d3826123f1565b6001811115610e13576001600160a01b03841615611f22576001600160a01b03841660009081526005602052604081208054839290611f1c90849061314f565b90915550505b6001600160a01b03831615610e13576001600160a01b03831660009081526005602052604081208054839290611f59908490613162565b909155505050505050565b611f6e8383612458565b611f7b6000848484611fe2565b610c355760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b76565b60006001600160a01b0384163b1561212357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612026903390899088908890600401613175565b6020604051808303816000875af1925050508015612061575060408051601f3d908101601f1916820190925261205e918101906131b1565b60015b612109573d80801561208f576040519150601f19603f3d011682016040523d82523d6000602084013e612094565b606091505b5080516000036121015760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b76565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a40565b506001949350505050565b6060600061213d836002612e99565b612148906002613162565b67ffffffffffffffff81111561216057612160612ae2565b6040519080825280601f01601f19166020018201604052801561218a576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106121c1576121c1612e12565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061220c5761220c612e12565b60200101906001600160f81b031916908160001a9053506000612230846002612e99565b61223b906001613162565b90505b60018111156122c0577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061227c5761227c612e12565b1a60f81b82828151811061229257612292612e12565b60200101906001600160f81b031916908160001a90535060049490941c936122b9816131ce565b905061223e565b50831561165b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b76565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612358577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612384576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106123a257662386f26fc10000830492506010015b6305f5e10083106123ba576305f5e100830492506008015b61271083106123ce57612710830492506004015b606483106123e0576064830492506002015b600a83106107d35760010192915050565b60006001600160e01b031982167f2a55205a0000000000000000000000000000000000000000000000000000000014806107d357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146107d3565b6001600160a01b0382166124ae5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b76565b6000818152600460205260409020546001600160a01b0316156125135760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b76565b612521600083836001611edc565b6000818152600460205260409020546001600160a01b0316156125865760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b76565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805482825590600052602060002090810192821561262c579160200282015b8281111561262c578251825591602001919060010190612611565b50612638929150612677565b5090565b82805482825590600052602060002090810192821561262c579160200282015b8281111561262c57823582559160200191906001019061265c565b5b808211156126385760008155600101612678565b6001600160e01b0319811681146118b557600080fd5b6000602082840312156126b457600080fd5b813561165b8161268c565b60005b838110156126da5781810151838201526020016126c2565b50506000910152565b600081518084526126fb8160208601602086016126bf565b601f01601f19169290920160200192915050565b60208152600061165b60208301846126e3565b60006020828403121561273457600080fd5b5035919050565b6001600160a01b03811681146118b557600080fd5b6000806040838503121561276357600080fd5b823561276e8161273b565b946020939093013593505050565b60008060006060848603121561279157600080fd5b833561279c8161273b565b925060208401356127ac8161273b565b929592945050506040919091013590565b600080604083850312156127d057600080fd5b50508035926020909101359150565b6000602082840312156127f157600080fd5b813561165b8161273b565b60008083601f84011261280e57600080fd5b50813567ffffffffffffffff81111561282657600080fd5b6020830191508360208260051b8501011115610d6757600080fd5b60008060006040848603121561285657600080fd5b833567ffffffffffffffff81111561286d57600080fd5b612879868287016127fc565b909790965060209590950135949350505050565b600081518084526020808501945080840160005b838110156128bd578151875295820195908201906001016128a1565b509495945050505050565b6000815180845260208085019450848260051b860182860160005b8581101561290d5783830389526128fb8383516126e3565b988501989250908401906001016128e3565b5090979650505050505050565b60c08152600061292d60c083018961288d565b828103602084015261293f81896128c8565b9050828103604084015261295381886128c8565b9050828103606084015261296781876128c8565b9050828103608084015261297b81866128c8565b9150508260a0830152979650505050505050565b60008060008060008060006080888a0312156129aa57600080fd5b873567ffffffffffffffff808211156129c257600080fd5b6129ce8b838c016127fc565b909950975060208a01359150808211156129e757600080fd5b6129f38b838c016127fc565b909750955060408a0135915080821115612a0c57600080fd5b50612a198a828b016127fc565b989b979a50959894979596606090950135949350505050565b60008060208385031215612a4557600080fd5b823567ffffffffffffffff80821115612a5d57600080fd5b818501915085601f830112612a7157600080fd5b813581811115612a8057600080fd5b866020828501011115612a9257600080fd5b60209290920196919550909350505050565b60008060408385031215612ab757600080fd5b8235612ac28161273b565b915060208301358015158114612ad757600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612b2157612b21612ae2565b604052919050565b600067ffffffffffffffff821115612b4357612b43612ae2565b50601f01601f191660200190565b600082601f830112612b6257600080fd5b8135612b75612b7082612b29565b612af8565b818152846020838601011115612b8a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612bbd57600080fd5b8435612bc88161273b565b93506020850135612bd88161273b565b925060408501359150606085013567ffffffffffffffff811115612bfb57600080fd5b612c0787828801612b51565b91505092959194509250565b600082601f830112612c2457600080fd5b8135602067ffffffffffffffff821115612c4057612c40612ae2565b8160051b612c4f828201612af8565b9283528481018201928281019087851115612c6957600080fd5b83870192505b84831015612c8857823582529183019190830190612c6f565b979650505050505050565b600080600080600060a08688031215612cab57600080fd5b8535612cb68161273b565b94506020860135612cc68161273b565b9350604086013567ffffffffffffffff80821115612ce357600080fd5b612cef89838a01612c13565b94506060880135915080821115612d0557600080fd5b612d1189838a01612c13565b93506080880135915080821115612d2757600080fd5b50612d3488828901612b51565b9150509295509295909350565b60008060408385031215612d5457600080fd5b8235612d5f8161273b565b91506020830135612ad78161273b565b600080600080600060a08688031215612d8757600080fd5b8535612d928161273b565b94506020860135612da28161273b565b93506040860135925060608601359150608086013567ffffffffffffffff811115612dcc57600080fd5b612d3488828901612b51565b600181811c90821680612dec57607f821691505b602082108103612e0c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808716835280861660208401525060a06040830152612e5460a083018561288d565b8281036060840152612e66818561288d565b838103608090940193909352505060008152602001949350505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176107d3576107d3612e83565b600082612ecd57634e487b7160e01b600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612f0457600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b0384168152604060208201526000612f40604083018486612ed2565b95945050505050565b600082601f830112612f5a57600080fd5b8151612f68612b7082612b29565b818152846020838601011115612f7d57600080fd5b611a408260208301602087016126bf565b60008060008060808587031215612fa457600080fd5b845167ffffffffffffffff80821115612fbc57600080fd5b612fc888838901612f49565b95506020870151915080821115612fde57600080fd5b612fea88838901612f49565b9450604087015191508082111561300057600080fd5b61300c88838901612f49565b9350606087015191508082111561302257600080fd5b50612c0787828801612f49565b60006001820161304157613041612e83565b5060010190565b60408152600061305c604083018587612ed2565b9050826020830152949350505050565b6001600160a01b038616815260606020820152600061308f606083018688612ed2565b82810360408401526130a2818587612ed2565b98975050505050505050565b6000602082840312156130c057600080fd5b815167ffffffffffffffff8111156130d757600080fd5b611a4084828501612f49565b600084516130f58184602089016126bf565b8451908301906131098183602089016126bf565b7f2f00000000000000000000000000000000000000000000000000000000000000910190815283516131428160018401602088016126bf565b0160010195945050505050565b818103818111156107d3576107d3612e83565b808201808211156107d3576107d3612e83565b60006001600160a01b038087168352808616602084015250836040830152608060608301526131a760808301846126e3565b9695505050505050565b6000602082840312156131c357600080fd5b815161165b8161268c565b6000816131dd576131dd612e83565b50600019019056fea2646970667358221220a97189a0354b1b923a5e85c0033978dae2be56a8c0a02b1c8f8dd3be85ad800e64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "artwork(uint256)": {
        "params": {
          "_artworkTokenId": "token ID of the artwork"
        },
        "returns": {
          "_hash": "the artwork hash",
          "_traitNames": "the human readable trait names contained in the artwork",
          "_traitTokenIds": "the token IDs of the traits the artwork contains",
          "_traitTypeNames": "the human readable trait type names",
          "_traitTypeValues": "the trait type values used by the generative script",
          "_traitValues": "the trait values used by the generative script"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "metadataJSON()": {
        "returns": {
          "_0": "string the project metadata in JSON format"
        }
      },
      "mintArtwork(uint256[],uint256)": {
        "params": {
          "_saltNonce": "salt number that is used to generate the artwork hash",
          "_traitTokenIds": "the trait token IDs to create the artwork with"
        },
        "returns": {
          "_artworkTokenId": "the token ID of the newly minted artwork"
        }
      },
      "mintArtworkProof(uint256[],uint256)": {
        "params": {
          "_saltNonce": "salt number that is used to generate the artwork hash",
          "_traitTokenIds": "token IDs of the traits to use to create the artwork"
        }
      },
      "mintArtworkWhitelist(uint256[],uint256)": {
        "params": {
          "_saltNonce": "salt number that is used to generate the artwork hash",
          "_traitTokenIds": "token IDs of the traits to use to create the artwork"
        }
      },
      "mintTraitsAndArtwork(uint256[],uint256[],uint256[],uint256)": {
        "params": {
          "_saltNonce": "salt number that is used to generate the artwork hash",
          "_traitAmountsToBuy": "amounts of each trait to buy",
          "_traitTokenIdsToBuy": "token IDs of the traits to buy",
          "_traitTokenIdsToCreateArtwork": "token IDs of the traits to use to create the artwork"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "reclaimTraits(uint256)": {
        "params": {
          "_artworkTokenId": "the token ID of the artwork being reclaimed"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "script()": {
        "returns": {
          "_0": "string the generative art javascript"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setup(bytes)": {
        "params": {
          "_data": "bytes containing address of the traits contract"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "the interface ID to check"
        },
        "returns": {
          "_0": "bool True if the interface is supported, otherwise False"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "_tokenId": "token ID to get URI for"
        },
        "returns": {
          "_0": "string the token URI"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "userNonce(address)": {
        "params": {
          "_user": "the address of the user"
        },
        "returns": {
          "_0": "uint256 the user's nonce"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "artwork(uint256)": {
        "notice": "Returns info about the specified artwork token"
      },
      "metadataJSON()": {
        "notice": "Returns a string containing the project metadata in JSON format"
      },
      "mintArtwork(uint256[],uint256)": {
        "notice": "Mints a new artwork with the specified trait token IDs The caller must own the specified traits"
      },
      "mintArtworkProof(uint256[],uint256)": {
        "notice": "Allows the artist or project registry to mint the proof mint"
      },
      "mintArtworkWhitelist(uint256[],uint256)": {
        "notice": "Allows an address on the whitelist to mint an artwork for free"
      },
      "mintTraitsAndArtwork(uint256[],uint256[],uint256[],uint256)": {
        "notice": "Mints traits with specified amounts, and mints an artwork in a single transaction ETH amount needed for trait mints must be sent"
      },
      "reclaimTraits(uint256)": {
        "notice": "Reclaims the traits the specified artwork token into the traits its composed of The artwork token is burned, and the token ID will never be reused The traits are transferred to the caller's address"
      },
      "script()": {
        "notice": "Returns the string that contains the generative art javascript"
      },
      "setup(bytes)": {
        "notice": "Sets up the contract"
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns whether the specified interface ID is supported by the contract"
      },
      "tokenURI(uint256)": {
        "notice": "Returns the URI of the specified token ID"
      },
      "userNonce(address)": {
        "notice": "Returns the specified user's nonce, which is used to generate artwork hashes"
      }
    },
    "notice": "Implements ERC-721 standard for artwork tokens, and functionality for minting artwork and reclaiming traits",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3848,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)3845_storage"
      },
      {
        "astId": 3853,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)3845_storage)"
      },
      {
        "astId": 2751,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2753,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2757,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2761,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2765,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2771,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5500,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "proofMinted",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 5505,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "artistAddress",
        "offset": 1,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5508,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "projectRegistry",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IProjectRegistry)8140"
      },
      {
        "astId": 5511,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "traits",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ITraits)8410"
      },
      {
        "astId": 5513,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5516,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "metadataJSONStringStorage",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(StringStorageData)7906_storage"
      },
      {
        "astId": 5519,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "scriptStringStorage",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(StringStorageData)7906_storage"
      },
      {
        "astId": 5524,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "artworkData",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(ArtworkData)7901_storage)"
      },
      {
        "astId": 5528,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "userNonces",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IProjectRegistry)8140": {
        "encoding": "inplace",
        "label": "contract IProjectRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ITraits)8410": {
        "encoding": "inplace",
        "label": "contract ITraits",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ArtworkData)7901_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IArtwork.ArtworkData)",
        "numberOfBytes": "32",
        "value": "t_struct(ArtworkData)7901_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)3845_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)3845_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ArtworkData)7901_storage": {
        "encoding": "inplace",
        "label": "struct IArtwork.ArtworkData",
        "members": [
          {
            "astId": 7897,
            "contract": "contracts/Artwork.sol:Artwork",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 7900,
            "contract": "contracts/Artwork.sol:Artwork",
            "label": "traitTokenIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltyInfo)3845_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 3842,
            "contract": "contracts/Artwork.sol:Artwork",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3844,
            "contract": "contracts/Artwork.sol:Artwork",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StringStorageData)7906_storage": {
        "encoding": "inplace",
        "label": "struct IArtwork.StringStorageData",
        "members": [
          {
            "astId": 7903,
            "contract": "contracts/Artwork.sol:Artwork",
            "label": "stringStorageSlot",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7905,
            "contract": "contracts/Artwork.sol:Artwork",
            "label": "stringStorageAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}