{
  "address": "0xBE49B0fbC7f2f43a0BFf3d8E5DE968162E655705",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_projectRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_primarySalesReceiver",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string[]",
              "name": "traitTypeNames",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "traitTypeValues",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "traitNames",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "traitValues",
              "type": "string[]"
            },
            {
              "internalType": "uint256[]",
              "name": "traitTypeIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "traitMaxSupplys",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ITraits.TraitsSetup",
          "name": "_traitsSetup",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadySetup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionIsLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionNotLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Cancelled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEthAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTraits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyArtwork",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProjectRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TraitsSaleStartTime",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionStartPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionEndPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionPriceSteps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "auctionExponential",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "traitsSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artwork",
      "outputs": [
        {
          "internalType": "contract IArtwork",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionExponential",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionPriceSteps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintTraits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "mintTraitsWhitelistOrProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primarySalesReceiver",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectRegistry",
      "outputs": [
        {
          "internalType": "contract IProjectRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "trait",
      "outputs": [
        {
          "internalType": "string",
          "name": "_traitName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitValue",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitTypeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitTypeValue",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitPriceStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitTypes",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTotalSupplys",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitMaxSupplys",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitsSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "transferTraitsToMintArtwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStartPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionPriceSteps",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_auctionExponential",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_traitsSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "updateAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a9db756863544024bdd4bb0a5cdf5f301bdd2c7a13e63be77ac120a04800f46",
  "receipt": {
    "to": null,
    "from": "0x6bd62FeB486Bf699Ac04eD6DC09dE36D11720509",
    "contractAddress": "0xBE49B0fbC7f2f43a0BFf3d8E5DE968162E655705",
    "transactionIndex": 2,
    "gasUsed": "7908733",
    "logsBloom": "0x
    "blockHash": "0x8fa1163f2ce89ce76452602a8f007d9b0215a5e3cb3f7f50c1d40a894aa53a9f",
    "transactionHash": "0x6a9db756863544024bdd4bb0a5cdf5f301bdd2c7a13e63be77ac120a04800f46",
    "logs": [],
    "blockNumber": 8408807,
    "cumulativeGasUsed": "7974108",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa875715340f399D7c58D849878D08A7E56d0Daf0",
    "0x6bd62FeB486Bf699Ac04eD6DC09dE36D11720509",
    {
      "traitTypeNames": [
        "Background Hue",
        "Background Tone",
        "Ring Hue",
        "Ring Tone",
        "Ring Opacity"
      ],
      "traitTypeValues": [
        "bH",
        "bT",
        "pH",
        "pT",
        "p0"
      ],
      "traitNames": [
        "Red",
        "Orange",
        "Yellow",
        "Chartreuse",
        "Green",
        "Turquoise",
        "Cyan",
        "Cobalt",
        "Blue",
        "Violet",
        "Magenta",
        "Fuchsia",
        "Lighter",
        "Light",
        "Bright",
        "Brighter",
        "Dark",
        "Darker",
        "White",
        "Black",
        "Red",
        "Orange",
        "Yellow",
        "Chartreuse",
        "Green",
        "Turquoise",
        "Cyan",
        "Cobalt",
        "Blue",
        "Violet",
        "Magenta",
        "Fuchsia",
        "Lighter",
        "Light",
        "Bright",
        "Brighter",
        "Dark",
        "Darker",
        "White",
        "Black",
        "Transparent",
        "Semi-transparent",
        "Mid",
        "Semi-opaque",
        "Opaque"
      ],
      "traitValues": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "0",
        "1",
        "2",
        "3",
        "4"
      ],
      "traitTypeIndexes": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        4
      ],
      "traitMaxSupplys": [
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "150",
        "100",
        "100",
        "100",
        "100",
        "150",
        "250",
        "250",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "100",
        "200",
        "300",
        "100",
        "100",
        "50",
        "50",
        "200",
        "200",
        "200",
        "200",
        "200"
      ]
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "cd7f943c3c194f50777349fc422fa319",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_projectRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primarySalesReceiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string[]\",\"name\":\"traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"traitTypeValues\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"traitMaxSupplys\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ITraits.TraitsSetup\",\"name\":\"_traitsSetup\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionIsLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Cancelled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEthAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTraits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyArtwork\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProjectRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TraitsSaleStartTime\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionStartPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionPriceSteps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"auctionExponential\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"traitsSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"AuctionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artwork\",\"outputs\":[{\"internalType\":\"contract IArtwork\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionExponential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionPriceSteps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mintTraits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"mintTraitsWhitelistOrProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primarySalesReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectRegistry\",\"outputs\":[{\"internalType\":\"contract IProjectRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"trait\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_traitName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitValue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitTypeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitTypeValue\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPriceStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitTypes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTotalSupplys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitMaxSupplys\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitsSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferTraitsToMintArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionPriceSteps\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_auctionExponential\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_traitsSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"updateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"maxSupply(uint256)\":{\"returns\":{\"_maxSupply\":\"the max supply of the token\"}},\"mintTraits(address,uint256[],uint256[])\":{\"params\":{\"_recipient\":\"the address to receive the trait tokens\",\"_traitAmounts\":\"the amounts of each token ID to buy\",\"_traitTokenIds\":\"the trait token IDs to buy\"}},\"mintTraitsWhitelistOrProof(address,uint256[])\":{\"params\":{\"_recipient\":\"address to receive the minted traits\",\"_traitTokenIds\":\"trait token IDs to mint\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setup(bytes)\":{\"params\":{\"_data\":\"bytes containing setup data for initializing contract\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"the interface ID to check\"},\"returns\":{\"_0\":\"bool True if the interface is supported, otherwise False\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"trait(uint256)\":{\"params\":{\"_tokenId\":\"token ID to get info about\"},\"returns\":{\"_traitName\":\"human readable trait name\",\"_traitTypeName\":\"human readable trait type name\",\"_traitTypeValue\":\"trait type value used in the generative script\",\"_traitValue\":\"trait type value used in the generative script\"}},\"traitPrice()\":{\"returns\":{\"_0\":\"the current trait price in ether\"}},\"traitPriceStep()\":{\"returns\":{\"_0\":\"the current price step\"}},\"traitTypes()\":{\"returns\":{\"_traitTypeNames\":\"human readable trait type names\",\"_traitTypeValues\":\"trait type values used in the generative script\"}},\"traits()\":{\"returns\":{\"_traitMaxSupplys\":\"max supply of each trait\",\"_traitNames\":\"human readable trait names\",\"_traitTokenIds\":\"token IDs of the traits\",\"_traitTotalSupplys\":\"total supply of each trait\",\"_traitTypeIndexes\":\"trait type index each trait belongs to\",\"_traitTypeNames\":\"human readable trait type names\",\"_traitTypeValues\":\"trait type values used in the generative script\",\"_traitValues\":\"trait type values used in the generative script\"}},\"transferTraitsToMintArtwork(address,uint256[])\":{\"params\":{\"_caller\":\"the address creating the artwork\",\"_traitTokenIds\":\"the trait token IDs used to create the artwork\"}},\"updateAuction(uint256,uint256,uint256,uint256,uint256,bool,uint256)\":{\"params\":{\"_auctionEndPrice\":\"trait price the auction ends at\",\"_auctionEndTime\":\"timestamp the auction ends at\",\"_auctionExponential\":\"true indicates auction curve is exponential, otherwise linear\",\"_auctionPriceSteps\":\"number of different prices auction steps through\",\"_auctionStartPrice\":\"trait price the auction begins at\",\"_auctionStartTime\":\"timestamp the auction begins at\",\"_traitsSaleStartTime\":\"timestamp at which traits can be bought individually\"}},\"uri(uint256)\":{\"params\":{\"_tokenId\":\"the token ID to get the URI for\"},\"returns\":{\"_0\":\"string the token specific URI\"}}},\"stateVariables\":{\"auctionStartTime\":{\"return\":\"uint256 the timestamp the auction starts\",\"returns\":{\"_0\":\"uint256 the timestamp the auction starts\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auctionStartTime()\":{\"notice\":\"Returns the auction start timestamp\"},\"cancel()\":{\"notice\":\"Cancels a project and its auction Contracts should revert if this is called and the auction has already started.\"},\"maxSupply(uint256)\":{\"notice\":\"Returns the max supply of the specified token ID\"},\"mintTraits(address,uint256[],uint256[])\":{\"notice\":\"Allows a user to mint any number of traits and amounts using ether\"},\"mintTraitsWhitelistOrProof(address,uint256[])\":{\"notice\":\"Mints traits for artist proof and for whitelisted mints\"},\"setup(bytes)\":{\"notice\":\"Sets up the contract\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether the specified interface ID is supported by the contract\"},\"trait(uint256)\":{\"notice\":\"Returns info about an individual trait\"},\"traitPrice()\":{\"notice\":\"Returns the current trait price\"},\"traitPriceStep()\":{\"notice\":\"Returns which price step the auction is currently on\"},\"traitTypes()\":{\"notice\":\"Returns the trait types\"},\"traits()\":{\"notice\":\"Returns info about all traits\"},\"transferTraitsToMintArtwork(address,uint256[])\":{\"notice\":\"Called by the Artwork contract to transfer traits from the caller to the Artwork contract to create a new Artwork token\"},\"updateAuction(uint256,uint256,uint256,uint256,uint256,bool,uint256)\":{\"notice\":\"Updates the schedule of the dutch auction, can only be called if the dutch auction hasn't started yet, and can only update the auction to a later time, not sooner\"},\"uri(uint256)\":{\"notice\":\"Returns the URI of the specified token ID\"}},\"notice\":\"Implements ERC-1155 standard for trait tokens, and provides Dutch Auction functionality for initial trait sales\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Traits.sol\":\"Traits\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {ITraits, IBaseSetup} from \\\"./interfaces/ITraits.sol\\\";\\nimport {IArtwork} from \\\"./interfaces/IArtwork.sol\\\";\\nimport {IProjectRegistry} from \\\"./interfaces/IProjectRegistry.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {ERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {ERC1155Supply} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\n\\n/**\\n * Implements ERC-1155 standard for trait tokens,\\n * and provides Dutch Auction functionality for initial trait sales\\n */\\ncontract Traits is ITraits, ERC2981, ERC1155, ERC1155Supply {\\n    using Strings for uint256;\\n    using Strings for address;\\n\\n    bool public auctionExponential;\\n    bool public cancelled;\\n    string public constant VERSION = \\\"1.0\\\";\\n    IArtwork public artwork;\\n    IProjectRegistry public projectRegistry;\\n    address payable public primarySalesReceiver;\\n    uint256 public auctionStartTime;\\n    uint256 public auctionEndTime;\\n    uint256 public auctionStartPrice;\\n    uint256 public auctionEndPrice;\\n    uint256 public auctionPriceSteps;\\n    uint256 public traitsSaleStartTime;\\n\\n    TraitType[] private _traitTypes;\\n    Trait[] private _traits;\\n\\n    modifier onlyArtwork() {\\n        if (msg.sender != address(artwork)) revert OnlyArtwork();\\n        _;\\n    }\\n\\n    modifier onlyProjectRegistry() {\\n        if (msg.sender != address(projectRegistry))\\n            revert OnlyProjectRegistry();\\n        _;\\n    }\\n\\n    modifier notCancelled() {\\n        if (cancelled) revert Cancelled();\\n        _;\\n    }\\n\\n    constructor(\\n        address _projectRegistry,\\n        address _primarySalesReceiver,\\n        TraitsSetup memory _traitsSetup\\n    ) ERC1155(\\\"\\\") {\\n        projectRegistry = IProjectRegistry(_projectRegistry);\\n        primarySalesReceiver = payable(_primarySalesReceiver);\\n\\n        _createTraitsAndTypes(\\n            _traitsSetup.traitTypeNames,\\n            _traitsSetup.traitTypeValues,\\n            _traitsSetup.traitNames,\\n            _traitsSetup.traitValues,\\n            _traitsSetup.traitTypeIndexes,\\n            _traitsSetup.traitMaxSupplys\\n        );\\n    }\\n\\n    /** @inheritdoc IBaseSetup*/\\n    function setup(bytes calldata _data) external onlyProjectRegistry {\\n        if (address(artwork) != address(0)) revert AlreadySetup();\\n\\n        (\\n            address _artwork,\\n            bool _auctionExponential,\\n            uint256 _auctionStartTime,\\n            uint256 _auctionEndTime,\\n            uint256 _auctionStartPrice,\\n            uint256 _auctionEndPrice,\\n            uint256 _auctionPriceSteps,\\n            uint256 _traitsSaleStartTime\\n        ) = abi.decode(\\n                _data,\\n                (\\n                    address,\\n                    bool,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    uint256\\n                )\\n            );\\n\\n        artwork = IArtwork(_artwork);\\n\\n        _updateAuction(\\n            _auctionStartTime,\\n            _auctionEndTime,\\n            _auctionStartPrice,\\n            _auctionEndPrice,\\n            _auctionPriceSteps,\\n            _auctionExponential,\\n            _traitsSaleStartTime\\n        );\\n    }\\n\\n    /** @inheritdoc IBaseSetup*/\\n    function cancel() external onlyProjectRegistry {\\n        if (block.timestamp >= auctionStartTime) revert AuctionIsLive();\\n\\n        cancelled = true;\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function updateAuction(\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionPriceSteps,\\n        bool _auctionExponential,\\n        uint256 _traitsSaleStartTime\\n    ) external onlyProjectRegistry {\\n        if (auctionStartTime <= block.timestamp) revert AuctionIsLive();\\n\\n        _updateAuction(\\n            _auctionStartTime,\\n            _auctionEndTime,\\n            _auctionStartPrice,\\n            _auctionEndPrice,\\n            _auctionPriceSteps,\\n            _auctionExponential,\\n            _traitsSaleStartTime\\n        );\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function mintTraits(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds,\\n        uint256[] calldata _traitAmounts\\n    ) external payable notCancelled {\\n        if (_traitTokenIds.length != _traitAmounts.length)\\n            revert InvalidArrayLengths();\\n        if (\\n            msg.sender != address(artwork) &&\\n            block.timestamp < traitsSaleStartTime\\n        ) revert TraitsSaleStartTime();\\n\\n        uint256 _traitCount;\\n\\n        for (uint256 i; i < _traitAmounts.length; ) {\\n            _traitCount += _traitAmounts[i];\\n            if (\\n                totalSupply(_traitTokenIds[i]) + _traitAmounts[i] >\\n                _traits[_traitTokenIds[i]].maxSupply\\n            ) revert MaxSupply();\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (msg.value < _traitCount * traitPrice()) revert InvalidEthAmount();\\n\\n        _mintBatch(_recipient, _traitTokenIds, _traitAmounts, \\\"\\\");\\n\\n        primarySalesReceiver.transfer(msg.value);\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function mintTraitsWhitelistOrProof(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds\\n    ) external onlyArtwork notCancelled {\\n        if (_traitTokenIds.length != _traitTypes.length)\\n            revert InvalidArrayLengths();\\n\\n        uint256[] memory traitAmounts = new uint256[](_traitTokenIds.length);\\n\\n        for (uint256 i; i < _traitTokenIds.length; ) {\\n            if (_traits[_traitTokenIds[i]].typeIndex != i)\\n                revert InvalidTraits();\\n            if (\\n                totalSupply(_traitTokenIds[i]) + 1 >\\n                _traits[_traitTokenIds[i]].maxSupply\\n            ) revert MaxSupply();\\n            traitAmounts[i] = 1;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _mintBatch(_recipient, _traitTokenIds, traitAmounts, \\\"\\\");\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function transferTraitsToMintArtwork(\\n        address _caller,\\n        uint256[] calldata _traitTokenIds\\n    ) external onlyArtwork notCancelled {\\n        if (_traitTokenIds.length != _traitTypes.length)\\n            revert InvalidArrayLengths();\\n\\n        uint256[] memory amounts = new uint256[](_traitTokenIds.length);\\n\\n        for (uint256 i; i < _traitTokenIds.length; ) {\\n            if (_traits[_traitTokenIds[i]].typeIndex != i)\\n                revert InvalidTraits();\\n            amounts[i] = 1;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _safeBatchTransferFrom(\\n            _caller,\\n            address(artwork),\\n            _traitTokenIds,\\n            amounts,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function traitTypes()\\n        external\\n        view\\n        returns (\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues\\n        )\\n    {\\n        uint256 traitTypeCount = _traitTypes.length;\\n        _traitTypeNames = new string[](traitTypeCount);\\n        _traitTypeValues = new string[](traitTypeCount);\\n\\n        for (uint256 i; i < traitTypeCount; ) {\\n            _traitTypeNames[i] = _traitTypes[i].name;\\n            _traitTypeValues[i] = _traitTypes[i].value;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function trait(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory _traitName,\\n            string memory _traitValue,\\n            string memory _traitTypeName,\\n            string memory _traitTypeValue\\n        )\\n    {\\n        if (_tokenId >= _traits.length) revert InvalidTokenId();\\n\\n        _traitName = _traits[_tokenId].name;\\n        _traitValue = _traits[_tokenId].value;\\n        _traitTypeName = _traitTypes[_traits[_tokenId].typeIndex].name;\\n        _traitTypeValue = _traitTypes[_traits[_tokenId].typeIndex].value;\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function traits()\\n        external\\n        view\\n        returns (\\n            uint256[] memory _traitTokenIds,\\n            string[] memory _traitNames,\\n            string[] memory _traitValues,\\n            uint256[] memory _traitTypeIndexes,\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues,\\n            uint256[] memory _traitTotalSupplys,\\n            uint256[] memory _traitMaxSupplys\\n        )\\n    {\\n        uint256 traitCount = _traits.length;\\n        _traitTokenIds = new uint256[](traitCount);\\n        _traitNames = new string[](traitCount);\\n        _traitValues = new string[](traitCount);\\n        _traitTypeIndexes = new uint256[](traitCount);\\n        _traitTypeNames = new string[](traitCount);\\n        _traitTypeValues = new string[](traitCount);\\n        _traitTotalSupplys = new uint256[](traitCount);\\n        _traitMaxSupplys = new uint256[](traitCount);\\n        for (uint256 i; i < traitCount; ) {\\n            _traitTokenIds[i] = i;\\n            _traitNames[i] = _traits[i].name;\\n            _traitValues[i] = _traits[i].value;\\n            _traitTypeIndexes[i] = _traits[i].typeIndex;\\n            _traitTypeNames[i] = _traitTypes[_traits[i].typeIndex].name;\\n            _traitTypeValues[i] = _traitTypes[_traits[i].typeIndex].value;\\n            _traitTotalSupplys[i] = totalSupply(i);\\n            _traitMaxSupplys[i] = _traits[i].maxSupply;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function traitPriceStep() public view returns (uint256) {\\n        if (block.timestamp < auctionStartTime) revert AuctionNotLive();\\n        if (block.timestamp >= auctionEndTime) return auctionPriceSteps - 1;\\n\\n        return\\n            (auctionPriceSteps * (block.timestamp - auctionStartTime)) /\\n            (auctionEndTime - auctionStartTime);\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function traitPrice() public view returns (uint256) {\\n        // Auction is active\\n        if (auctionExponential) {\\n            // Exponential curve auction\\n            return\\n                (((auctionStartPrice - auctionEndPrice) *\\n                    (auctionPriceSteps - traitPriceStep() - 1) ** 2) /\\n                    (auctionPriceSteps - 1) ** 2) + auctionEndPrice;\\n        }\\n\\n        // Linear curve auction\\n        return\\n            auctionStartPrice -\\n            ((traitPriceStep() * (auctionStartPrice - auctionEndPrice)) /\\n                (auctionPriceSteps - 1));\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function maxSupply(\\n        uint256 _tokenId\\n    ) external view returns (uint256 _maxSupply) {\\n        _maxSupply = _traits[_tokenId].maxSupply;\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function uri(\\n        uint256 _tokenId\\n    ) public view override(ERC1155, ITraits) returns (string memory) {\\n        if (_tokenId >= _traits.length) revert InvalidTokenId();\\n\\n        string memory baseURI = projectRegistry.baseURI();\\n\\n        return\\n            bytes(baseURI).length != 0\\n                ? string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        address(this).toHexString(),\\n                        \\\"/\\\",\\n                        _tokenId.toString()\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    /** @inheritdoc ITraits*/\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ITraits, ERC1155, ERC2981) returns (bool) {\\n        return\\n            interfaceId == type(ITraits).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /** @inheritdoc ERC2981*/\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) public view override returns (address, uint256) {\\n        return artwork.royaltyInfo(tokenId, salePrice);\\n    }\\n\\n    /** @inheritdoc ERC1155*/\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155, ERC1155Supply) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * Sets up the traits and trait types\\n     *\\n     * @param _traitTypeNames human readable trait type names\\n     * @param _traitTypeValues trait type values used in the generative scripts\\n     * @param _traitNames human readable trait names\\n     * @param _traitValues trait values used in the generative scripts\\n     * @param _traitTypeIndexes trait type indexes each trait belongs to\\n     * @param _traitMaxSupplys maximum number of mints for each trait\\n     */\\n    function _createTraitsAndTypes(\\n        string[] memory _traitTypeNames,\\n        string[] memory _traitTypeValues,\\n        string[] memory _traitNames,\\n        string[] memory _traitValues,\\n        uint256[] memory _traitTypeIndexes,\\n        uint256[] memory _traitMaxSupplys\\n    ) private {\\n        if (\\n            _traitTypeNames.length == 0 ||\\n            _traitNames.length == 0 ||\\n            _traitTypeNames.length != _traitTypeValues.length ||\\n            _traitNames.length != _traitValues.length ||\\n            _traitNames.length != _traitTypeIndexes.length ||\\n            _traitNames.length != _traitMaxSupplys.length\\n        ) revert InvalidArrayLengths();\\n\\n        // Push trait types to array\\n        for (uint256 i; i < _traitTypeNames.length; ) {\\n            _traitTypes.push(\\n                TraitType({\\n                    name: _traitTypeNames[i],\\n                    value: _traitTypeValues[i]\\n                })\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Push traits to array\\n        for (uint256 i; i < _traitNames.length; ) {\\n            _traits.push(\\n                Trait({\\n                    name: _traitNames[i],\\n                    value: _traitValues[i],\\n                    typeIndex: _traitTypeIndexes[i],\\n                    maxSupply: _traitMaxSupplys[i]\\n                })\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Updates auction data\\n     *\\n     * @param _auctionStartTime timestamp the auction begins at\\n     * @param _auctionEndTime timestamp the auction ends at\\n     * @param _auctionStartPrice trait price the auction begins at\\n     * @param _auctionEndPrice trait price the auction ends at\\n     * @param _auctionPriceSteps number of different prices auction steps through\\n     * @param _auctionExponential true indicates auction curve is exponential, otherwise linear\\n     * @param _traitsSaleStartTime timestamp at which traits can be bought individually\\n\\n     */\\n    function _updateAuction(\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionPriceSteps,\\n        bool _auctionExponential,\\n        uint256 _traitsSaleStartTime\\n    ) private {\\n        if (\\n            _auctionEndTime < _auctionStartTime ||\\n            _auctionEndPrice > _auctionStartPrice ||\\n            _traitsSaleStartTime < _auctionStartTime ||\\n            _auctionStartTime < block.timestamp ||\\n            _auctionPriceSteps < 2\\n        ) revert InvalidAuction();\\n\\n        auctionStartTime = _auctionStartTime;\\n        auctionEndTime = _auctionEndTime;\\n        auctionStartPrice = _auctionStartPrice;\\n        auctionEndPrice = _auctionEndPrice;\\n        auctionPriceSteps = _auctionPriceSteps;\\n        auctionExponential = _auctionExponential;\\n        traitsSaleStartTime = _traitsSaleStartTime;\\n\\n        emit AuctionUpdated(\\n            _auctionStartTime,\\n            _auctionEndTime,\\n            _auctionStartPrice,\\n            _auctionEndPrice,\\n            _auctionPriceSteps,\\n            _auctionExponential,\\n            _traitsSaleStartTime\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7c408673f3fbb2f0262d3527cb983f54f2100393ae49e9976561f3886d42176d\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IArtwork.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {IBaseSetup} from \\\"./IBaseSetup.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\ninterface IArtwork is IBaseSetup, IERC2981, IERC721 {\\n    struct ArtworkData {\\n        bytes32 hash;\\n        uint256[] traitTokenIds;\\n    }\\n\\n    struct StringStorageData {\\n      uint8 stringStorageSlot;\\n      address stringStorageAddress;\\n    }\\n\\n    error OnlyProjectRegistry();\\n    error ProofAlreadyMinted();\\n    error TraitsAlreadySet();\\n    error TraitsNotSet();\\n    error OnlyArtist();\\n    error OnlyArtistOrProjectRegistry();\\n    error OnlyArtworkOwner();\\n    error AlreadySetup();\\n    error WhitelistStartTime();\\n    error NoWhitelistMints();\\n    error AuctionIsLive();\\n    error HashAlreadyUsed();\\n    error InvalidArrayLengths();\\n    error Cancelled();\\n\\n    event ArtworkMinted(\\n        uint256 indexed artworkTokenId,\\n        uint256[] traitTokenIds,\\n        bytes32 hash,\\n        address indexed creator\\n    );\\n    event TraitsReclaimed(\\n        uint256 indexed artworkTokenId,\\n        address indexed caller\\n    );\\n    event WhitelistUpdated(\\n        uint256 whitelistStartTime,\\n        address[] whitelistAddresses,\\n        uint256[] whitelistAmounts\\n    );\\n    event WhitelistArtworkMinted(uint256 indexed tokenId, address indexed caller);\\n    event ProofArtworkMinted(uint256 indexed tokenId, address indexed caller);\\n\\n    /**\\n     * Updates the whitelisted addresses and amounts they can claim\\n     *\\n     * @param _whitelistStartTime timestamp at which whitelisted users can start minting\\n     * @param _whitelistAddresses addresses to be whitelisted\\n     * @param _whitelistAmounts amount of whitelist mints for each address\\n     */\\n    function updateWhitelist(\\n        uint256 _whitelistStartTime,\\n        address[] memory _whitelistAddresses,\\n        uint256[] memory _whitelistAmounts\\n    ) external;\\n\\n    /**\\n     * Mints a new artwork with the specified trait token IDs\\n     * The caller must own the specified traits\\n     *\\n     * @param _traitTokenIds the trait token IDs to create the artwork with\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     * @return _artworkTokenId the token ID of the newly minted artwork\\n     */\\n    function mintArtwork(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external returns (uint256 _artworkTokenId);\\n\\n    /**\\n     * Allows the artist or project registry to mint the proof mint\\n     *\\n     * @param _traitTokenIds token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintArtworkProof(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external;\\n\\n    /**\\n     * Allows an address on the whitelist to mint an artwork for free\\n     *\\n     * @param _traitTokenIds token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintArtworkWhitelist(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external;\\n\\n    /**\\n     * Mints traits with specified amounts, and mints an artwork in a single transaction\\n     * ETH amount needed for trait mints must be sent\\n     *\\n     * @param _traitTokenIdsToBuy token IDs of the traits to buy\\n     * @param _traitAmountsToBuy amounts of each trait to buy\\n     * @param _traitTokenIdsToCreateArtwork token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintTraitsAndArtwork(\\n        uint256[] calldata _traitTokenIdsToBuy,\\n        uint256[] calldata _traitAmountsToBuy,\\n        uint256[] calldata _traitTokenIdsToCreateArtwork,\\n        uint256 _saltNonce\\n    ) external payable;\\n\\n    /**\\n     * Reclaims the traits the specified artwork token into the traits its composed of\\n     * The artwork token is burned, and the token ID will never be reused\\n     * The traits are transferred to the caller's address\\n     *\\n     * @param _artworkTokenId the token ID of the artwork being reclaimed\\n     */\\n    function reclaimTraits(uint256 _artworkTokenId) external;\\n\\n    /**\\n     * Returns the URI of the specified token ID\\n     *\\n     * @param _tokenId token ID to get URI for\\n     * @return string the token URI\\n     */\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    /**\\n     * Returns how many more whitelist mints the specified address has\\n     *\\n     * @return uint256 the number of whitelist mints remaining\\n     */\\n    function whitelistMintsRemaining(\\n        address _user\\n    ) external view returns (uint256);\\n\\n    /**\\n     * Returns info about the specified artwork token\\n     *\\n     * @param _artworkTokenId token ID of the artwork\\n     * @return _traitTokenIds the token IDs of the traits the artwork contains\\n     * @return _traitNames the human readable trait names contained in the artwork\\n     * @return _traitValues the trait values used by the generative script\\n     * @return _traitTypeNames the human readable trait type names\\n     * @return _traitTypeValues the trait type values used by the generative script\\n     * @return _hash the artwork hash\\n     */\\n    function artwork(\\n        uint256 _artworkTokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory _traitTokenIds,\\n            string[] memory _traitNames,\\n            string[] memory _traitValues,\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues,\\n            bytes32 _hash\\n        );\\n\\n    /**\\n     * Returns a string containing the project metadata in JSON format\\n     *\\n     * @return string the project metadata in JSON format\\n     */\\n    function metadataJSON() external view returns (string memory);\\n\\n    /**\\n     * Returns the string that contains the generative art javascript\\n     *\\n     * @return string the generative art javascript\\n     */\\n    function script() external view returns (string memory);\\n\\n    /**\\n     * Returns whether the specified hash has been used to mint an artwork\\n     *\\n     * @param _hash the artwork seed hash\\n     * @return bool whether the hash has been used\\n     */\\n    function isHashUsed(bytes32 _hash) external view returns (bool);\\n\\n    /**\\n     * Returns whether the specified interface ID is supported by the contract\\n     *\\n     * @param interfaceId the interface ID to check\\n     * @return bool True if the interface is supported, otherwise False\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbad1872e77c97a11bb8dae5f3993efc53028b221a073b07e389e0c7b1231ba0c\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IBaseSetup.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\ninterface IBaseSetup {\\n    /**\\n     * Sets up the contract\\n     *\\n     * @param _data bytes containing setup data for initializing contract\\n     */\\n    function setup(bytes calldata _data) external;\\n\\n    /**\\n     * Cancels a project and its auction\\n     * Contracts should revert if this is called and the auction has already started.\\n     */\\n    function cancel() external;\\n}\",\"keccak256\":\"0x21101c994f4b743ec79bd8e450977a450b812218208dbc03338d56e5f08210a3\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IProjectRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\ninterface IProjectRegistry {\\n    struct Project {\\n        address artwork;\\n        address traits;\\n    }\\n\\n    error OnlyAdmin();\\n    error InvalidAddress();\\n    error InvalidArrayLengths();\\n    error OnlyDeregisterLastProject();\\n\\n    event BaseURIUpdated(string baseURI);\\n    event ProjectRegistered(\\n        uint256 indexed projectId,\\n        address indexed artwork,\\n        address indexed traits\\n    );\\n    event ProjectDeregistered(uint256 indexed projectId);\\n    event AdminAdded(address indexed account);\\n    event AdminRemoved(address indexed account);\\n\\n    /**\\n     * Updates the URI base string\\n     *\\n     * @param _baseURI the updated base URI string\\n     */\\n    function updateBaseURI(string memory _baseURI) external;\\n\\n    /**\\n     * Registers a project by storing the Artwork and Traits contract addresses,\\n     * and calls setup on both contracts with the corresponding bytes data\\n     *\\n     * @param _artwork the address of the Artwork contract\\n     * @param _artworkData data to pass to setup function of the Artwork contract\\n     * @param _traits the address of the Traits contract\\n     * @param _traitsData data to pass to setup function of the Traits contract\\n     */\\n    function registerProject(\\n        address _artwork,\\n        bytes calldata _artworkData,\\n        address _traits,\\n        bytes calldata _traitsData\\n    ) external;\\n\\n    /**\\n     * Deregisters a project and zeroes out the addresses in the project mapping\\n     * Will revert if called after a projects auction has started\\n     *\\n     * @param _projectId the ID of the project\\n     */\\n    function deregisterProject(uint256 _projectId) external;\\n\\n    /**\\n     * Executes an arbitrary number of external function calls\\n     *\\n     * @param _targets the array of addresses to call\\n     * @param _values array of Ether amounts for each transaction\\n     * @param _calldatas array of transaction calldata bytes\\n     */\\n    function execute(\\n        address[] calldata _targets,\\n        uint256[] calldata _values,\\n        bytes[] calldata _calldatas\\n    ) external;\\n\\n    /**\\n     * Adds multiple addresses to be made admins\\n     *\\n     * @param _admins the addresses to make admins\\n     */\\n    function addAdmins(address[] memory _admins) external;\\n\\n    /**\\n     * Removes multiple addresses from being admins\\n     *\\n     * @param _admins the addresses remove from being admins\\n     */\\n    function removeAdmins(address[] memory _admins) external;\\n\\n    /**\\n     * Returns the base URI string\\n     *\\n     * @return the base URI string\\n     */\\n    function baseURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2a96d56ade0943b9430605db94978a7fd06688652630eb58254be11b51e74794\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {IBaseSetup} from \\\"./IBaseSetup.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface ITraits is IBaseSetup, IERC1155 {\\n    struct TraitType {\\n        string name;\\n        string value;\\n    }\\n\\n    struct Trait {\\n        string name;\\n        string value;\\n        uint256 typeIndex;\\n        uint256 maxSupply;\\n    }\\n\\n    struct TraitsSetup {\\n        string[] traitTypeNames;\\n        string[] traitTypeValues;\\n        string[] traitNames;\\n        string[] traitValues;\\n        uint256[] traitTypeIndexes;\\n        uint256[] traitMaxSupplys;\\n    }\\n\\n    event AuctionUpdated(\\n        uint256 auctionStartTime,\\n        uint256 auctionEndTime,\\n        uint256 auctionStartPrice,\\n        uint256 auctionEndPrice,\\n        uint256 auctionPriceSteps,\\n        bool auctionExponential,\\n        uint256 traitsSaleStartTime\\n    );\\n\\n    error OnlyArtwork();\\n    error OnlyProjectRegistry();\\n    error AlreadySetup();\\n    error AuctionIsLive();\\n    error InvalidAuction();\\n    error MaxSupply();\\n    error InvalidEthAmount();\\n    error InvalidTraits();\\n    error AuctionNotLive();\\n    error InvalidTokenId();\\n    error TraitsSaleStartTime();\\n    error InvalidArrayLengths();\\n    error Cancelled();\\n\\n    /**\\n     * Updates the schedule of the dutch auction, can only\\n     * be called if the dutch auction hasn't started yet, and\\n     * can only update the auction to a later time, not sooner\\n     *\\n     * @param _auctionStartTime timestamp the auction begins at\\n     * @param _auctionEndTime timestamp the auction ends at\\n     * @param _auctionStartPrice trait price the auction begins at\\n     * @param _auctionEndPrice trait price the auction ends at\\n     * @param _auctionPriceSteps number of different prices auction steps through\\n     * @param _auctionExponential true indicates auction curve is exponential, otherwise linear\\n     * @param _traitsSaleStartTime timestamp at which traits can be bought individually\\n     */\\n    function updateAuction(\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionPriceSteps,\\n        bool _auctionExponential,\\n        uint256 _traitsSaleStartTime\\n    ) external;\\n\\n    /**\\n     * Allows a user to mint any number of traits and amounts using ether\\n     *\\n     * @param _recipient the address to receive the trait tokens\\n     * @param _traitTokenIds the trait token IDs to buy\\n     * @param _traitAmounts the amounts of each token ID to buy\\n     */\\n    function mintTraits(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds,\\n        uint256[] calldata _traitAmounts\\n    ) external payable;\\n\\n    /**\\n     * Mints traits for artist proof and for whitelisted mints\\n     *\\n     * @param _recipient address to receive the minted traits\\n     * @param _traitTokenIds trait token IDs to mint\\n     */\\n    function mintTraitsWhitelistOrProof(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds\\n    ) external;\\n\\n    /**\\n     * Called by the Artwork contract to transfer traits from the caller to the Artwork\\n     * contract to create a new Artwork token\\n     *\\n     * @param _caller the address creating the artwork\\n     * @param _traitTokenIds the trait token IDs used to create the artwork\\n     */\\n    function transferTraitsToMintArtwork(\\n        address _caller,\\n        uint256[] calldata _traitTokenIds\\n    ) external;\\n\\n    /**\\n     * Returns the trait types\\n     *\\n     * @return _traitTypeNames human readable trait type names\\n     * @return _traitTypeValues trait type values used in the generative script\\n     */\\n    function traitTypes()\\n        external\\n        view\\n        returns (\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues\\n        );\\n\\n    /**\\n     * Returns info about an individual trait\\n     *\\n     * @param _tokenId token ID to get info about\\n     * @return _traitName human readable trait name\\n     * @return _traitValue trait type value used in the generative script\\n     * @return _traitTypeName human readable trait type name\\n     * @return _traitTypeValue trait type value used in the generative script\\n     */\\n    function trait(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory _traitName,\\n            string memory _traitValue,\\n            string memory _traitTypeName,\\n            string memory _traitTypeValue\\n        );\\n\\n    /**\\n     * Returns info about all traits\\n     *\\n     * @return _traitTokenIds token IDs of the traits\\n     * @return _traitNames human readable trait names\\n     * @return _traitValues trait type values used in the generative script\\n     * @return _traitTypeIndexes trait type index each trait belongs to\\n     * @return _traitTypeNames human readable trait type names\\n     * @return _traitTypeValues trait type values used in the generative script\\n     * @return _traitTotalSupplys total supply of each trait\\n     * @return _traitMaxSupplys max supply of each trait\\n     */\\n    function traits()\\n        external\\n        view\\n        returns (\\n            uint256[] memory _traitTokenIds,\\n            string[] memory _traitNames,\\n            string[] memory _traitValues,\\n            uint256[] memory _traitTypeIndexes,\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues,\\n            uint256[] memory _traitTotalSupplys,\\n            uint256[] memory _traitMaxSupplys\\n        );\\n\\n    /**\\n     * Returns which price step the auction is currently on\\n     *\\n     * @return the current price step\\n     */\\n    function traitPriceStep() external view returns (uint256);\\n\\n    /**\\n     * Returns the current trait price\\n     *\\n     * @return _price the current trait price in ether\\n     */\\n    function traitPrice() external view returns (uint256 _price);\\n\\n    /**\\n     * Returns the max supply of the specified token ID\\n     *\\n     * @return _maxSupply the max supply of the token\\n     */\\n    function maxSupply(\\n        uint256 _tokenId\\n    ) external view returns (uint256 _maxSupply);\\n\\n    /**\\n     * Returns the URI of the specified token ID\\n     *\\n     * @param _tokenId the token ID to get the URI for\\n     * @return string the token specific URI\\n     */\\n    function uri(uint256 _tokenId) external view returns (string memory);\\n\\n    /**\\n     * Returns the auction start timestamp\\n     *\\n     * @return uint256 the timestamp the auction starts\\n     */\\n    function auctionStartTime()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * Returns whether the specified interface ID is supported by the contract\\n     *\\n     * @param interfaceId the interface ID to check\\n     * @return bool True if the interface is supported, otherwise False\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x424f3223d35bb315ce777322db395375d8305e3516436a6362e1dcd4ee54c664\",\"license\":\"GNU GPLv3\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620048ac380380620048ac833981016040819052620000349162000516565b6040805160208101909152600081526200004e81620000b3565b50600780546001600160a01b038086166001600160a01b03199283161790925560088054928516929091169190911790558051602082015160408301516060840151608085015160a0860151620000aa959493929190620000c5565b505050620007e6565b6004620000c1828262000704565b5050565b85511580620000d357508351155b80620000e157508451865114155b80620000ef57508251845114155b80620000fd57508151845114155b806200010b57508051845114155b156200012a5760405163a9854bc960e01b815260040160405180910390fd5b60005b8651811015620001d657600f6040518060400160405280898481518110620001595762000159620007d0565b602002602001015181526020018884815181106200017b576200017b620007d0565b6020908102919091018101519091528254600181018455600093845292208151919260020201908190620001b0908262000704565b5060208201516001820190620001c7908262000704565b5050508060010190506200012d565b5060005b8451811015620002d85760106040518060800160405280878481518110620002065762000206620007d0565b60200260200101518152602001868481518110620002285762000228620007d0565b602002602001015181526020018584815181106200024a576200024a620007d0565b602002602001015181526020018484815181106200026c576200026c620007d0565b6020908102919091018101519091528254600181018455600093845292208151919260040201908190620002a1908262000704565b5060208201516001820190620002b8908262000704565b5060408201516002820155606090910151600390910155600101620001da565b50505050505050565b80516001600160a01b0381168114620002f957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715620003395762000339620002fe565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200036a576200036a620002fe565b604052919050565b60006001600160401b038211156200038e576200038e620002fe565b5060051b60200190565b6000601f8381840112620003ab57600080fd5b82516020620003c4620003be8362000372565b6200033f565b82815260059290921b85018101918181019087841115620003e457600080fd5b8287015b848110156200049d5780516001600160401b03808211156200040a5760008081fd5b818a0191508a603f830112620004205760008081fd5b8582015181811115620004375762000437620002fe565b6200044a818a01601f191688016200033f565b915080825260408c81838601011115620004645760008081fd5b60005b8281101562000484578481018201518482018a0152880162000467565b50506000908201870152845250918301918301620003e8565b50979650505050505050565b600082601f830112620004bb57600080fd5b81516020620004ce620003be8362000372565b82815260059290921b84018101918181019086841115620004ee57600080fd5b8286015b848110156200050b5780518352918301918301620004f2565b509695505050505050565b6000806000606084860312156200052c57600080fd5b6200053784620002e1565b92506200054760208501620002e1565b60408501519092506001600160401b03808211156200056557600080fd5b9085019060c082880312156200057a57600080fd5b6200058462000314565b8251828111156200059457600080fd5b620005a28982860162000398565b825250602083015182811115620005b857600080fd5b620005c68982860162000398565b602083015250604083015182811115620005df57600080fd5b620005ed8982860162000398565b6040830152506060830151828111156200060657600080fd5b620006148982860162000398565b6060830152506080830151828111156200062d57600080fd5b6200063b89828601620004a9565b60808301525060a0830151828111156200065457600080fd5b6200066289828601620004a9565b60a0830152508093505050509250925092565b600181811c908216806200068a57607f821691505b602082108103620006ab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620006ff57600081815260208120601f850160051c81016020861015620006da5750805b601f850160051c820191505b81811015620006fb57828155600101620006e6565b5050505b505050565b81516001600160401b03811115620007205762000720620002fe565b620007388162000731845462000675565b84620006b1565b602080601f831160018114620007705760008415620007575750858301515b600019600386901b1c1916600185901b178555620006fb565b600085815260208120601f198616915b82811015620007a15788860151825594840194600190910190840162000780565b5085821015620007c05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6140b680620007f66000396000f3fe6080604052600436106102325760003560e01c806388392b5d11610138578063e985e9c5116100b0578063f242432a1161007f578063f512fe3011610064578063f512fe30146106ae578063fb37f91f146106ce578063ffa1ad74146106e357600080fd5b8063f242432a1461065e578063f3457fdf1461067e57600080fd5b8063e985e9c5146105d0578063ea8a1af014610619578063eb54f9ec1461062e578063edeb832a1461064457600080fd5b8063a22cb46511610107578063d756985b116100ec578063d756985b14610571578063dfae7d4414610587578063e1fc334f146105a757600080fd5b8063a22cb46514610524578063bd85b0391461054457600080fd5b806388392b5d146104b95780639a82a09a146104cf5780639ded06df146104ee578063a04a6ac81461050e57600080fd5b806337b2383f116101cb5780634f558e791161019a5780635a33d8dc1161017f5780635a33d8dc146104665780635bf1af4414610486578063869f75941461049957600080fd5b80634f558e7914610417578063503492aa1461044657600080fd5b806337b2383f1461039e57806341a1f7f5146103be5780634b449cba146103d45780634e1273f4146103ea57600080fd5b80631f0a595b116102075780631f0a595b146102dc57806326cc133e146102ff5780632a55205a1461033d5780632eb2c2d61461037c57600080fd5b8062a9bb0114610237578062fdd58e1461025f57806301ffc9a71461027f5780630e89341c146102af575b600080fd5b34801561024357600080fd5b5061024c61072c565b6040519081526020015b60405180910390f35b34801561026b57600080fd5b5061024c61027a36600461330f565b610800565b34801561028b57600080fd5b5061029f61029a366004613351565b6108ae565b6040519015158152602001610256565b3480156102bb57600080fd5b506102cf6102ca36600461336e565b6108ec565b60405161025691906133d7565b3480156102e857600080fd5b506102f16109f7565b604051610256929190613442565b34801561030b57600080fd5b50600654610325906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610256565b34801561034957600080fd5b5061035d610358366004613470565b610c4a565b604080516001600160a01b039093168352602083019190915201610256565b34801561038857600080fd5b5061039c6103973660046135ee565b610cd3565b005b3480156103aa57600080fd5b5061039c6103b93660046136e1565b610d75565b3480156103ca57600080fd5b5061024c600d5481565b3480156103e057600080fd5b5061024c600a5481565b3480156103f657600080fd5b5061040a610405366004613736565b610f30565b604051610256919061383e565b34801561042357600080fd5b5061029f61043236600461336e565b600090815260056020526040902054151590565b34801561045257600080fd5b5061039c610461366004613866565b61106e565b34801561047257600080fd5b50600754610325906001600160a01b031681565b61039c6104943660046138c2565b6110d3565b3480156104a557600080fd5b5061024c6104b436600461336e565b61135d565b3480156104c557600080fd5b5061024c600e5481565b3480156104db57600080fd5b5060065461029f90610100900460ff1681565b3480156104fa57600080fd5b5061039c610509366004613945565b61138b565b34801561051a57600080fd5b5061024c600c5481565b34801561053057600080fd5b5061039c61053f3660046139b7565b61147b565b34801561055057600080fd5b5061024c61055f36600461336e565b60009081526005602052604090205490565b34801561057d57600080fd5b5061024c600b5481565b34801561059357600080fd5b50600854610325906001600160a01b031681565b3480156105b357600080fd5b506105bc61148a565b6040516102569897969594939291906139ec565b3480156105dc57600080fd5b5061029f6105eb366004613a9b565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561062557600080fd5b5061039c611b57565b34801561063a57600080fd5b5061024c60095481565b34801561065057600080fd5b5060065461029f9060ff1681565b34801561066a57600080fd5b5061039c610679366004613ad4565b611bb5565b34801561068a57600080fd5b5061069e61069936600461336e565b611c50565b6040516102569493929190613b3d565b3480156106ba57600080fd5b5061039c6106c93660046136e1565b611f86565b3480156106da57600080fd5b5061024c6121a1565b3480156106ef57600080fd5b506102cf6040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b60065460009060ff16156107b857600c5460026001600d5461074e9190613bab565b6107589190613ca2565b600260016107646121a1565b600d546107719190613bab565b61077b9190613bab565b6107859190613ca2565b600c54600b546107959190613bab565b61079f9190613cb1565b6107a99190613cc8565b6107b39190613cea565b905090565b6001600d546107c79190613bab565b600c54600b546107d79190613bab565b6107df6121a1565b6107e99190613cb1565b6107f39190613cc8565b600b546107b39190613bab565b60006001600160a01b0383166108835760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982167f5df5ddf70000000000000000000000000000000000000000000000000000000014806108a857506108a88261222b565b6010546060908210610911576040516307ed98ed60e31b815260040160405180910390fd5b600754604080517f6c0360eb00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691636c0360eb91600480830192869291908290030181865afa158015610973573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261099b9190810190613cfd565b905080516000036109bb57604051806020016040528060008152506109f0565b806109c53061229d565b6109ce856122b3565b6040516020016109e093929190613d7f565b6040516020818303038152906040525b9392505050565b600f5460609081908067ffffffffffffffff811115610a1857610a18613492565b604051908082528060200260200182016040528015610a4b57816020015b6060815260200190600190039081610a365790505b5092508067ffffffffffffffff811115610a6757610a67613492565b604051908082528060200260200182016040528015610a9a57816020015b6060815260200190600190039081610a855790505b50915060005b81811015610c4457600f8181548110610abb57610abb613deb565b90600052602060002090600202016000018054610ad790613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0390613e01565b8015610b505780601f10610b2557610100808354040283529160200191610b50565b820191906000526020600020905b815481529060010190602001808311610b3357829003601f168201915b5050505050848281518110610b6757610b67613deb565b6020026020010181905250600f8181548110610b8557610b85613deb565b90600052602060002090600202016001018054610ba190613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054610bcd90613e01565b8015610c1a5780601f10610bef57610100808354040283529160200191610c1a565b820191906000526020600020905b815481529060010190602001808311610bfd57829003601f168201915b5050505050838281518110610c3157610c31613deb565b6020908102919091010152600101610aa0565b50509091565b60065460405163152a902d60e11b815260048101849052602481018390526000918291620100009091046001600160a01b031690632a55205a906044016040805180830381865afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc79190613e3b565b915091505b9250929050565b6001600160a01b038516331480610cef5750610cef85336105eb565b610d615760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f766564000000000000000000000000000000000000606482015260840161087a565b610d6e8585858585612353565b5050505050565b6006546201000090046001600160a01b03163314610da657604051636447134960e01b815260040160405180910390fd5b600654610100900460ff1615610dcf576040516318ee562160e21b815260040160405180910390fd5b600f548114610df15760405163a9854bc960e01b815260040160405180910390fd5b60008167ffffffffffffffff811115610e0c57610e0c613492565b604051908082528060200260200182016040528015610e35578160200160208202803683370190505b50905060005b82811015610ec657806010858584818110610e5857610e58613deb565b9050602002013581548110610e6f57610e6f613deb565b90600052602060002090600402016002015414610e9f57604051633221911d60e21b815260040160405180910390fd5b6001828281518110610eb357610eb3613deb565b6020908102919091010152600101610e3b565b50610f2a84600660029054906101000a90046001600160a01b03168585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250604080516020810190915290815288935091506123539050565b50505050565b60608151835114610fa95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161087a565b6000835167ffffffffffffffff811115610fc557610fc5613492565b604051908082528060200260200182016040528015610fee578160200160208202803683370190505b50905060005b84518110156110665761103985828151811061101257611012613deb565b602002602001015185838151811061102c5761102c613deb565b6020026020010151610800565b82828151811061104b5761104b613deb565b602090810291909101015261105f81613e69565b9050610ff4565b509392505050565b6007546001600160a01b0316331461109957604051630b35571f60e21b815260040160405180910390fd5b42600954116110bb57604051630df9d0d560e31b815260040160405180910390fd5b6110ca878787878787876125c2565b50505050505050565b600654610100900460ff16156110fc576040516318ee562160e21b815260040160405180910390fd5b82811461111c5760405163a9854bc960e01b815260040160405180910390fd5b6006546201000090046001600160a01b0316331480159061113e5750600e5442105b15611175576040517fac3d4d3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b8281101561125c5783838281811061119357611193613deb565b90506020020135826111a59190613cea565b915060108686838181106111bb576111bb613deb565b90506020020135815481106111d2576111d2613deb565b9060005260206000209060040201600301548484838181106111f6576111f6613deb565b9050602002013561122b88888581811061121257611212613deb565b9050602002013560009081526005602052604090205490565b6112359190613cea565b111561125457604051632cdb04a160e21b815260040160405180910390fd5b600101611179565b5061126561072c565b61126f9082613cb1565b3410156112a8576040517f0772327b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113248686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a028281018201909352898252909350899250889182918501908490808284376000920182905250604080516020810190915290815292506126bb915050565b6008546040516001600160a01b03909116903480156108fc02916000818181858888f193505050501580156110ca573d6000803e3d6000fd5b60006010828154811061137257611372613deb565b9060005260206000209060040201600301549050919050565b6007546001600160a01b031633146113b657604051630b35571f60e21b815260040160405180910390fd5b6006546201000090046001600160a01b0316156113ff576040517f7735869100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080808080808080611414898b018b613e82565b600680547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038b1602179055969e50949c50929a50909850965094509250905061146f86868686868c876125c2565b50505050505050505050565b6114863383836128ad565b5050565b606080606080606080606080600060108054905090508067ffffffffffffffff8111156114b9576114b9613492565b6040519080825280602002602001820160405280156114e2578160200160208202803683370190505b5098508067ffffffffffffffff8111156114fe576114fe613492565b60405190808252806020026020018201604052801561153157816020015b606081526020019060019003908161151c5790505b5097508067ffffffffffffffff81111561154d5761154d613492565b60405190808252806020026020018201604052801561158057816020015b606081526020019060019003908161156b5790505b5096508067ffffffffffffffff81111561159c5761159c613492565b6040519080825280602002602001820160405280156115c5578160200160208202803683370190505b5095508067ffffffffffffffff8111156115e1576115e1613492565b60405190808252806020026020018201604052801561161457816020015b60608152602001906001900390816115ff5790505b5094508067ffffffffffffffff81111561163057611630613492565b60405190808252806020026020018201604052801561166357816020015b606081526020019060019003908161164e5790505b5093508067ffffffffffffffff81111561167f5761167f613492565b6040519080825280602002602001820160405280156116a8578160200160208202803683370190505b5092508067ffffffffffffffff8111156116c4576116c4613492565b6040519080825280602002602001820160405280156116ed578160200160208202803683370190505b50915060005b81811015611b4b57808a828151811061170e5761170e613deb565b6020026020010181815250506010818154811061172d5761172d613deb565b9060005260206000209060040201600001805461174990613e01565b80601f016020809104026020016040519081016040528092919081815260200182805461177590613e01565b80156117c25780601f10611797576101008083540402835291602001916117c2565b820191906000526020600020905b8154815290600101906020018083116117a557829003601f168201915b50505050508982815181106117d9576117d9613deb565b6020026020010181905250601081815481106117f7576117f7613deb565b9060005260206000209060040201600101805461181390613e01565b80601f016020809104026020016040519081016040528092919081815260200182805461183f90613e01565b801561188c5780601f106118615761010080835404028352916020019161188c565b820191906000526020600020905b81548152906001019060200180831161186f57829003601f168201915b50505050508882815181106118a3576118a3613deb565b6020026020010181905250601081815481106118c1576118c1613deb565b9060005260206000209060040201600201548782815181106118e5576118e5613deb565b602002602001018181525050600f6010828154811061190657611906613deb565b9060005260206000209060040201600201548154811061192857611928613deb565b9060005260206000209060020201600001805461194490613e01565b80601f016020809104026020016040519081016040528092919081815260200182805461197090613e01565b80156119bd5780601f10611992576101008083540402835291602001916119bd565b820191906000526020600020905b8154815290600101906020018083116119a057829003601f168201915b50505050508682815181106119d4576119d4613deb565b6020026020010181905250600f601082815481106119f4576119f4613deb565b90600052602060002090600402016002015481548110611a1657611a16613deb565b90600052602060002090600202016001018054611a3290613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5e90613e01565b8015611aab5780601f10611a8057610100808354040283529160200191611aab565b820191906000526020600020905b815481529060010190602001808311611a8e57829003601f168201915b5050505050858281518110611ac257611ac2613deb565b6020026020010181905250611ae38160009081526005602052604090205490565b848281518110611af557611af5613deb565b60200260200101818152505060108181548110611b1457611b14613deb565b906000526020600020906004020160030154838281518110611b3857611b38613deb565b60209081029190910101526001016116f3565b50509091929394959697565b6007546001600160a01b03163314611b8257604051630b35571f60e21b815260040160405180910390fd5b6009544210611ba457604051630df9d0d560e31b815260040160405180910390fd5b6006805461ff001916610100179055565b6001600160a01b038516331480611bd15750611bd185336105eb565b611c435760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f766564000000000000000000000000000000000000606482015260840161087a565b610d6e85858585856129a1565b6060806060806010805490508510611c7b576040516307ed98ed60e31b815260040160405180910390fd5b60108581548110611c8e57611c8e613deb565b90600052602060002090600402016000018054611caa90613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054611cd690613e01565b8015611d235780601f10611cf857610100808354040283529160200191611d23565b820191906000526020600020905b815481529060010190602001808311611d0657829003601f168201915b5050505050935060108581548110611d3d57611d3d613deb565b90600052602060002090600402016001018054611d5990613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8590613e01565b8015611dd25780601f10611da757610100808354040283529160200191611dd2565b820191906000526020600020905b815481529060010190602001808311611db557829003601f168201915b50505050509250600f60108681548110611dee57611dee613deb565b90600052602060002090600402016002015481548110611e1057611e10613deb565b90600052602060002090600202016000018054611e2c90613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5890613e01565b8015611ea55780601f10611e7a57610100808354040283529160200191611ea5565b820191906000526020600020905b815481529060010190602001808311611e8857829003601f168201915b50505050509150600f60108681548110611ec157611ec1613deb565b90600052602060002090600402016002015481548110611ee357611ee3613deb565b90600052602060002090600202016001018054611eff90613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054611f2b90613e01565b8015611f785780601f10611f4d57610100808354040283529160200191611f78565b820191906000526020600020905b815481529060010190602001808311611f5b57829003601f168201915b505050505090509193509193565b6006546201000090046001600160a01b03163314611fb757604051636447134960e01b815260040160405180910390fd5b600654610100900460ff1615611fe0576040516318ee562160e21b815260040160405180910390fd5b600f5481146120025760405163a9854bc960e01b815260040160405180910390fd5b60008167ffffffffffffffff81111561201d5761201d613492565b604051908082528060200260200182016040528015612046578160200160208202803683370190505b50905060005b828110156121535780601085858481811061206957612069613deb565b905060200201358154811061208057612080613deb565b906000526020600020906004020160020154146120b057604051633221911d60e21b815260040160405180910390fd5b60108484838181106120c4576120c4613deb565b90506020020135815481106120db576120db613deb565b90600052602060002090600402016003015461210285858481811061121257611212613deb565b61210d906001613cea565b111561212c57604051632cdb04a160e21b815260040160405180910390fd5b600182828151811061214057612140613deb565b602090810291909101015260010161204c565b50610f2a848484808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250604080516020810190915290815287935091506126bb9050565b60006009544210156121df576040517f58fd8d1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a5442106121f7576001600d546107b39190613bab565b600954600a546122079190613bab565b6009546122149042613bab565b600d546122219190613cb1565b6107b39190613cc8565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061228e57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806108a857506108a882612b5e565b60606108a86001600160a01b0383166014612bac565b606060006122c083612d8d565b600101905060008167ffffffffffffffff8111156122e0576122e0613492565b6040519080825280601f01601f19166020018201604052801561230a576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461231457509392505050565b81518351146123b55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161087a565b6001600160a01b0384166124195760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161087a565b33612428818787878787612e6f565b60005b845181101561255457600085828151811061244857612448613deb565b60200260200101519050600085838151811061246657612466613deb565b60209081029190910181015160008481526002835260408082206001600160a01b038e1683529093529190912054909150818110156124fa5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161087a565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612539908490613cea565b925050819055505050508061254d90613e69565b905061242b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516125a4929190613eeb565b60405180910390a46125ba818787878787612e7d565b505050505050565b868610806125cf57508484115b806125d957508681105b806125e357504287105b806125ee5750600283105b15612625576040517f2156216000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009879055600a869055600b859055600c849055600d8390556006805460ff1916831515908117909155600e8290556040805189815260208101899052908101879052606081018690526080810185905260a081019190915260c081018290527f67d6b1cc23fa4bc51d9b54cd449808062dd794b2de35e59e14affb0abfda5b459060e00160405180910390a150505050505050565b6001600160a01b0384166127375760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161087a565b81518351146127995760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161087a565b336127a981600087878787612e6f565b60005b8451811015612845578381815181106127c7576127c7613deb565b6020026020010151600260008784815181106127e5576127e5613deb565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461282d9190613cea565b9091555081905061283d81613e69565b9150506127ac565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612896929190613eeb565b60405180910390a4610d6e81600087878787612e7d565b816001600160a01b0316836001600160a01b0316036129345760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161087a565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416612a055760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161087a565b336000612a1185613022565b90506000612a1e85613022565b9050612a2e838989858589612e6f565b60008681526002602090815260408083206001600160a01b038c16845290915290205485811015612ab45760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161087a565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612af3908490613cea565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612b53848a8a8a8a8a61306d565b505050505050505050565b60006001600160e01b0319821663152a902d60e11b14806108a857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146108a8565b60606000612bbb836002613cb1565b612bc6906002613cea565b67ffffffffffffffff811115612bde57612bde613492565b6040519080825280601f01601f191660200182016040528015612c08576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612c3f57612c3f613deb565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612c8a57612c8a613deb565b60200101906001600160f81b031916908160001a9053506000612cae846002613cb1565b612cb9906001613cea565b90505b6001811115612d3e577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612cfa57612cfa613deb565b1a60f81b828281518110612d1057612d10613deb565b60200101906001600160f81b031916908160001a90535060049490941c93612d3781613f10565b9050612cbc565b5083156109f05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161087a565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612dd6577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612e02576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612e2057662386f26fc10000830492506010015b6305f5e1008310612e38576305f5e100830492506008015b6127108310612e4c57612710830492506004015b60648310612e5e576064830492506002015b600a83106108a85760010192915050565b6125ba868686868686613169565b6001600160a01b0384163b156125ba5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612ec19089908990889088908890600401613f27565b6020604051808303816000875af1925050508015612efc575060408051601f3d908101601f19168201909252612ef991810190613f85565b60015b612fb157612f08613fa2565b806308c379a003612f415750612f1c613fbe565b80612f275750612f43565b8060405162461bcd60e51b815260040161087a91906133d7565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161087a565b6001600160e01b0319811663bc197c8160e01b146110ca5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161087a565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061305c5761305c613deb565b602090810291909101015292915050565b6001600160a01b0384163b156125ba5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906130b19089908990889088908890600401614048565b6020604051808303816000875af19250505080156130ec575060408051601f3d908101601f191682019092526130e991810190613f85565b60015b6130f857612f08613fa2565b6001600160e01b0319811663f23a6e6160e01b146110ca5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161087a565b6001600160a01b0385166131f05760005b83518110156131ee5782818151811061319557613195613deb565b6020026020010151600560008684815181106131b3576131b3613deb565b6020026020010151815260200190815260200160002060008282546131d89190613cea565b909155506131e7905081613e69565b905061317a565b505b6001600160a01b0384166125ba5760005b83518110156110ca57600084828151811061321e5761321e613deb565b60200260200101519050600084838151811061323c5761323c613deb565b60200260200101519050600060056000848152602001908152602001600020549050818110156132d45760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c79000000000000000000000000000000000000000000000000606482015260840161087a565b600092835260056020526040909220910390556132f081613e69565b9050613201565b6001600160a01b038116811461330c57600080fd5b50565b6000806040838503121561332257600080fd5b823561332d816132f7565b946020939093013593505050565b6001600160e01b03198116811461330c57600080fd5b60006020828403121561336357600080fd5b81356109f08161333b565b60006020828403121561338057600080fd5b5035919050565b60005b838110156133a257818101518382015260200161338a565b50506000910152565b600081518084526133c3816020860160208601613387565b601f01601f19169290920160200192915050565b6020815260006109f060208301846133ab565b600082825180855260208086019550808260051b84010181860160005b8481101561343557601f198684030189526134238383516133ab565b98840198925090830190600101613407565b5090979650505050505050565b60408152600061345560408301856133ea565b828103602084015261346781856133ea565b95945050505050565b6000806040838503121561348357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156134ce576134ce613492565b6040525050565b600067ffffffffffffffff8211156134ef576134ef613492565b5060051b60200190565b600082601f83011261350a57600080fd5b81356020613517826134d5565b60405161352482826134a8565b83815260059390931b850182019282810191508684111561354457600080fd5b8286015b8481101561355f5780358352918301918301613548565b509695505050505050565b600067ffffffffffffffff82111561358457613584613492565b50601f01601f191660200190565b600082601f8301126135a357600080fd5b81356135ae8161356a565b6040516135bb82826134a8565b8281528560208487010111156135d057600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080600060a0868803121561360657600080fd5b8535613611816132f7565b94506020860135613621816132f7565b9350604086013567ffffffffffffffff8082111561363e57600080fd5b61364a89838a016134f9565b9450606088013591508082111561366057600080fd5b61366c89838a016134f9565b9350608088013591508082111561368257600080fd5b5061368f88828901613592565b9150509295509295909350565b60008083601f8401126136ae57600080fd5b50813567ffffffffffffffff8111156136c657600080fd5b6020830191508360208260051b8501011115610ccc57600080fd5b6000806000604084860312156136f657600080fd5b8335613701816132f7565b9250602084013567ffffffffffffffff81111561371d57600080fd5b6137298682870161369c565b9497909650939450505050565b6000806040838503121561374957600080fd5b823567ffffffffffffffff8082111561376157600080fd5b818501915085601f83011261377557600080fd5b81356020613782826134d5565b60405161378f82826134a8565b83815260059390931b85018201928281019150898411156137af57600080fd5b948201945b838610156137d65785356137c7816132f7565b825294820194908201906137b4565b965050860135925050808211156137ec57600080fd5b506137f9858286016134f9565b9150509250929050565b600081518084526020808501945080840160005b8381101561383357815187529582019590820190600101613817565b509495945050505050565b6020815260006109f06020830184613803565b8035801515811461386157600080fd5b919050565b600080600080600080600060e0888a03121561388157600080fd5b87359650602088013595506040880135945060608801359350608088013592506138ad60a08901613851565b915060c0880135905092959891949750929550565b6000806000806000606086880312156138da57600080fd5b85356138e5816132f7565b9450602086013567ffffffffffffffff8082111561390257600080fd5b61390e89838a0161369c565b9096509450604088013591508082111561392757600080fd5b506139348882890161369c565b969995985093965092949392505050565b6000806020838503121561395857600080fd5b823567ffffffffffffffff8082111561397057600080fd5b818501915085601f83011261398457600080fd5b81358181111561399357600080fd5b8660208285010111156139a557600080fd5b60209290920196919550909350505050565b600080604083850312156139ca57600080fd5b82356139d5816132f7565b91506139e360208401613851565b90509250929050565b6000610100808352613a008184018c613803565b90508281036020840152613a14818b6133ea565b90508281036040840152613a28818a6133ea565b90508281036060840152613a3c8189613803565b90508281036080840152613a5081886133ea565b905082810360a0840152613a6481876133ea565b905082810360c0840152613a788186613803565b905082810360e0840152613a8c8185613803565b9b9a5050505050505050505050565b60008060408385031215613aae57600080fd5b8235613ab9816132f7565b91506020830135613ac9816132f7565b809150509250929050565b600080600080600060a08688031215613aec57600080fd5b8535613af7816132f7565b94506020860135613b07816132f7565b93506040860135925060608601359150608086013567ffffffffffffffff811115613b3157600080fd5b61368f88828901613592565b608081526000613b5060808301876133ab565b8281036020840152613b6281876133ab565b90508281036040840152613b7681866133ab565b90508281036060840152613b8a81856133ab565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108a8576108a8613b95565b600181815b80851115613bf9578160001904821115613bdf57613bdf613b95565b80851615613bec57918102915b93841c9390800290613bc3565b509250929050565b600082613c10575060016108a8565b81613c1d575060006108a8565b8160018114613c335760028114613c3d57613c59565b60019150506108a8565b60ff841115613c4e57613c4e613b95565b50506001821b6108a8565b5060208310610133831016604e8410600b8410161715613c7c575081810a6108a8565b613c868383613bbe565b8060001904821115613c9a57613c9a613b95565b029392505050565b60006109f060ff841683613c01565b80820281158282048414176108a8576108a8613b95565b600082613ce557634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156108a8576108a8613b95565b600060208284031215613d0f57600080fd5b815167ffffffffffffffff811115613d2657600080fd5b8201601f81018413613d3757600080fd5b8051613d428161356a565b604051613d4f82826134a8565b828152866020848601011115613d6457600080fd5b613d75836020830160208701613387565b9695505050505050565b60008451613d91818460208901613387565b845190830190613da5818360208901613387565b7f2f0000000000000000000000000000000000000000000000000000000000000091019081528351613dde816001840160208801613387565b0160010195945050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680613e1557607f821691505b602082108103613e3557634e487b7160e01b600052602260045260246000fd5b50919050565b60008060408385031215613e4e57600080fd5b8251613e59816132f7565b6020939093015192949293505050565b600060018201613e7b57613e7b613b95565b5060010190565b600080600080600080600080610100898b031215613e9f57600080fd5b8835613eaa816132f7565b9750613eb860208a01613851565b979a9799505050506040860135956060810135956080820135955060a0820135945060c0820135935060e0909101359150565b604081526000613efe6040830185613803565b82810360208401526134678185613803565b600081613f1f57613f1f613b95565b506000190190565b60006001600160a01b03808816835280871660208401525060a06040830152613f5360a0830186613803565b8281036060840152613f658186613803565b90508281036080840152613f7981856133ab565b98975050505050505050565b600060208284031215613f9757600080fd5b81516109f08161333b565b600060033d1115613fbb5760046000803e5060005160e01c5b90565b600060443d1015613fcc5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613ffc57505050505090565b82850191508151818111156140145750505050505090565b843d870101602082850101111561402e5750505050505090565b61403d602082860101876134a8565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613b8a60a08301846133ab56fea264697066735822122060e38bba184d550a1bd7226928625f6fc3b5ef6ca9896958e8b11a80f863e94064736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102325760003560e01c806388392b5d11610138578063e985e9c5116100b0578063f242432a1161007f578063f512fe3011610064578063f512fe30146106ae578063fb37f91f146106ce578063ffa1ad74146106e357600080fd5b8063f242432a1461065e578063f3457fdf1461067e57600080fd5b8063e985e9c5146105d0578063ea8a1af014610619578063eb54f9ec1461062e578063edeb832a1461064457600080fd5b8063a22cb46511610107578063d756985b116100ec578063d756985b14610571578063dfae7d4414610587578063e1fc334f146105a757600080fd5b8063a22cb46514610524578063bd85b0391461054457600080fd5b806388392b5d146104b95780639a82a09a146104cf5780639ded06df146104ee578063a04a6ac81461050e57600080fd5b806337b2383f116101cb5780634f558e791161019a5780635a33d8dc1161017f5780635a33d8dc146104665780635bf1af4414610486578063869f75941461049957600080fd5b80634f558e7914610417578063503492aa1461044657600080fd5b806337b2383f1461039e57806341a1f7f5146103be5780634b449cba146103d45780634e1273f4146103ea57600080fd5b80631f0a595b116102075780631f0a595b146102dc57806326cc133e146102ff5780632a55205a1461033d5780632eb2c2d61461037c57600080fd5b8062a9bb0114610237578062fdd58e1461025f57806301ffc9a71461027f5780630e89341c146102af575b600080fd5b34801561024357600080fd5b5061024c61072c565b6040519081526020015b60405180910390f35b34801561026b57600080fd5b5061024c61027a36600461330f565b610800565b34801561028b57600080fd5b5061029f61029a366004613351565b6108ae565b6040519015158152602001610256565b3480156102bb57600080fd5b506102cf6102ca36600461336e565b6108ec565b60405161025691906133d7565b3480156102e857600080fd5b506102f16109f7565b604051610256929190613442565b34801561030b57600080fd5b50600654610325906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610256565b34801561034957600080fd5b5061035d610358366004613470565b610c4a565b604080516001600160a01b039093168352602083019190915201610256565b34801561038857600080fd5b5061039c6103973660046135ee565b610cd3565b005b3480156103aa57600080fd5b5061039c6103b93660046136e1565b610d75565b3480156103ca57600080fd5b5061024c600d5481565b3480156103e057600080fd5b5061024c600a5481565b3480156103f657600080fd5b5061040a610405366004613736565b610f30565b604051610256919061383e565b34801561042357600080fd5b5061029f61043236600461336e565b600090815260056020526040902054151590565b34801561045257600080fd5b5061039c610461366004613866565b61106e565b34801561047257600080fd5b50600754610325906001600160a01b031681565b61039c6104943660046138c2565b6110d3565b3480156104a557600080fd5b5061024c6104b436600461336e565b61135d565b3480156104c557600080fd5b5061024c600e5481565b3480156104db57600080fd5b5060065461029f90610100900460ff1681565b3480156104fa57600080fd5b5061039c610509366004613945565b61138b565b34801561051a57600080fd5b5061024c600c5481565b34801561053057600080fd5b5061039c61053f3660046139b7565b61147b565b34801561055057600080fd5b5061024c61055f36600461336e565b60009081526005602052604090205490565b34801561057d57600080fd5b5061024c600b5481565b34801561059357600080fd5b50600854610325906001600160a01b031681565b3480156105b357600080fd5b506105bc61148a565b6040516102569897969594939291906139ec565b3480156105dc57600080fd5b5061029f6105eb366004613a9b565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561062557600080fd5b5061039c611b57565b34801561063a57600080fd5b5061024c60095481565b34801561065057600080fd5b5060065461029f9060ff1681565b34801561066a57600080fd5b5061039c610679366004613ad4565b611bb5565b34801561068a57600080fd5b5061069e61069936600461336e565b611c50565b6040516102569493929190613b3d565b3480156106ba57600080fd5b5061039c6106c93660046136e1565b611f86565b3480156106da57600080fd5b5061024c6121a1565b3480156106ef57600080fd5b506102cf6040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b60065460009060ff16156107b857600c5460026001600d5461074e9190613bab565b6107589190613ca2565b600260016107646121a1565b600d546107719190613bab565b61077b9190613bab565b6107859190613ca2565b600c54600b546107959190613bab565b61079f9190613cb1565b6107a99190613cc8565b6107b39190613cea565b905090565b6001600d546107c79190613bab565b600c54600b546107d79190613bab565b6107df6121a1565b6107e99190613cb1565b6107f39190613cc8565b600b546107b39190613bab565b60006001600160a01b0383166108835760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982167f5df5ddf70000000000000000000000000000000000000000000000000000000014806108a857506108a88261222b565b6010546060908210610911576040516307ed98ed60e31b815260040160405180910390fd5b600754604080517f6c0360eb00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691636c0360eb91600480830192869291908290030181865afa158015610973573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261099b9190810190613cfd565b905080516000036109bb57604051806020016040528060008152506109f0565b806109c53061229d565b6109ce856122b3565b6040516020016109e093929190613d7f565b6040516020818303038152906040525b9392505050565b600f5460609081908067ffffffffffffffff811115610a1857610a18613492565b604051908082528060200260200182016040528015610a4b57816020015b6060815260200190600190039081610a365790505b5092508067ffffffffffffffff811115610a6757610a67613492565b604051908082528060200260200182016040528015610a9a57816020015b6060815260200190600190039081610a855790505b50915060005b81811015610c4457600f8181548110610abb57610abb613deb565b90600052602060002090600202016000018054610ad790613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0390613e01565b8015610b505780601f10610b2557610100808354040283529160200191610b50565b820191906000526020600020905b815481529060010190602001808311610b3357829003601f168201915b5050505050848281518110610b6757610b67613deb565b6020026020010181905250600f8181548110610b8557610b85613deb565b90600052602060002090600202016001018054610ba190613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054610bcd90613e01565b8015610c1a5780601f10610bef57610100808354040283529160200191610c1a565b820191906000526020600020905b815481529060010190602001808311610bfd57829003601f168201915b5050505050838281518110610c3157610c31613deb565b6020908102919091010152600101610aa0565b50509091565b60065460405163152a902d60e11b815260048101849052602481018390526000918291620100009091046001600160a01b031690632a55205a906044016040805180830381865afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc79190613e3b565b915091505b9250929050565b6001600160a01b038516331480610cef5750610cef85336105eb565b610d615760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f766564000000000000000000000000000000000000606482015260840161087a565b610d6e8585858585612353565b5050505050565b6006546201000090046001600160a01b03163314610da657604051636447134960e01b815260040160405180910390fd5b600654610100900460ff1615610dcf576040516318ee562160e21b815260040160405180910390fd5b600f548114610df15760405163a9854bc960e01b815260040160405180910390fd5b60008167ffffffffffffffff811115610e0c57610e0c613492565b604051908082528060200260200182016040528015610e35578160200160208202803683370190505b50905060005b82811015610ec657806010858584818110610e5857610e58613deb565b9050602002013581548110610e6f57610e6f613deb565b90600052602060002090600402016002015414610e9f57604051633221911d60e21b815260040160405180910390fd5b6001828281518110610eb357610eb3613deb565b6020908102919091010152600101610e3b565b50610f2a84600660029054906101000a90046001600160a01b03168585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250604080516020810190915290815288935091506123539050565b50505050565b60608151835114610fa95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161087a565b6000835167ffffffffffffffff811115610fc557610fc5613492565b604051908082528060200260200182016040528015610fee578160200160208202803683370190505b50905060005b84518110156110665761103985828151811061101257611012613deb565b602002602001015185838151811061102c5761102c613deb565b6020026020010151610800565b82828151811061104b5761104b613deb565b602090810291909101015261105f81613e69565b9050610ff4565b509392505050565b6007546001600160a01b0316331461109957604051630b35571f60e21b815260040160405180910390fd5b42600954116110bb57604051630df9d0d560e31b815260040160405180910390fd5b6110ca878787878787876125c2565b50505050505050565b600654610100900460ff16156110fc576040516318ee562160e21b815260040160405180910390fd5b82811461111c5760405163a9854bc960e01b815260040160405180910390fd5b6006546201000090046001600160a01b0316331480159061113e5750600e5442105b15611175576040517fac3d4d3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b8281101561125c5783838281811061119357611193613deb565b90506020020135826111a59190613cea565b915060108686838181106111bb576111bb613deb565b90506020020135815481106111d2576111d2613deb565b9060005260206000209060040201600301548484838181106111f6576111f6613deb565b9050602002013561122b88888581811061121257611212613deb565b9050602002013560009081526005602052604090205490565b6112359190613cea565b111561125457604051632cdb04a160e21b815260040160405180910390fd5b600101611179565b5061126561072c565b61126f9082613cb1565b3410156112a8576040517f0772327b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113248686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a028281018201909352898252909350899250889182918501908490808284376000920182905250604080516020810190915290815292506126bb915050565b6008546040516001600160a01b03909116903480156108fc02916000818181858888f193505050501580156110ca573d6000803e3d6000fd5b60006010828154811061137257611372613deb565b9060005260206000209060040201600301549050919050565b6007546001600160a01b031633146113b657604051630b35571f60e21b815260040160405180910390fd5b6006546201000090046001600160a01b0316156113ff576040517f7735869100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080808080808080611414898b018b613e82565b600680547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038b1602179055969e50949c50929a50909850965094509250905061146f86868686868c876125c2565b50505050505050505050565b6114863383836128ad565b5050565b606080606080606080606080600060108054905090508067ffffffffffffffff8111156114b9576114b9613492565b6040519080825280602002602001820160405280156114e2578160200160208202803683370190505b5098508067ffffffffffffffff8111156114fe576114fe613492565b60405190808252806020026020018201604052801561153157816020015b606081526020019060019003908161151c5790505b5097508067ffffffffffffffff81111561154d5761154d613492565b60405190808252806020026020018201604052801561158057816020015b606081526020019060019003908161156b5790505b5096508067ffffffffffffffff81111561159c5761159c613492565b6040519080825280602002602001820160405280156115c5578160200160208202803683370190505b5095508067ffffffffffffffff8111156115e1576115e1613492565b60405190808252806020026020018201604052801561161457816020015b60608152602001906001900390816115ff5790505b5094508067ffffffffffffffff81111561163057611630613492565b60405190808252806020026020018201604052801561166357816020015b606081526020019060019003908161164e5790505b5093508067ffffffffffffffff81111561167f5761167f613492565b6040519080825280602002602001820160405280156116a8578160200160208202803683370190505b5092508067ffffffffffffffff8111156116c4576116c4613492565b6040519080825280602002602001820160405280156116ed578160200160208202803683370190505b50915060005b81811015611b4b57808a828151811061170e5761170e613deb565b6020026020010181815250506010818154811061172d5761172d613deb565b9060005260206000209060040201600001805461174990613e01565b80601f016020809104026020016040519081016040528092919081815260200182805461177590613e01565b80156117c25780601f10611797576101008083540402835291602001916117c2565b820191906000526020600020905b8154815290600101906020018083116117a557829003601f168201915b50505050508982815181106117d9576117d9613deb565b6020026020010181905250601081815481106117f7576117f7613deb565b9060005260206000209060040201600101805461181390613e01565b80601f016020809104026020016040519081016040528092919081815260200182805461183f90613e01565b801561188c5780601f106118615761010080835404028352916020019161188c565b820191906000526020600020905b81548152906001019060200180831161186f57829003601f168201915b50505050508882815181106118a3576118a3613deb565b6020026020010181905250601081815481106118c1576118c1613deb565b9060005260206000209060040201600201548782815181106118e5576118e5613deb565b602002602001018181525050600f6010828154811061190657611906613deb565b9060005260206000209060040201600201548154811061192857611928613deb565b9060005260206000209060020201600001805461194490613e01565b80601f016020809104026020016040519081016040528092919081815260200182805461197090613e01565b80156119bd5780601f10611992576101008083540402835291602001916119bd565b820191906000526020600020905b8154815290600101906020018083116119a057829003601f168201915b50505050508682815181106119d4576119d4613deb565b6020026020010181905250600f601082815481106119f4576119f4613deb565b90600052602060002090600402016002015481548110611a1657611a16613deb565b90600052602060002090600202016001018054611a3290613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5e90613e01565b8015611aab5780601f10611a8057610100808354040283529160200191611aab565b820191906000526020600020905b815481529060010190602001808311611a8e57829003601f168201915b5050505050858281518110611ac257611ac2613deb565b6020026020010181905250611ae38160009081526005602052604090205490565b848281518110611af557611af5613deb565b60200260200101818152505060108181548110611b1457611b14613deb565b906000526020600020906004020160030154838281518110611b3857611b38613deb565b60209081029190910101526001016116f3565b50509091929394959697565b6007546001600160a01b03163314611b8257604051630b35571f60e21b815260040160405180910390fd5b6009544210611ba457604051630df9d0d560e31b815260040160405180910390fd5b6006805461ff001916610100179055565b6001600160a01b038516331480611bd15750611bd185336105eb565b611c435760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f766564000000000000000000000000000000000000606482015260840161087a565b610d6e85858585856129a1565b6060806060806010805490508510611c7b576040516307ed98ed60e31b815260040160405180910390fd5b60108581548110611c8e57611c8e613deb565b90600052602060002090600402016000018054611caa90613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054611cd690613e01565b8015611d235780601f10611cf857610100808354040283529160200191611d23565b820191906000526020600020905b815481529060010190602001808311611d0657829003601f168201915b5050505050935060108581548110611d3d57611d3d613deb565b90600052602060002090600402016001018054611d5990613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8590613e01565b8015611dd25780601f10611da757610100808354040283529160200191611dd2565b820191906000526020600020905b815481529060010190602001808311611db557829003601f168201915b50505050509250600f60108681548110611dee57611dee613deb565b90600052602060002090600402016002015481548110611e1057611e10613deb565b90600052602060002090600202016000018054611e2c90613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5890613e01565b8015611ea55780601f10611e7a57610100808354040283529160200191611ea5565b820191906000526020600020905b815481529060010190602001808311611e8857829003601f168201915b50505050509150600f60108681548110611ec157611ec1613deb565b90600052602060002090600402016002015481548110611ee357611ee3613deb565b90600052602060002090600202016001018054611eff90613e01565b80601f0160208091040260200160405190810160405280929190818152602001828054611f2b90613e01565b8015611f785780601f10611f4d57610100808354040283529160200191611f78565b820191906000526020600020905b815481529060010190602001808311611f5b57829003601f168201915b505050505090509193509193565b6006546201000090046001600160a01b03163314611fb757604051636447134960e01b815260040160405180910390fd5b600654610100900460ff1615611fe0576040516318ee562160e21b815260040160405180910390fd5b600f5481146120025760405163a9854bc960e01b815260040160405180910390fd5b60008167ffffffffffffffff81111561201d5761201d613492565b604051908082528060200260200182016040528015612046578160200160208202803683370190505b50905060005b828110156121535780601085858481811061206957612069613deb565b905060200201358154811061208057612080613deb565b906000526020600020906004020160020154146120b057604051633221911d60e21b815260040160405180910390fd5b60108484838181106120c4576120c4613deb565b90506020020135815481106120db576120db613deb565b90600052602060002090600402016003015461210285858481811061121257611212613deb565b61210d906001613cea565b111561212c57604051632cdb04a160e21b815260040160405180910390fd5b600182828151811061214057612140613deb565b602090810291909101015260010161204c565b50610f2a848484808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250604080516020810190915290815287935091506126bb9050565b60006009544210156121df576040517f58fd8d1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a5442106121f7576001600d546107b39190613bab565b600954600a546122079190613bab565b6009546122149042613bab565b600d546122219190613cb1565b6107b39190613cc8565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061228e57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806108a857506108a882612b5e565b60606108a86001600160a01b0383166014612bac565b606060006122c083612d8d565b600101905060008167ffffffffffffffff8111156122e0576122e0613492565b6040519080825280601f01601f19166020018201604052801561230a576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461231457509392505050565b81518351146123b55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161087a565b6001600160a01b0384166124195760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161087a565b33612428818787878787612e6f565b60005b845181101561255457600085828151811061244857612448613deb565b60200260200101519050600085838151811061246657612466613deb565b60209081029190910181015160008481526002835260408082206001600160a01b038e1683529093529190912054909150818110156124fa5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161087a565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612539908490613cea565b925050819055505050508061254d90613e69565b905061242b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516125a4929190613eeb565b60405180910390a46125ba818787878787612e7d565b505050505050565b868610806125cf57508484115b806125d957508681105b806125e357504287105b806125ee5750600283105b15612625576040517f2156216000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009879055600a869055600b859055600c849055600d8390556006805460ff1916831515908117909155600e8290556040805189815260208101899052908101879052606081018690526080810185905260a081019190915260c081018290527f67d6b1cc23fa4bc51d9b54cd449808062dd794b2de35e59e14affb0abfda5b459060e00160405180910390a150505050505050565b6001600160a01b0384166127375760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161087a565b81518351146127995760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161087a565b336127a981600087878787612e6f565b60005b8451811015612845578381815181106127c7576127c7613deb565b6020026020010151600260008784815181106127e5576127e5613deb565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461282d9190613cea565b9091555081905061283d81613e69565b9150506127ac565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612896929190613eeb565b60405180910390a4610d6e81600087878787612e7d565b816001600160a01b0316836001600160a01b0316036129345760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161087a565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416612a055760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161087a565b336000612a1185613022565b90506000612a1e85613022565b9050612a2e838989858589612e6f565b60008681526002602090815260408083206001600160a01b038c16845290915290205485811015612ab45760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161087a565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612af3908490613cea565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612b53848a8a8a8a8a61306d565b505050505050505050565b60006001600160e01b0319821663152a902d60e11b14806108a857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146108a8565b60606000612bbb836002613cb1565b612bc6906002613cea565b67ffffffffffffffff811115612bde57612bde613492565b6040519080825280601f01601f191660200182016040528015612c08576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612c3f57612c3f613deb565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612c8a57612c8a613deb565b60200101906001600160f81b031916908160001a9053506000612cae846002613cb1565b612cb9906001613cea565b90505b6001811115612d3e577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612cfa57612cfa613deb565b1a60f81b828281518110612d1057612d10613deb565b60200101906001600160f81b031916908160001a90535060049490941c93612d3781613f10565b9050612cbc565b5083156109f05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161087a565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612dd6577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612e02576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612e2057662386f26fc10000830492506010015b6305f5e1008310612e38576305f5e100830492506008015b6127108310612e4c57612710830492506004015b60648310612e5e576064830492506002015b600a83106108a85760010192915050565b6125ba868686868686613169565b6001600160a01b0384163b156125ba5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612ec19089908990889088908890600401613f27565b6020604051808303816000875af1925050508015612efc575060408051601f3d908101601f19168201909252612ef991810190613f85565b60015b612fb157612f08613fa2565b806308c379a003612f415750612f1c613fbe565b80612f275750612f43565b8060405162461bcd60e51b815260040161087a91906133d7565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161087a565b6001600160e01b0319811663bc197c8160e01b146110ca5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161087a565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061305c5761305c613deb565b602090810291909101015292915050565b6001600160a01b0384163b156125ba5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906130b19089908990889088908890600401614048565b6020604051808303816000875af19250505080156130ec575060408051601f3d908101601f191682019092526130e991810190613f85565b60015b6130f857612f08613fa2565b6001600160e01b0319811663f23a6e6160e01b146110ca5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161087a565b6001600160a01b0385166131f05760005b83518110156131ee5782818151811061319557613195613deb565b6020026020010151600560008684815181106131b3576131b3613deb565b6020026020010151815260200190815260200160002060008282546131d89190613cea565b909155506131e7905081613e69565b905061317a565b505b6001600160a01b0384166125ba5760005b83518110156110ca57600084828151811061321e5761321e613deb565b60200260200101519050600084838151811061323c5761323c613deb565b60200260200101519050600060056000848152602001908152602001600020549050818110156132d45760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c79000000000000000000000000000000000000000000000000606482015260840161087a565b600092835260056020526040909220910390556132f081613e69565b9050613201565b6001600160a01b038116811461330c57600080fd5b50565b6000806040838503121561332257600080fd5b823561332d816132f7565b946020939093013593505050565b6001600160e01b03198116811461330c57600080fd5b60006020828403121561336357600080fd5b81356109f08161333b565b60006020828403121561338057600080fd5b5035919050565b60005b838110156133a257818101518382015260200161338a565b50506000910152565b600081518084526133c3816020860160208601613387565b601f01601f19169290920160200192915050565b6020815260006109f060208301846133ab565b600082825180855260208086019550808260051b84010181860160005b8481101561343557601f198684030189526134238383516133ab565b98840198925090830190600101613407565b5090979650505050505050565b60408152600061345560408301856133ea565b828103602084015261346781856133ea565b95945050505050565b6000806040838503121561348357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156134ce576134ce613492565b6040525050565b600067ffffffffffffffff8211156134ef576134ef613492565b5060051b60200190565b600082601f83011261350a57600080fd5b81356020613517826134d5565b60405161352482826134a8565b83815260059390931b850182019282810191508684111561354457600080fd5b8286015b8481101561355f5780358352918301918301613548565b509695505050505050565b600067ffffffffffffffff82111561358457613584613492565b50601f01601f191660200190565b600082601f8301126135a357600080fd5b81356135ae8161356a565b6040516135bb82826134a8565b8281528560208487010111156135d057600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080600060a0868803121561360657600080fd5b8535613611816132f7565b94506020860135613621816132f7565b9350604086013567ffffffffffffffff8082111561363e57600080fd5b61364a89838a016134f9565b9450606088013591508082111561366057600080fd5b61366c89838a016134f9565b9350608088013591508082111561368257600080fd5b5061368f88828901613592565b9150509295509295909350565b60008083601f8401126136ae57600080fd5b50813567ffffffffffffffff8111156136c657600080fd5b6020830191508360208260051b8501011115610ccc57600080fd5b6000806000604084860312156136f657600080fd5b8335613701816132f7565b9250602084013567ffffffffffffffff81111561371d57600080fd5b6137298682870161369c565b9497909650939450505050565b6000806040838503121561374957600080fd5b823567ffffffffffffffff8082111561376157600080fd5b818501915085601f83011261377557600080fd5b81356020613782826134d5565b60405161378f82826134a8565b83815260059390931b85018201928281019150898411156137af57600080fd5b948201945b838610156137d65785356137c7816132f7565b825294820194908201906137b4565b965050860135925050808211156137ec57600080fd5b506137f9858286016134f9565b9150509250929050565b600081518084526020808501945080840160005b8381101561383357815187529582019590820190600101613817565b509495945050505050565b6020815260006109f06020830184613803565b8035801515811461386157600080fd5b919050565b600080600080600080600060e0888a03121561388157600080fd5b87359650602088013595506040880135945060608801359350608088013592506138ad60a08901613851565b915060c0880135905092959891949750929550565b6000806000806000606086880312156138da57600080fd5b85356138e5816132f7565b9450602086013567ffffffffffffffff8082111561390257600080fd5b61390e89838a0161369c565b9096509450604088013591508082111561392757600080fd5b506139348882890161369c565b969995985093965092949392505050565b6000806020838503121561395857600080fd5b823567ffffffffffffffff8082111561397057600080fd5b818501915085601f83011261398457600080fd5b81358181111561399357600080fd5b8660208285010111156139a557600080fd5b60209290920196919550909350505050565b600080604083850312156139ca57600080fd5b82356139d5816132f7565b91506139e360208401613851565b90509250929050565b6000610100808352613a008184018c613803565b90508281036020840152613a14818b6133ea565b90508281036040840152613a28818a6133ea565b90508281036060840152613a3c8189613803565b90508281036080840152613a5081886133ea565b905082810360a0840152613a6481876133ea565b905082810360c0840152613a788186613803565b905082810360e0840152613a8c8185613803565b9b9a5050505050505050505050565b60008060408385031215613aae57600080fd5b8235613ab9816132f7565b91506020830135613ac9816132f7565b809150509250929050565b600080600080600060a08688031215613aec57600080fd5b8535613af7816132f7565b94506020860135613b07816132f7565b93506040860135925060608601359150608086013567ffffffffffffffff811115613b3157600080fd5b61368f88828901613592565b608081526000613b5060808301876133ab565b8281036020840152613b6281876133ab565b90508281036040840152613b7681866133ab565b90508281036060840152613b8a81856133ab565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108a8576108a8613b95565b600181815b80851115613bf9578160001904821115613bdf57613bdf613b95565b80851615613bec57918102915b93841c9390800290613bc3565b509250929050565b600082613c10575060016108a8565b81613c1d575060006108a8565b8160018114613c335760028114613c3d57613c59565b60019150506108a8565b60ff841115613c4e57613c4e613b95565b50506001821b6108a8565b5060208310610133831016604e8410600b8410161715613c7c575081810a6108a8565b613c868383613bbe565b8060001904821115613c9a57613c9a613b95565b029392505050565b60006109f060ff841683613c01565b80820281158282048414176108a8576108a8613b95565b600082613ce557634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156108a8576108a8613b95565b600060208284031215613d0f57600080fd5b815167ffffffffffffffff811115613d2657600080fd5b8201601f81018413613d3757600080fd5b8051613d428161356a565b604051613d4f82826134a8565b828152866020848601011115613d6457600080fd5b613d75836020830160208701613387565b9695505050505050565b60008451613d91818460208901613387565b845190830190613da5818360208901613387565b7f2f0000000000000000000000000000000000000000000000000000000000000091019081528351613dde816001840160208801613387565b0160010195945050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680613e1557607f821691505b602082108103613e3557634e487b7160e01b600052602260045260246000fd5b50919050565b60008060408385031215613e4e57600080fd5b8251613e59816132f7565b6020939093015192949293505050565b600060018201613e7b57613e7b613b95565b5060010190565b600080600080600080600080610100898b031215613e9f57600080fd5b8835613eaa816132f7565b9750613eb860208a01613851565b979a9799505050506040860135956060810135956080820135955060a0820135945060c0820135935060e0909101359150565b604081526000613efe6040830185613803565b82810360208401526134678185613803565b600081613f1f57613f1f613b95565b506000190190565b60006001600160a01b03808816835280871660208401525060a06040830152613f5360a0830186613803565b8281036060840152613f658186613803565b90508281036080840152613f7981856133ab565b98975050505050505050565b600060208284031215613f9757600080fd5b81516109f08161333b565b600060033d1115613fbb5760046000803e5060005160e01c5b90565b600060443d1015613fcc5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613ffc57505050505090565b82850191508151818111156140145750505050505090565b843d870101602082850101111561402e5750505050505090565b61403d602082860101876134a8565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613b8a60a08301846133ab56fea264697066735822122060e38bba184d550a1bd7226928625f6fc3b5ef6ca9896958e8b11a80f863e94064736f6c63430008130033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "maxSupply(uint256)": {
        "returns": {
          "_maxSupply": "the max supply of the token"
        }
      },
      "mintTraits(address,uint256[],uint256[])": {
        "params": {
          "_recipient": "the address to receive the trait tokens",
          "_traitAmounts": "the amounts of each token ID to buy",
          "_traitTokenIds": "the trait token IDs to buy"
        }
      },
      "mintTraitsWhitelistOrProof(address,uint256[])": {
        "params": {
          "_recipient": "address to receive the minted traits",
          "_traitTokenIds": "trait token IDs to mint"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setup(bytes)": {
        "params": {
          "_data": "bytes containing setup data for initializing contract"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "the interface ID to check"
        },
        "returns": {
          "_0": "bool True if the interface is supported, otherwise False"
        }
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "trait(uint256)": {
        "params": {
          "_tokenId": "token ID to get info about"
        },
        "returns": {
          "_traitName": "human readable trait name",
          "_traitTypeName": "human readable trait type name",
          "_traitTypeValue": "trait type value used in the generative script",
          "_traitValue": "trait type value used in the generative script"
        }
      },
      "traitPrice()": {
        "returns": {
          "_0": "the current trait price in ether"
        }
      },
      "traitPriceStep()": {
        "returns": {
          "_0": "the current price step"
        }
      },
      "traitTypes()": {
        "returns": {
          "_traitTypeNames": "human readable trait type names",
          "_traitTypeValues": "trait type values used in the generative script"
        }
      },
      "traits()": {
        "returns": {
          "_traitMaxSupplys": "max supply of each trait",
          "_traitNames": "human readable trait names",
          "_traitTokenIds": "token IDs of the traits",
          "_traitTotalSupplys": "total supply of each trait",
          "_traitTypeIndexes": "trait type index each trait belongs to",
          "_traitTypeNames": "human readable trait type names",
          "_traitTypeValues": "trait type values used in the generative script",
          "_traitValues": "trait type values used in the generative script"
        }
      },
      "transferTraitsToMintArtwork(address,uint256[])": {
        "params": {
          "_caller": "the address creating the artwork",
          "_traitTokenIds": "the trait token IDs used to create the artwork"
        }
      },
      "updateAuction(uint256,uint256,uint256,uint256,uint256,bool,uint256)": {
        "params": {
          "_auctionEndPrice": "trait price the auction ends at",
          "_auctionEndTime": "timestamp the auction ends at",
          "_auctionExponential": "true indicates auction curve is exponential, otherwise linear",
          "_auctionPriceSteps": "number of different prices auction steps through",
          "_auctionStartPrice": "trait price the auction begins at",
          "_auctionStartTime": "timestamp the auction begins at",
          "_traitsSaleStartTime": "timestamp at which traits can be bought individually"
        }
      },
      "uri(uint256)": {
        "params": {
          "_tokenId": "the token ID to get the URI for"
        },
        "returns": {
          "_0": "string the token specific URI"
        }
      }
    },
    "stateVariables": {
      "auctionStartTime": {
        "return": "uint256 the timestamp the auction starts",
        "returns": {
          "_0": "uint256 the timestamp the auction starts"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "auctionStartTime()": {
        "notice": "Returns the auction start timestamp"
      },
      "cancel()": {
        "notice": "Cancels a project and its auction Contracts should revert if this is called and the auction has already started."
      },
      "maxSupply(uint256)": {
        "notice": "Returns the max supply of the specified token ID"
      },
      "mintTraits(address,uint256[],uint256[])": {
        "notice": "Allows a user to mint any number of traits and amounts using ether"
      },
      "mintTraitsWhitelistOrProof(address,uint256[])": {
        "notice": "Mints traits for artist proof and for whitelisted mints"
      },
      "setup(bytes)": {
        "notice": "Sets up the contract"
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns whether the specified interface ID is supported by the contract"
      },
      "trait(uint256)": {
        "notice": "Returns info about an individual trait"
      },
      "traitPrice()": {
        "notice": "Returns the current trait price"
      },
      "traitPriceStep()": {
        "notice": "Returns which price step the auction is currently on"
      },
      "traitTypes()": {
        "notice": "Returns the trait types"
      },
      "traits()": {
        "notice": "Returns info about all traits"
      },
      "transferTraitsToMintArtwork(address,uint256[])": {
        "notice": "Called by the Artwork contract to transfer traits from the caller to the Artwork contract to create a new Artwork token"
      },
      "updateAuction(uint256,uint256,uint256,uint256,uint256,bool,uint256)": {
        "notice": "Updates the schedule of the dutch auction, can only be called if the dutch auction hasn't started yet, and can only update the auction to a later time, not sooner"
      },
      "uri(uint256)": {
        "notice": "Returns the URI of the specified token ID"
      }
    },
    "notice": "Implements ERC-1155 standard for trait tokens, and provides Dutch Auction functionality for initial trait sales",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2980,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)2977_storage"
      },
      {
        "astId": 2985,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)2977_storage)"
      },
      {
        "astId": 240,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 246,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 248,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_uri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1610,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5869,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionExponential",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 5871,
        "contract": "contracts/Traits.sol:Traits",
        "label": "cancelled",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 5877,
        "contract": "contracts/Traits.sol:Traits",
        "label": "artwork",
        "offset": 2,
        "slot": "6",
        "type": "t_contract(IArtwork)7355"
      },
      {
        "astId": 5880,
        "contract": "contracts/Traits.sol:Traits",
        "label": "projectRegistry",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IProjectRegistry)7465"
      },
      {
        "astId": 5882,
        "contract": "contracts/Traits.sol:Traits",
        "label": "primarySalesReceiver",
        "offset": 0,
        "slot": "8",
        "type": "t_address_payable"
      },
      {
        "astId": 5884,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionStartTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5886,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionEndTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5888,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionStartPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5890,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionEndPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5892,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionPriceSteps",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5894,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traitsSaleStartTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5898,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_traitTypes",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_struct(TraitType)7493_storage)dyn_storage"
      },
      {
        "astId": 5902,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_traits",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_struct(Trait)7502_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Trait)7502_storage)dyn_storage": {
        "base": "t_struct(Trait)7502_storage",
        "encoding": "dynamic_array",
        "label": "struct ITraits.Trait[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TraitType)7493_storage)dyn_storage": {
        "base": "t_struct(TraitType)7493_storage",
        "encoding": "dynamic_array",
        "label": "struct ITraits.TraitType[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IArtwork)7355": {
        "encoding": "inplace",
        "label": "contract IArtwork",
        "numberOfBytes": "20"
      },
      "t_contract(IProjectRegistry)7465": {
        "encoding": "inplace",
        "label": "contract IProjectRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)2977_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)2977_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)2977_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 2974,
            "contract": "contracts/Traits.sol:Traits",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2976,
            "contract": "contracts/Traits.sol:Traits",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Trait)7502_storage": {
        "encoding": "inplace",
        "label": "struct ITraits.Trait",
        "members": [
          {
            "astId": 7495,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7497,
            "contract": "contracts/Traits.sol:Traits",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7499,
            "contract": "contracts/Traits.sol:Traits",
            "label": "typeIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7501,
            "contract": "contracts/Traits.sol:Traits",
            "label": "maxSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TraitType)7493_storage": {
        "encoding": "inplace",
        "label": "struct ITraits.TraitType",
        "members": [
          {
            "astId": 7490,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7492,
            "contract": "contracts/Traits.sol:Traits",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}