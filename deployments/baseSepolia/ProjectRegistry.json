{
  "address": "0xB0CbaDc6D7183Bc13f9A306e7CC927f098522729",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdmin",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "BaseURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "artwork",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "traits",
          "type": "address"
        }
      ],
      "name": "ProjectRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        }
      ],
      "name": "addAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "admins",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_calldatas",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "address",
          "name": "artwork",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "traits",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_artwork",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_artworkData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_traits",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_traitsData",
          "type": "bytes"
        }
      ],
      "name": "registerProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        }
      ],
      "name": "removeAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "updateBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x09a664d861c0769ffe4f683a436d8ea3ee9b78162d249302ad6f5af9fef20228",
  "receipt": {
    "to": null,
    "from": "0x6bd62FeB486Bf699Ac04eD6DC09dE36D11720509",
    "contractAddress": "0xB0CbaDc6D7183Bc13f9A306e7CC927f098522729",
    "transactionIndex": 3,
    "gasUsed": "1126413",
    "logsBloom": "0x
    "blockHash": "0xdbd5685d8270e9f294a74a54a7b92d26baa8dee65aa7727f2eb58f2b9614f7ab",
    "transactionHash": "0x09a664d861c0769ffe4f683a436d8ea3ee9b78162d249302ad6f5af9fef20228",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 7648521,
        "transactionHash": "0x09a664d861c0769ffe4f683a436d8ea3ee9b78162d249302ad6f5af9fef20228",
        "address": "0xB0CbaDc6D7183Bc13f9A306e7CC927f098522729",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006bd62feb486bf699ac04ed6dc09de36d11720509"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdbd5685d8270e9f294a74a54a7b92d26baa8dee65aa7727f2eb58f2b9614f7ab"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 7648521,
        "transactionHash": "0x09a664d861c0769ffe4f683a436d8ea3ee9b78162d249302ad6f5af9fef20228",
        "address": "0xB0CbaDc6D7183Bc13f9A306e7CC927f098522729",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000006bd62feb486bf699ac04ed6dc09de36d11720509",
          "0x0000000000000000000000006bd62feb486bf699ac04ed6dc09de36d11720509"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xdbd5685d8270e9f294a74a54a7b92d26baa8dee65aa7727f2eb58f2b9614f7ab"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 7648521,
        "transactionHash": "0x09a664d861c0769ffe4f683a436d8ea3ee9b78162d249302ad6f5af9fef20228",
        "address": "0xB0CbaDc6D7183Bc13f9A306e7CC927f098522729",
        "topics": [
          "0x44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e339",
          "0x0000000000000000000000006bd62feb486bf699ac04ed6dc09de36d11720509"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xdbd5685d8270e9f294a74a54a7b92d26baa8dee65aa7727f2eb58f2b9614f7ab"
      }
    ],
    "blockNumber": 7648521,
    "cumulativeGasUsed": "1213432",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6bd62FeB486Bf699Ac04eD6DC09dE36D11720509",
    [
      "0x6bd62FeB486Bf699Ac04eD6DC09dE36D11720509"
    ],
    "https://base-sepolia-api.intrinsic.art/"
  ],
  "numDeployments": 1,
  "solcInputHash": "fe94db9a202475b075801c7069468270",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdmin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"artwork\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traits\",\"type\":\"address\"}],\"name\":\"ProjectRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"}],\"name\":\"addAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"artwork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"traits\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artwork\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_artworkData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_traitsData\",\"type\":\"bytes\"}],\"name\":\"registerProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"}],\"name\":\"removeAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addAdmins(address[])\":{\"params\":{\"_admins\":\"the addresses to make admins\"}},\"execute(address[],uint256[],bytes[])\":{\"params\":{\"_calldatas\":\"array of transaction calldata bytes\",\"_targets\":\"the array of addresses to call\",\"_values\":\"array of Ether amounts for each transaction\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"registerProject(address,bytes,address,bytes)\":{\"params\":{\"_artwork\":\"the address of the Artwork contract\",\"_artworkData\":\"data to pass to setup function of the Artwork contract\",\"_traits\":\"the address of the Traits contract\",\"_traitsData\":\"data to pass to setup function of the Traits contract\"}},\"removeAdmins(address[])\":{\"params\":{\"_admins\":\"the addresses remove from being admins\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"updateBaseURI(string)\":{\"params\":{\"_baseURI\":\"the updated base URI string\"}}},\"stateVariables\":{\"baseURI\":{\"return\":\"the base URI string\",\"returns\":{\"_0\":\"the base URI string\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAdmins(address[])\":{\"notice\":\"Adds multiple addresses to be made admins\"},\"baseURI()\":{\"notice\":\"Returns the base URI string\"},\"execute(address[],uint256[],bytes[])\":{\"notice\":\"Executes an arbitrary number of external function calls\"},\"registerProject(address,bytes,address,bytes)\":{\"notice\":\"Registers a project by storing the Artwork and Traits contract addresses, and calls setup on both contracts with the corresponding bytes data\"},\"removeAdmins(address[])\":{\"notice\":\"Removes multiple addresses from being admins\"},\"updateBaseURI(string)\":{\"notice\":\"Updates the URI base string\"}},\"notice\":\"Provides functionality for registering the Traits and Artwork contract addresses for each project\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProjectRegistry.sol\":\"ProjectRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c879356795cc563440408404a52eaf672d4547949e0a5920fb17642303d9e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ProjectRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {IProjectRegistry} from \\\"./interfaces/IProjectRegistry.sol\\\";\\nimport {IArtwork} from \\\"./interfaces/IArtwork.sol\\\";\\nimport {ITraits} from \\\"./interfaces/ITraits.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * Provides functionality for registering the Traits and Artwork\\n * contract addresses for each project\\n */\\ncontract ProjectRegistry is IProjectRegistry, Ownable2Step {\\n    uint256 public projectCount;\\n    string public baseURI;\\n    mapping(address => bool) public admins;\\n    mapping(uint256 => Project) public projects;\\n\\n    modifier onlyAdmin() {\\n        if (!admins[msg.sender]) revert OnlyAdmin();\\n        _;\\n    }\\n\\n    constructor(address _owner, address[] memory _admins, string memory _baseURI) {\\n        _transferOwnership(_owner);\\n        _addAdmins(_admins);\\n        baseURI = _baseURI;\\n    }\\n\\n    /** @inheritdoc IProjectRegistry*/\\n    function registerProject(\\n        address _artwork,\\n        bytes calldata _artworkData,\\n        address _traits,\\n        bytes calldata _traitsData\\n    ) external onlyAdmin {\\n        if (_artwork == address(0) || _traits == address(0))\\n            revert InvalidAddress();\\n        projectCount++;\\n\\n        projects[projectCount].artwork = _artwork;\\n        projects[projectCount].traits = _traits;\\n\\n        IArtwork(_artwork).setup(_artworkData);\\n        ITraits(_traits).setup(_traitsData);\\n\\n        emit ProjectRegistered(projectCount, _artwork, _traits);\\n    }\\n\\n    /** @inheritdoc IProjectRegistry*/\\n    function execute(\\n        address[] calldata _targets,\\n        uint256[] calldata _values,\\n        bytes[] calldata _calldatas\\n    ) external onlyAdmin {\\n        if (\\n            _targets.length != _values.length ||\\n            _targets.length != _calldatas.length\\n        ) revert InvalidArrayLengths();\\n\\n        string memory errorMessage = \\\"ProjectRegistry: call reverted\\\";\\n\\n        for (uint256 i; i < _targets.length; ) {\\n            (bool success, bytes memory returndata) = _targets[i].call{\\n                value: _values[i]\\n            }(_calldatas[i]);\\n\\n            Address.verifyCallResult(success, returndata, errorMessage);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /** @inheritdoc IProjectRegistry*/\\n    function addAdmins(address[] memory _admins) external onlyOwner {\\n        _addAdmins(_admins);\\n    }\\n\\n    /** @inheritdoc IProjectRegistry*/\\n    function removeAdmins(address[] memory _admins) external onlyOwner {\\n        _removeAdmins(_admins);\\n    }\\n\\n    /** @inheritdoc IProjectRegistry*/\\n    function updateBaseURI(string memory _baseURI) external onlyAdmin {\\n        baseURI = _baseURI;\\n        emit BaseURIUpdated(_baseURI);\\n    }\\n\\n    /**\\n     * Adds multiple addresses to be made admins\\n     *\\n     * @param _admins the addresses to make admins\\n     */\\n    function _addAdmins(address[] memory _admins) private {\\n        for (uint256 i; i < _admins.length; ) {\\n            admins[_admins[i]] = true;\\n\\n            emit AdminAdded(_admins[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Removes multiple addresses from being admins\\n     *\\n     * @param _admins the addresses remove from being admins\\n     */\\n    function _removeAdmins(address[] memory _admins) private {\\n        for (uint256 i; i < _admins.length; ) {\\n            admins[_admins[i]] = false;\\n\\n            emit AdminRemoved(_admins[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc1a1e34108a05c999894ed6e91be47f5a4a2f6616855c3c5cfb9bf712abe957\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IArtwork.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\ninterface IArtwork is IERC2981, IERC721 {\\n    struct ArtworkData {\\n        bytes32 hash;\\n        uint256[] traitTokenIds;\\n    }\\n\\n    struct StringStorageData {\\n      uint8 stringStorageSlot;\\n      address stringStorageAddress;\\n    }\\n\\n    error OnlyProjectRegistry();\\n    error ProofAlreadyMinted();\\n    error TraitsAlreadySet();\\n    error TraitsNotSet();\\n    error OnlyArtist();\\n    error OnlyArtistOrProjectRegistry();\\n    error OnlyArtworkOwner();\\n    error AlreadySetup();\\n    error WhitelistStartTime();\\n    error NoWhitelistMints();\\n    error AuctionIsLive();\\n    error HashAlreadyUsed();\\n\\n    event ArtworkMinted(\\n        uint256 indexed artworkTokenId,\\n        uint256[] traitTokenIds,\\n        bytes32 hash,\\n        address indexed creator\\n    );\\n    event TraitsReclaimed(\\n        uint256 indexed artworkTokenId,\\n        address indexed caller\\n    );\\n    event WhitelistUpdated(\\n        uint256 whitelistStartTime,\\n        address[] whitelistAddresses,\\n        uint256[] whitelistAmounts\\n    );\\n    event WhitelistArtworkMinted(uint256 indexed tokenId, address indexed caller);\\n    event ProofArtworkMinted(uint256 indexed tokenId, address indexed caller);\\n\\n    /**\\n     * Sets up the contract\\n     *\\n     * @param _data bytes containing address of the traits contract and whitelist data\\n     */\\n    function setup(bytes calldata _data) external;\\n\\n    /**\\n     * Updates the whitelisted addresses and amounts they can claim\\n     *\\n     * @param _whitelistStartTime timestamp at which whitelisted users can start minting\\n     * @param _whitelistAddresses addresses to be whitelisted\\n     * @param _whitelistAmounts amount of whitelist mints for each address\\n     */\\n    function updateWhitelist(\\n        uint256 _whitelistStartTime,\\n        address[] memory _whitelistAddresses,\\n        uint256[] memory _whitelistAmounts\\n    ) external;\\n\\n    /**\\n     * Mints a new artwork with the specified trait token IDs\\n     * The caller must own the specified traits\\n     *\\n     * @param _traitTokenIds the trait token IDs to create the artwork with\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     * @return _artworkTokenId the token ID of the newly minted artwork\\n     */\\n    function mintArtwork(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external returns (uint256 _artworkTokenId);\\n\\n    /**\\n     * Allows the artist or project registry to mint the proof mint\\n     *\\n     * @param _traitTokenIds token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintArtworkProof(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external;\\n\\n    /**\\n     * Allows an address on the whitelist to mint an artwork for free\\n     *\\n     * @param _traitTokenIds token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintArtworkWhitelist(\\n        uint256[] calldata _traitTokenIds,\\n        uint256 _saltNonce\\n    ) external;\\n\\n    /**\\n     * Mints traits with specified amounts, and mints an artwork in a single transaction\\n     * ETH amount needed for trait mints must be sent\\n     *\\n     * @param _traitTokenIdsToBuy token IDs of the traits to buy\\n     * @param _traitAmountsToBuy amounts of each trait to buy\\n     * @param _traitTokenIdsToCreateArtwork token IDs of the traits to use to create the artwork\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\n     */\\n    function mintTraitsAndArtwork(\\n        uint256[] calldata _traitTokenIdsToBuy,\\n        uint256[] calldata _traitAmountsToBuy,\\n        uint256[] calldata _traitTokenIdsToCreateArtwork,\\n        uint256 _saltNonce\\n    ) external payable;\\n\\n    /**\\n     * Reclaims the traits the specified artwork token into the traits its composed of\\n     * The artwork token is burned, and the token ID will never be reused\\n     * The traits are transferred to the caller's address\\n     *\\n     * @param _artworkTokenId the token ID of the artwork being reclaimed\\n     */\\n    function reclaimTraits(uint256 _artworkTokenId) external;\\n\\n    /**\\n     * Returns the URI of the specified token ID\\n     *\\n     * @param _tokenId token ID to get URI for\\n     * @return string the token URI\\n     */\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    /**\\n     * Returns how many more whitelist mints the specified address has\\n     *\\n     * @return uint256 the number of whitelist mints remaining\\n     */\\n    function whitelistMintsRemaining(\\n        address _user\\n    ) external view returns (uint256);\\n\\n    /**\\n     * Returns info about the specified artwork token\\n     *\\n     * @param _artworkTokenId token ID of the artwork\\n     * @return _traitTokenIds the token IDs of the traits the artwork contains\\n     * @return _traitNames the human readable trait names contained in the artwork\\n     * @return _traitValues the trait values used by the generative script\\n     * @return _traitTypeNames the human readable trait type names\\n     * @return _traitTypeValues the trait type values used by the generative script\\n     * @return _hash the artwork hash\\n     */\\n    function artwork(\\n        uint256 _artworkTokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory _traitTokenIds,\\n            string[] memory _traitNames,\\n            string[] memory _traitValues,\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues,\\n            bytes32 _hash\\n        );\\n\\n    /**\\n     * Returns a string containing the project metadata in JSON format\\n     *\\n     * @return string the project metadata in JSON format\\n     */\\n    function metadataJSON() external view returns (string memory);\\n\\n    /**\\n     * Returns the string that contains the generative art javascript\\n     *\\n     * @return string the generative art javascript\\n     */\\n    function script() external view returns (string memory);\\n\\n    /**\\n     * Returns whether the specified hash has been used to mint an artwork\\n     *\\n     * @param _hash the artwork seed hash\\n     * @return bool whether the hash has been used\\n     */\\n    function isHashUsed(bytes32 _hash) external view returns (bool);\\n\\n    /**\\n     * Returns whether the specified interface ID is supported by the contract\\n     *\\n     * @param interfaceId the interface ID to check\\n     * @return bool True if the interface is supported, otherwise False\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7a0f502bdf1d8d4dea904b7a88a513550c2d538bcfe9c2f710648ca5500d158b\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IProjectRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\ninterface IProjectRegistry {\\n    struct Project {\\n        address artwork;\\n        address traits;\\n    }\\n\\n    error OnlyAdmin();\\n    error InvalidAddress();\\n    error InvalidArrayLengths();\\n\\n    event BaseURIUpdated(string baseURI);\\n    event ProjectRegistered(\\n        uint256 indexed projectId,\\n        address indexed artwork,\\n        address indexed traits\\n    );\\n    event AdminAdded(address indexed account);\\n    event AdminRemoved(address indexed account);\\n\\n    /**\\n     * Updates the URI base string\\n     *\\n     * @param _baseURI the updated base URI string\\n     */\\n    function updateBaseURI(string memory _baseURI) external;\\n\\n    /**\\n     * Registers a project by storing the Artwork and Traits contract addresses,\\n     * and calls setup on both contracts with the corresponding bytes data\\n     *\\n     * @param _artwork the address of the Artwork contract\\n     * @param _artworkData data to pass to setup function of the Artwork contract\\n     * @param _traits the address of the Traits contract\\n     * @param _traitsData data to pass to setup function of the Traits contract\\n     */\\n    function registerProject(\\n        address _artwork,\\n        bytes calldata _artworkData,\\n        address _traits,\\n        bytes calldata _traitsData\\n    ) external;\\n\\n    /**\\n     * Executes an arbitrary number of external function calls\\n     *\\n     * @param _targets the array of addresses to call\\n     * @param _values array of Ether amounts for each transaction\\n     * @param _calldatas array of transaction calldata bytes\\n     */\\n    function execute(\\n        address[] calldata _targets,\\n        uint256[] calldata _values,\\n        bytes[] calldata _calldatas\\n    ) external;\\n\\n    /**\\n     * Adds multiple addresses to be made admins\\n     *\\n     * @param _admins the addresses to make admins\\n     */\\n    function addAdmins(address[] memory _admins) external;\\n\\n    /**\\n     * Removes multiple addresses from being admins\\n     *\\n     * @param _admins the addresses remove from being admins\\n     */\\n    function removeAdmins(address[] memory _admins) external;\\n\\n    /**\\n     * Returns the base URI string\\n     *\\n     * @return the base URI string\\n     */\\n    function baseURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x64f8e5cbbe9b44f3c787c487b902cc7deda4b9c734ce7e49a50e4c8c6ff4e0a7\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity =0.8.19;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface ITraits is IERC1155 {\\n    struct TraitType {\\n        string name;\\n        string value;\\n    }\\n\\n    struct Trait {\\n        string name;\\n        string value;\\n        uint256 typeIndex;\\n        uint256 maxSupply;\\n    }\\n\\n    struct TraitsSetup {\\n        string[] traitTypeNames;\\n        string[] traitTypeValues;\\n        string[] traitNames;\\n        string[] traitValues;\\n        uint256[] traitTypeIndexes;\\n        uint256[] traitMaxSupplys;\\n    }\\n\\n    event AuctionUpdated(\\n        uint256 auctionStartTime,\\n        uint256 auctionEndTime,\\n        uint256 auctionStartPrice,\\n        uint256 auctionEndPrice,\\n        uint256 auctionPriceSteps,\\n        bool auctionExponential,\\n        uint256 traitsSaleStartTime\\n    );\\n\\n    error OnlyArtwork();\\n    error OnlyProjectRegistry();\\n    error AlreadySetup();\\n    error AuctionIsLive();\\n    error InvalidAuction();\\n    error MaxSupply();\\n    error InvalidEthAmount();\\n    error InvalidTraits();\\n    error AuctionNotLive();\\n    error InvalidTokenId();\\n    error TraitsSaleStartTime();\\n\\n    /**\\n     * Sets the address of the Artwork contract and the auction configuration\\n     *\\n     * @param _data bytes data containt the artwork contract address and auction data\\n     */\\n    function setup(bytes calldata _data) external;\\n\\n    /**\\n     * Updates the schedule of the dutch auction, can only\\n     * be called if the dutch auction hasn't started yet, and\\n     * can only update the auction to a later time, not sooner\\n     *\\n     * @param _auctionStartTime timestamp the auction begins at\\n     * @param _auctionEndTime timestamp the auction ends at\\n     * @param _auctionStartPrice trait price the auction begins at\\n     * @param _auctionEndPrice trait price the auction ends at\\n     * @param _auctionPriceSteps number of different prices auction steps through\\n     * @param _auctionExponential true indicates auction curve is exponential, otherwise linear\\n     * @param _traitsSaleStartTime timestamp at which traits can be bought individually\\n     */\\n    function updateAuction(\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionPriceSteps,\\n        bool _auctionExponential,\\n        uint256 _traitsSaleStartTime\\n    ) external;\\n\\n    /**\\n     * Allows a user to mint any number of traits and amounts using ether\\n     *\\n     * @param _recipient the address to receive the trait tokens\\n     * @param _traitTokenIds the trait token IDs to buy\\n     * @param _traitAmounts the amounts of each token ID to buy\\n     */\\n    function mintTraits(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds,\\n        uint256[] calldata _traitAmounts\\n    ) external payable;\\n\\n    /**\\n     * Mints traits for artist proof and for whitelisted mints\\n     *\\n     * @param _recipient address to receive the minted traits\\n     * @param _traitTokenIds trait token IDs to mint\\n     */\\n    function mintTraitsWhitelistOrProof(\\n        address _recipient,\\n        uint256[] calldata _traitTokenIds\\n    ) external;\\n\\n    /**\\n     * Called by the Artwork contract to transfer traits from the caller to the Artwork\\n     * contract to create a new Artwork token\\n     *\\n     * @param _caller the address creating the artwork\\n     * @param _traitTokenIds the trait token IDs used to create the artwork\\n     */\\n    function transferTraitsToMintArtwork(\\n        address _caller,\\n        uint256[] calldata _traitTokenIds\\n    ) external;\\n\\n    /**\\n     * Returns the trait types\\n     *\\n     * @return _traitTypeNames human readable trait type names\\n     * @return _traitTypeValues trait type values used in the generative script\\n     */\\n    function traitTypes()\\n        external\\n        view\\n        returns (\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues\\n        );\\n\\n    /**\\n     * Returns info about an individual trait\\n     *\\n     * @param _tokenId token ID to get info about\\n     * @return _traitName human readable trait name\\n     * @return _traitValue trait type value used in the generative script\\n     * @return _traitTypeName human readable trait type name\\n     * @return _traitTypeValue trait type value used in the generative script\\n     */\\n    function trait(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory _traitName,\\n            string memory _traitValue,\\n            string memory _traitTypeName,\\n            string memory _traitTypeValue\\n        );\\n\\n    /**\\n     * Returns info about all traits\\n     *\\n     * @return _traitTokenIds token IDs of the traits\\n     * @return _traitNames human readable trait names\\n     * @return _traitValues trait type values used in the generative script\\n     * @return _traitTypeIndexes trait type index each trait belongs to\\n     * @return _traitTypeNames human readable trait type names\\n     * @return _traitTypeValues trait type values used in the generative script\\n     * @return _traitTotalSupplys total supply of each trait\\n     * @return _traitMaxSupplys max supply of each trait\\n     */\\n    function traits()\\n        external\\n        view\\n        returns (\\n            uint256[] memory _traitTokenIds,\\n            string[] memory _traitNames,\\n            string[] memory _traitValues,\\n            uint256[] memory _traitTypeIndexes,\\n            string[] memory _traitTypeNames,\\n            string[] memory _traitTypeValues,\\n            uint256[] memory _traitTotalSupplys,\\n            uint256[] memory _traitMaxSupplys\\n        );\\n\\n    /**\\n     * Returns which price step the auction is currently on\\n     *\\n     * @return the current price step\\n     */\\n    function traitPriceStep() external view returns (uint256);\\n\\n    /**\\n     * Returns the current trait price\\n     *\\n     * @return _price the current trait price in ether\\n     */\\n    function traitPrice() external view returns (uint256 _price);\\n\\n    /**\\n     * Returns the max supply of the specified token ID\\n     *\\n     * @return _maxSupply the max supply of the token\\n     */\\n    function maxSupply(\\n        uint256 _tokenId\\n    ) external view returns (uint256 _maxSupply);\\n\\n    /**\\n     * Returns the URI of the specified token ID\\n     *\\n     * @param _tokenId the token ID to get the URI for\\n     * @return string the token specific URI\\n     */\\n    function uri(uint256 _tokenId) external view returns (string memory);\\n\\n    /**\\n     * Returns the auction start timestamp\\n     *\\n     * @return uint256 the timestamp the auction starts\\n     */\\n    function auctionStartTime()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * Returns whether the specified interface ID is supported by the contract\\n     *\\n     * @param interfaceId the interface ID to check\\n     * @return bool True if the interface is supported, otherwise False\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x708b255e793e303bcfd272c158a5ac86fffc32758b71b780278a3b663c5fbfe3\",\"license\":\"GNU GPLv3\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620015eb380380620015eb833981016040819052620000349162000294565b6200003f336200006d565b6200004a836200006d565b62000055826200008b565b600362000063828262000418565b50505050620004fa565b600180546001600160a01b0319169055620000888162000151565b50565b60005b81518110156200014d57600160046000848481518110620000b357620000b3620004e4565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550818181518110620001075762000107620004e4565b60200260200101516001600160a01b03167f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33960405160405180910390a26001016200008e565b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001b957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001ff57620001ff620001be565b604052919050565b600082601f8301126200021957600080fd5b81516001600160401b03811115620002355762000235620001be565b60206200024b601f8301601f19168201620001d4565b82815285828487010111156200026057600080fd5b60005b838110156200028057858101830151828201840152820162000263565b506000928101909101919091529392505050565b600080600060608486031215620002aa57600080fd5b620002b584620001a1565b602085810151919450906001600160401b0380821115620002d557600080fd5b818701915087601f830112620002ea57600080fd5b815181811115620002ff57620002ff620001be565b8060051b62000310858201620001d4565b918252838101850191858101908b8411156200032b57600080fd5b948601945b8386101562000354576200034486620001a1565b8252948601949086019062000330565b60408b01519098509550505050808311156200036f57600080fd5b50506200037f8682870162000207565b9150509250925092565b600181811c908216806200039e57607f821691505b602082108103620003bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200041357600081815260208120601f850160051c81016020861015620003ee5750805b601f850160051c820191505b818110156200040f57828155600101620003fa565b5050505b505050565b81516001600160401b03811115620004345762000434620001be565b6200044c8162000445845462000389565b84620003c5565b602080601f8311600181146200048457600084156200046b5750858301515b600019600386901b1c1916600185901b1785556200040f565b600085815260208120601f198616915b82811015620004b55788860151825594840194600190910190840162000494565b5085821015620004d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6110e1806200050a6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063a516a5bf11610066578063a516a5bf14610217578063d19d47521461022a578063e30c39781461023d578063f2fde38b1461024e57600080fd5b80638da5cb5b146101cc578063931688cb146101f15780639c54df641461020457600080fd5b8063429b62e5116100c8578063429b62e5146101745780636c0360eb146101a7578063715018a6146101bc57806379ba5097146101c457600080fd5b8063107046bd146100ef57806336fbad2614610148578063377e11e01461015f575b600080fd5b6101236100fd366004610ace565b600560205260009081526040902080546001909101546001600160a01b03918216911682565b604080516001600160a01b039384168152929091166020830152015b60405180910390f35b61015160025481565b60405190815260200161013f565b61017261016d366004610b4a565b610261565b005b610197610182366004610bf7565b60046020526000908152604090205460ff1681565b604051901515815260200161013f565b6101af610275565b60405161013f9190610c12565b610172610303565b610172610317565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161013f565b6101726101ff366004610c60565b6103a7565b610172610212366004610b4a565b61041e565b610172610225366004610d41565b61042f565b610172610238366004610e1d565b6105cc565b6001546001600160a01b03166101d9565b61017261025c366004610bf7565b6107b1565b61026961082f565b61027281610889565b50565b6003805461028290610e9f565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90610e9f565b80156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b61030b61082f565b6103156000610947565b565b60015433906001600160a01b0316811461039e5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e6572000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61027281610947565b3360009081526004602052604090205460ff166103d757604051634755657960e01b815260040160405180910390fd5b60036103e38282610f28565b507f6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad816040516104139190610c12565b60405180910390a150565b61042661082f565b6102728161096d565b3360009081526004602052604090205460ff1661045f57604051634755657960e01b815260040160405180910390fd5b848314158061046e5750848114155b156104a5576040517fa9854bc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051808201909152601e81527f50726f6a65637452656769737472793a2063616c6c2072657665727465640000602082015260005b868110156105c2576000808989848181106104f9576104f9610fe8565b905060200201602081019061050e9190610bf7565b6001600160a01b031688888581811061052957610529610fe8565b9050602002013587878681811061054257610542610fe8565b90506020028101906105549190610ffe565b604051610562929190611045565b60006040518083038185875af1925050503d806000811461059f576040519150601f19603f3d011682016040523d82523d6000602084013e6105a4565b606091505b50915091506105b4828286610a27565b5082600101925050506104dc565b5050505050505050565b3360009081526004602052604090205460ff166105fc57604051634755657960e01b815260040160405180910390fd5b6001600160a01b038616158061061957506001600160a01b038316155b15610650576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805490600061066083611055565b909155505060028054600090815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038c8116918217909355945484529282902060010180549093169087161790915551639ded06df60e01b8152639ded06df906106dc908890889060040161107c565b600060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b5050604051639ded06df60e01b81526001600160a01b0386169250639ded06df915061073c908590859060040161107c565b600060405180830381600087803b15801561075657600080fd5b505af115801561076a573d6000803e3d6000fd5b50506002546040516001600160a01b0380881694508a1692507f7024d444707bcd36a8b0a076e120d984b0f8431dc1aa0513f728193d34a630dd90600090a4505050505050565b6107b961082f565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff1990911681179091556107f76000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000546001600160a01b031633146103155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610395565b60005b8151811015610943576000600460008484815181106108ad576108ad610fe8565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508181815181106108fe576108fe610fe8565b60200260200101516001600160a01b03167fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f60405160405180910390a260010161088c565b5050565b6001805473ffffffffffffffffffffffffffffffffffffffff1916905561027281610a47565b60005b81518110156109435760016004600084848151811061099157610991610fe8565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508181815181106109e2576109e2610fe8565b60200260200101516001600160a01b03167f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33960405160405180910390a2600101610970565b60608315610a36575081610a40565b610a408383610aa4565b9392505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b815115610ab45781518083602001fd5b8060405162461bcd60e51b81526004016103959190610c12565b600060208284031215610ae057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610b2657610b26610ae7565b604052919050565b80356001600160a01b0381168114610b4557600080fd5b919050565b60006020808385031215610b5d57600080fd5b823567ffffffffffffffff80821115610b7557600080fd5b818501915085601f830112610b8957600080fd5b813581811115610b9b57610b9b610ae7565b8060051b9150610bac848301610afd565b8181529183018401918481019088841115610bc657600080fd5b938501935b83851015610beb57610bdc85610b2e565b82529385019390850190610bcb565b98975050505050505050565b600060208284031215610c0957600080fd5b610a4082610b2e565b600060208083528351808285015260005b81811015610c3f57858101830151858201604001528201610c23565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020808385031215610c7357600080fd5b823567ffffffffffffffff80821115610c8b57600080fd5b818501915085601f830112610c9f57600080fd5b813581811115610cb157610cb1610ae7565b610cc3601f8201601f19168501610afd565b91508082528684828501011115610cd957600080fd5b8084840185840137600090820190930192909252509392505050565b60008083601f840112610d0757600080fd5b50813567ffffffffffffffff811115610d1f57600080fd5b6020830191508360208260051b8501011115610d3a57600080fd5b9250929050565b60008060008060008060608789031215610d5a57600080fd5b863567ffffffffffffffff80821115610d7257600080fd5b610d7e8a838b01610cf5565b90985096506020890135915080821115610d9757600080fd5b610da38a838b01610cf5565b90965094506040890135915080821115610dbc57600080fd5b50610dc989828a01610cf5565b979a9699509497509295939492505050565b60008083601f840112610ded57600080fd5b50813567ffffffffffffffff811115610e0557600080fd5b602083019150836020828501011115610d3a57600080fd5b60008060008060008060808789031215610e3657600080fd5b610e3f87610b2e565b9550602087013567ffffffffffffffff80821115610e5c57600080fd5b610e688a838b01610ddb565b9097509550859150610e7c60408a01610b2e565b94506060890135915080821115610e9257600080fd5b50610dc989828a01610ddb565b600181811c90821680610eb357607f821691505b602082108103610ed357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610f2357600081815260208120601f850160051c81016020861015610f005750805b601f850160051c820191505b81811015610f1f57828155600101610f0c565b5050505b505050565b815167ffffffffffffffff811115610f4257610f42610ae7565b610f5681610f508454610e9f565b84610ed9565b602080601f831160018114610f8b5760008415610f735750858301515b600019600386901b1c1916600185901b178555610f1f565b600085815260208120601f198616915b82811015610fba57888601518255948401946001909101908401610f9b565b5085821015610fd85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261101557600080fd5b83018035915067ffffffffffffffff82111561103057600080fd5b602001915036819003821315610d3a57600080fd5b8183823760009101908152919050565b60006001820161107557634e487b7160e01b600052601160045260246000fd5b5060010190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220e527711a49f228bcd0c4a8c567fc14caa0d8fddf67871f38b2033263f7eb01c764736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addAdmins(address[])": {
        "params": {
          "_admins": "the addresses to make admins"
        }
      },
      "execute(address[],uint256[],bytes[])": {
        "params": {
          "_calldatas": "array of transaction calldata bytes",
          "_targets": "the array of addresses to call",
          "_values": "array of Ether amounts for each transaction"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "registerProject(address,bytes,address,bytes)": {
        "params": {
          "_artwork": "the address of the Artwork contract",
          "_artworkData": "data to pass to setup function of the Artwork contract",
          "_traits": "the address of the Traits contract",
          "_traitsData": "data to pass to setup function of the Traits contract"
        }
      },
      "removeAdmins(address[])": {
        "params": {
          "_admins": "the addresses remove from being admins"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "updateBaseURI(string)": {
        "params": {
          "_baseURI": "the updated base URI string"
        }
      }
    },
    "stateVariables": {
      "baseURI": {
        "return": "the base URI string",
        "returns": {
          "_0": "the base URI string"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAdmins(address[])": {
        "notice": "Adds multiple addresses to be made admins"
      },
      "baseURI()": {
        "notice": "Returns the base URI string"
      },
      "execute(address[],uint256[],bytes[])": {
        "notice": "Executes an arbitrary number of external function calls"
      },
      "registerProject(address,bytes,address,bytes)": {
        "notice": "Registers a project by storing the Artwork and Traits contract addresses, and calls setup on both contracts with the corresponding bytes data"
      },
      "removeAdmins(address[])": {
        "notice": "Removes multiple addresses from being admins"
      },
      "updateBaseURI(string)": {
        "notice": "Updates the URI base string"
      }
    },
    "notice": "Provides functionality for registering the Traits and Artwork contract addresses for each project",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ProjectRegistry.sol:ProjectRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/ProjectRegistry.sol:ProjectRegistry",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6371,
        "contract": "contracts/ProjectRegistry.sol:ProjectRegistry",
        "label": "projectCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6373,
        "contract": "contracts/ProjectRegistry.sol:ProjectRegistry",
        "label": "baseURI",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 6377,
        "contract": "contracts/ProjectRegistry.sol:ProjectRegistry",
        "label": "admins",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6382,
        "contract": "contracts/ProjectRegistry.sol:ProjectRegistry",
        "label": "projects",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Project)8296_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Project)8296_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IProjectRegistry.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)8296_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Project)8296_storage": {
        "encoding": "inplace",
        "label": "struct IProjectRegistry.Project",
        "members": [
          {
            "astId": 8293,
            "contract": "contracts/ProjectRegistry.sol:ProjectRegistry",
            "label": "artwork",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8295,
            "contract": "contracts/ProjectRegistry.sol:ProjectRegistry",
            "label": "traits",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}