{
  "language": "Solidity",
  "sources": {
    "contracts/AMM.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./interfaces/IERC1155MintBurn.sol\";\r\nimport \"./interfaces/IAMM.sol\";\r\n\r\ncontract AMM is IAMM, Initializable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // todo: Change this interface\r\n    IERC1155MintBurn public element;\r\n    address public studio;\r\n    uint256 public totalFeeNumerator;\r\n    uint256 public artistFeeNumerator;\r\n    uint256 constant FEE_DENOMINATOR = 1_000_000_000;\r\n    uint256 public platformRevenue;\r\n\r\n    // tokenID => BondingCurve\r\n    mapping(uint256 => BondingCurve) public tokenIdToBondingCurve;\r\n    mapping(address => uint256) public artistRevenues;\r\n\r\n    modifier onlyStudio() {\r\n        require(\r\n            msg.sender == studio,\r\n            \"Only the Studio contract can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address _element,\r\n        address _studio,\r\n        uint256 _totalFeeNumerator,\r\n        uint256 _artistFeeNumerator\r\n    ) external initializer {\r\n        element = IERC1155MintBurn(_element);\r\n        studio = _studio;\r\n        totalFeeNumerator = _totalFeeNumerator;\r\n        artistFeeNumerator = _artistFeeNumerator;\r\n    }\r\n\r\n    function createBondingCurves(\r\n        uint256[] calldata _tokenIds,\r\n        uint256[] calldata _constantAs,\r\n        uint256[] calldata _constantBs,\r\n        address _artistAddress,\r\n        address _erc20Token,\r\n        uint256 _startTime\r\n    ) external onlyStudio {\r\n        require(\r\n            _tokenIds.length == _constantAs.length &&\r\n                _tokenIds.length == _constantBs.length,\r\n            \"Invalid array lengths\"\r\n        );\r\n        for (uint256 i; i < _tokenIds.length; i++) {\r\n            createBondingCurve(\r\n                _tokenIds[i],\r\n                _constantAs[i],\r\n                _constantBs[i],\r\n                _artistAddress,\r\n                _erc20Token,\r\n                _startTime\r\n            );\r\n        }\r\n    }\r\n\r\n    function createBondingCurve(\r\n        uint256 _tokenId,\r\n        uint256 _constantA,\r\n        uint256 _constantB,\r\n        address _artistAddress,\r\n        address _erc20Token,\r\n        uint256 _startTime\r\n    ) public onlyStudio {\r\n        require(\r\n            _artistAddress != address(0),\r\n            \"Artist address cannot be address zero\"\r\n        );\r\n        require(\r\n            tokenIdToBondingCurve[_tokenId].artistAddress == address(0),\r\n            \"Bonding curve already initialized\"\r\n        );\r\n\r\n        tokenIdToBondingCurve[_tokenId] = BondingCurve(\r\n            _constantA,\r\n            _constantB,\r\n            0,\r\n            _artistAddress,\r\n            _erc20Token,\r\n            _startTime\r\n        );\r\n\r\n        emit BondingCurveCreated(\r\n            _tokenId,\r\n            _constantA,\r\n            _constantB,\r\n            _artistAddress,\r\n            _erc20Token,\r\n            _startTime\r\n        );\r\n    }\r\n\r\n    function buyElements(\r\n        uint256 _tokenId,\r\n        uint256 _erc1155Quantity,\r\n        uint256 _maxERC20ToSpend,\r\n        address _spender,\r\n        address _recipient\r\n    ) public onlyStudio {\r\n        (\r\n            uint256 erc20TotalAmount,\r\n            uint256 erc20TotalFee,\r\n            uint256 erc20ArtistFee\r\n        ) = getBuyERC20AmountWithFee(_tokenId, _erc1155Quantity);\r\n\r\n        require(erc20TotalAmount <= _maxERC20ToSpend, \"Slippage too high\");\r\n\r\n        IERC20(tokenIdToBondingCurve[_tokenId].erc20Token).safeTransferFrom(\r\n            _spender,\r\n            address(this),\r\n            erc20TotalAmount\r\n        );\r\n        // platformRevenue += erc20TotalFee - erc20ArtistFee;\r\n        // artistRevenues[\r\n        //     tokenIdToBondingCurve[_tokenId].artistAddress\r\n        // ] += erc20ArtistFee;\r\n        tokenIdToBondingCurve[_tokenId].reserves += (erc20TotalAmount -\r\n            erc20TotalFee);\r\n\r\n        element.mint(_recipient, _tokenId, _erc1155Quantity);\r\n\r\n        // emit ElementsBought(\r\n        //     _bondingCurveCreator,\r\n        //     _tokenId,\r\n        //     _erc1155Quantity,\r\n        //     erc20TotalAmount,\r\n        //     erc20TotalFee,\r\n        //     erc20ArtistFee,\r\n        //     _recipient\r\n        // );\r\n    }\r\n\r\n    function batchBuyElements(\r\n        uint256[] memory _tokenIds,\r\n        uint256[] memory _erc1155Quantities,\r\n        uint256[] memory _maxERC20sToSpend,\r\n        address _spender,\r\n        address _recipient\r\n    ) external onlyStudio {\r\n        require(\r\n            _tokenIds.length == _erc1155Quantities.length &&\r\n                _tokenIds.length == _maxERC20sToSpend.length,\r\n            \"Invalid array lengths\"\r\n        );\r\n\r\n        for (uint256 i; i < _tokenIds.length; i++) {\r\n            buyElements(\r\n                _tokenIds[i],\r\n                _erc1155Quantities[i],\r\n                _maxERC20sToSpend[i],\r\n                _spender,\r\n                _recipient\r\n            );\r\n        }\r\n    }\r\n\r\n    function sellElements(\r\n        uint256 _tokenId,\r\n        uint256 _erc1155Quantity,\r\n        uint256 _minERC20ToReceive,\r\n        address _erc20Recipient\r\n    ) public onlyStudio {\r\n        require(\r\n            block.timestamp >= tokenIdToBondingCurve[_tokenId].startTime,\r\n            \"AMM has not started yet\"\r\n        );\r\n        uint256 erc20TotalAmount = getSellERC20Amount(\r\n            _tokenId,\r\n            _erc1155Quantity\r\n        );\r\n        require(erc20TotalAmount >= _minERC20ToReceive, \"Slippage too high\");\r\n\r\n        tokenIdToBondingCurve[_tokenId].reserves -= erc20TotalAmount;\r\n\r\n        element.burn(msg.sender, _tokenId, _erc1155Quantity);\r\n\r\n        IERC20(tokenIdToBondingCurve[_tokenId].erc20Token).safeTransfer(\r\n            _erc20Recipient,\r\n            erc20TotalAmount\r\n        );\r\n\r\n        // emit ElementsSold(\r\n        //     _bondingCurveCreator,\r\n        //     _tokenId,\r\n        //     _erc1155Quantity,\r\n        //     erc20TotalAmount,\r\n        //     _recipient\r\n        // );\r\n    }\r\n\r\n    function batchSellElements(\r\n        uint256[] memory _tokenIds,\r\n        uint256[] memory _erc1155Quantities,\r\n        uint256[] memory _minERC20sToReceive,\r\n        address _erc20Recipient\r\n    ) external onlyStudio {\r\n        require(\r\n            _tokenIds.length == _erc1155Quantities.length &&\r\n                _tokenIds.length == _minERC20sToReceive.length,\r\n            \"Invalid array lengths\"\r\n        );\r\n\r\n        for (uint256 i; i < _tokenIds.length; i++) {\r\n            sellElements(\r\n                _tokenIds[i],\r\n                _erc1155Quantities[i],\r\n                _minERC20sToReceive[i],\r\n                _erc20Recipient\r\n            );\r\n        }\r\n    }\r\n\r\n    // function claimPlatformRevenue(address _recipient) external onlyOwner {\r\n    //     uint256 _platformRevenue = platformRevenue;\r\n    //     platformRevenue = 0;\r\n\r\n    //     weth.transfer(_recipient, _platformRevenue);\r\n\r\n    //     emit PlatformRevenueClaimed(_recipient, _platformRevenue);\r\n    // }\r\n\r\n    // function claimArtistRevenue(address _recipient) external {\r\n    //     require(\r\n    //         artistRevenues[msg.sender] > 0,\r\n    //         \"You do not have an available balance\"\r\n    //     );\r\n\r\n    //     uint256 claimedRevenue = artistRevenues[msg.sender];\r\n    //     artistRevenues[msg.sender] = 0;\r\n\r\n    //     weth.safeTransfer(_recipient, claimedRevenue);\r\n\r\n    //     emit ArtistRevenueClaimed(_recipient, claimedRevenue);\r\n    // }\r\n\r\n    function getBuyERC20AmountWithFee(\r\n        uint256 _tokenId,\r\n        uint256 _erc1155Quantity\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 erc20TotalAmount,\r\n            uint256 erc20TotalFee,\r\n            uint256 erc20ArtistFee\r\n        )\r\n    {\r\n        uint256 nominalERC20Amount = getBuyERC20Amount(\r\n            _tokenId,\r\n            _erc1155Quantity\r\n        );\r\n        erc20TotalFee =\r\n            (nominalERC20Amount * totalFeeNumerator) /\r\n            FEE_DENOMINATOR;\r\n        erc20ArtistFee =\r\n            (nominalERC20Amount * artistFeeNumerator) /\r\n            FEE_DENOMINATOR;\r\n        erc20TotalAmount = nominalERC20Amount + erc20TotalFee;\r\n    }\r\n\r\n    function getBuyERC20Amount(uint256 _tokenId, uint256 _erc1155Quantity)\r\n        public\r\n        view\r\n        returns (uint256 erc20Amount)\r\n    {\r\n        require(\r\n            block.timestamp >= tokenIdToBondingCurve[_tokenId].startTime,\r\n            \"AMM has not started yet\"\r\n        );\r\n        require(\r\n            tokenIdToBondingCurve[_tokenId].artistAddress != address(0),\r\n            \"Bonding curve not initialized\"\r\n        );\r\n\r\n        // reserves = (a * supply) + (b * supply)^2\r\n        uint256 newElementSupply = element.totalSupply(_tokenId) +\r\n            _erc1155Quantity;\r\n\r\n        erc20Amount =\r\n            ((tokenIdToBondingCurve[_tokenId].constantA * newElementSupply) +\r\n                (tokenIdToBondingCurve[_tokenId].constantB *\r\n                    newElementSupply) **\r\n                    2) -\r\n            tokenIdToBondingCurve[_tokenId].reserves;\r\n    }\r\n\r\n    function getSellERC20Amount(uint256 _tokenId, uint256 _erc1155Quantity)\r\n        public\r\n        view\r\n        returns (uint256 erc20Amount)\r\n    {\r\n        require(\r\n            block.timestamp >= tokenIdToBondingCurve[_tokenId].startTime,\r\n            \"AMM has not started yet\"\r\n        );\r\n        require(\r\n            tokenIdToBondingCurve[_tokenId].artistAddress != address(0),\r\n            \"Bonding curve not initialized\"\r\n        );\r\n        require(\r\n            element.totalSupply(_tokenId) >= _erc1155Quantity,\r\n            \"Quantity greater than total supply\"\r\n        );\r\n        // reserves = (a * supply) + (b * supply)^2\r\n        uint256 newElementSupply = element.totalSupply(_tokenId) -\r\n            _erc1155Quantity;\r\n\r\n        erc20Amount =\r\n            tokenIdToBondingCurve[_tokenId].reserves -\r\n            ((tokenIdToBondingCurve[_tokenId].constantA * newElementSupply) +\r\n                (tokenIdToBondingCurve[_tokenId].constantB *\r\n                    newElementSupply) **\r\n                    2);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IERC1155MintBurn.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC1155MintBurn {\r\n    function mint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burn(\r\n        address account,\r\n        uint256 id,\r\n        uint256 value\r\n    ) external;\r\n\r\n    function totalSupply(uint256 id) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IAMM.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAMM {\r\n    struct BondingCurve {\r\n        uint256 constantA;\r\n        uint256 constantB;\r\n        uint256 reserves;\r\n        address artistAddress;\r\n        address erc20Token;\r\n        uint256 startTime;\r\n    }\r\n\r\n    event BondingCurveCreated(\r\n        uint256 indexed tokenId,\r\n        uint256 constantA,\r\n        uint256 constantB,\r\n        address indexed artistAddress,\r\n        address erc20Token,\r\n        uint256 startTime\r\n    );\r\n\r\n    event ElementsBought(\r\n        address indexed bondingCurveCreator,\r\n        uint256 indexed tokenId,\r\n        uint256 erc1155Quantity,\r\n        uint256 erc20TotalSpent,\r\n        uint256 erc20TotalFee,\r\n        uint256 erc20ArtistFee,\r\n        address indexed recipient\r\n    );\r\n\r\n    event ElementsSold(\r\n        address indexed bondingCurveCreator,\r\n        uint256 indexed tokenId,\r\n        uint256 erc1155Quantity,\r\n        uint256 erc20Received,\r\n        address indexed recipient\r\n    );\r\n\r\n    event PlatformRevenueClaimed(\r\n        address indexed recipient,\r\n        uint256 revenueClaimed\r\n    );\r\n\r\n    event ArtistRevenueClaimed(\r\n        address indexed recipient,\r\n        uint256 revenueClaimed\r\n    );\r\n\r\n    function initialize(\r\n        address _element,\r\n        address _studio,\r\n        uint256 _totalFeeNumerator,\r\n        uint256 _artistFeeNumerator\r\n    ) external;\r\n\r\n    function createBondingCurves(\r\n        uint256[] calldata _tokenIds,\r\n        uint256[] calldata _constantAs,\r\n        uint256[] calldata _constantBs,\r\n        address _artistAddress,\r\n        address _erc20Token,\r\n        uint256 _startTime\r\n    ) external;\r\n\r\n    function createBondingCurve(\r\n        uint256 _tokenId,\r\n        uint256 _constantA,\r\n        uint256 _constantB,\r\n        address _artistAddress,\r\n        address _erc20Token,\r\n        uint256 _startTime\r\n    ) external;\r\n\r\n    function buyElements(\r\n        uint256 _tokenId,\r\n        uint256 _erc1155Quantity,\r\n        uint256 _maxERC20ToSpend,\r\n        address _spender,\r\n        address _recipient\r\n    ) external;\r\n\r\n    function batchBuyElements(\r\n        uint256[] memory _tokenIds,\r\n        uint256[] memory _erc1155Quantities,\r\n        uint256[] memory _maxERC20sToSpend,\r\n        address _spender,\r\n        address _recipient\r\n    ) external;\r\n\r\n    function sellElements(\r\n        uint256 _tokenId,\r\n        uint256 _erc1155Quantity,\r\n        uint256 _minERC20ToReceive,\r\n        address _erc20Recipient\r\n    ) external;\r\n\r\n    function batchSellElements(\r\n        uint256[] memory _tokenIds,\r\n        uint256[] memory _erc1155Quantities,\r\n        uint256[] memory _minERC20sToReceive,\r\n        address _erc20Recipient\r\n    ) external;\r\n\r\n    function getBuyERC20AmountWithFee(\r\n        uint256 _tokenId,\r\n        uint256 _erc1155Quantity\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 erc20TotalAmount,\r\n            uint256 erc20TotalFee,\r\n            uint256 erc20ArtistFee\r\n        );\r\n\r\n    function getBuyERC20Amount(uint256 _tokenId, uint256 _erc1155Quantity)\r\n        external\r\n        view\r\n        returns (uint256 erc20Amount);\r\n    \r\n\r\n    function getSellERC20Amount(uint256 _tokenId, uint256 _erc1155Quantity)\r\n        external\r\n        view\r\n        returns (uint256 erc20Amount);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Studio.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"./interfaces/IStudio.sol\";\r\nimport \"./Canvas.sol\";\r\nimport \"./DutchAuction.sol\";\r\nimport \"./Element.sol\";\r\nimport \"./AMM.sol\";\r\n\r\ncontract Studio is IStudio, Initializable, ERC1155Holder {\r\n    // todo: convert these to interfaces\r\n    Canvas public canvas;\r\n    DutchAuction public dutchAuction;\r\n    Element public element;\r\n    AMM public amm;\r\n\r\n    mapping(uint256 => ProjectData) public projects;\r\n    mapping(uint256 => CanvasData) public canvases;\r\n    mapping(address => uint256) public userNonces;\r\n\r\n    modifier onlyArtist(uint256 projectId) {\r\n        require(\r\n            msg.sender == projects[projectId].artistAddress,\r\n            \"You are not the project's artist\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /////////// Project Functions /////////////\r\n    function initialize(\r\n        address _canvas,\r\n        address _dutchAuction,\r\n        address _element,\r\n        address _amm\r\n    ) external initializer {\r\n        canvas = Canvas(_canvas);\r\n        dutchAuction = DutchAuction(_dutchAuction);\r\n        element = Element(_element);\r\n        amm = AMM(_amm);\r\n    }\r\n\r\n    function createProject(\r\n        CreateProjectData memory _createProjectData,\r\n        IDutchAuction.Auction memory _createAuction,\r\n        CreateAMM memory _createAMM\r\n    ) public returns (uint256 projectId, uint256[][] memory elementTokenIds) {\r\n        projectId = canvas.createProject(\r\n            address(this),\r\n            address(dutchAuction),\r\n            _createProjectData.maxInvocations\r\n        );\r\n\r\n        _updateProjectData(projectId, _createProjectData);\r\n\r\n        dutchAuction.addAuction(projectId, _createAuction);\r\n\r\n        elementTokenIds = _createElementsAndAMMs(\r\n            projectId,\r\n            _createProjectData.artistAddress,\r\n            _createProjectData.featureLabels,\r\n            _createAMM\r\n        );\r\n\r\n        emit ProjectCreated(projectId);\r\n    }\r\n\r\n    function updateScript(uint256 _projectId, uint256 _scriptIndex, string calldata _script) public {\r\n        require(\r\n            msg.sender == projects[_projectId].artistAddress,\r\n            \"Only the artist can call this function\"\r\n        );\r\n\r\n        projects[_projectId].scripts[_scriptIndex] = (_script);\r\n    }\r\n\r\n    function buyElements(\r\n        uint256[] memory _elementTokenIds,\r\n        uint256[] memory _elementAmounts,\r\n        uint256[] memory _maxERC20sToSpend\r\n    ) public {\r\n        amm.batchBuyElements(\r\n            _elementTokenIds,\r\n            _elementAmounts,\r\n            _maxERC20sToSpend,\r\n            msg.sender,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function buyCanvases(uint256 _projectId, uint256 _quantity)\r\n        public\r\n        returns (uint256[] memory canvasIds)\r\n    {\r\n        canvasIds = dutchAuction.buyCanvases(\r\n            _projectId,\r\n            _quantity,\r\n            msg.sender,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function wrap(uint256 _canvasId, uint256[] memory _elementIndexes) public {\r\n        require(\r\n            msg.sender == canvas.ownerOf(_canvasId),\r\n            \"You are not the owner of this canvas\"\r\n        );\r\n        require(!canvases[_canvasId].wrapped, \"Canvas is already wrapped\");\r\n        require(\r\n            _elementIndexes.length ==\r\n                projects[getProjectIdFromCanvasId(_canvasId)]\r\n                    .featureCategoryLabels\r\n                    .length,\r\n            \"Incorrect elements array length\"\r\n        );\r\n\r\n        bytes32 newHash = keccak256(\r\n            abi.encodePacked(msg.sender, userNonces[msg.sender])\r\n        );\r\n\r\n        canvases[_canvasId].hash = newHash;\r\n\r\n        uint256[] memory elementTokenIds = new uint256[](\r\n            _elementIndexes.length\r\n        );\r\n\r\n        for (uint256 i; i < _elementIndexes.length; i++) {\r\n            elementTokenIds[i] = projects[getProjectIdFromCanvasId(_canvasId)]\r\n                .featureTokenIds[i][_elementIndexes[i]];\r\n\r\n            element.safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                elementTokenIds[i],\r\n                1,\r\n                \"\"\r\n            );\r\n        }\r\n\r\n        canvases[_canvasId].wrapped = true;\r\n        canvases[_canvasId].wrappedFeatureTokenIds = elementTokenIds;\r\n        userNonces[msg.sender]++;\r\n\r\n        emit CanvasWrapped(_canvasId, msg.sender, elementTokenIds);\r\n    }\r\n\r\n    function unwrap(uint256 _canvasId) public {\r\n        require(\r\n            msg.sender == canvas.ownerOf(_canvasId),\r\n            \"You are not the owner of this canvas\"\r\n        );\r\n        require(canvases[_canvasId].wrapped, \"Canvas is not wrapped\");\r\n\r\n        canvases[_canvasId].hash = 0;\r\n        canvases[_canvasId].wrapped = false;\r\n\r\n        uint256 projectId = getProjectIdFromCanvasId(_canvasId);\r\n\r\n        for (\r\n            uint256 i;\r\n            i < projects[projectId].featureCategoryLabels.length;\r\n            i++\r\n        ) {\r\n            uint256 elementTokenId = canvases[_canvasId].wrappedFeatureTokenIds[\r\n                i\r\n            ];\r\n            canvases[_canvasId].wrappedFeatureTokenIds[i] = 0;\r\n            element.safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                elementTokenId,\r\n                1,\r\n                \"\"\r\n            );\r\n        }\r\n\r\n        emit CanvasUnwrapped(_canvasId, msg.sender);\r\n    }\r\n\r\n    function buyElementsAndWrap(\r\n        uint256[] memory _elementTokenIdsToBuy,\r\n        uint256[] memory _elementAmountsToBuy,\r\n        uint256[] memory _maxERC20ToSpend,\r\n        uint256[] memory _elementIndexesToWrap,\r\n        uint256 _canvasId\r\n    ) public {\r\n        buyElements(\r\n            _elementTokenIdsToBuy,\r\n            _elementAmountsToBuy,\r\n            _maxERC20ToSpend\r\n        );\r\n        wrap(_canvasId, _elementIndexesToWrap);\r\n    }\r\n\r\n    function buyCanvasAndElementsAndWrap(\r\n        uint256 _projectId,\r\n        uint256[] memory _elementTokenIdsToBuy,\r\n        uint256[] memory _elementAmountsToBuy,\r\n        uint256[] memory _maxERC20ToSpend,\r\n        uint256[] memory _elementIndexesToWrap\r\n    ) public {\r\n        uint256[] memory canvasIds = buyCanvases(_projectId, 1);\r\n        buyElements(\r\n            _elementTokenIdsToBuy,\r\n            _elementAmountsToBuy,\r\n            _maxERC20ToSpend\r\n        );\r\n        wrap(canvasIds[0], _elementIndexesToWrap);\r\n    }\r\n\r\n    function _updateProjectData(\r\n        uint256 projectId,\r\n        CreateProjectData memory _createProjectData\r\n    ) private {\r\n        require(\r\n            _createProjectData.featureCategoryLabels.length ==\r\n                _createProjectData.featureLabels.length,\r\n            \"Invalid feature and feature category array lengths\"\r\n        );\r\n\r\n        projects[projectId].name = _createProjectData.name;\r\n        projects[projectId].description = _createProjectData.description;\r\n        projects[projectId].artistAddress = _createProjectData.artistAddress;\r\n        projects[projectId].artistName = _createProjectData.artistName;\r\n        projects[projectId].website = _createProjectData.website;\r\n        projects[projectId].license = _createProjectData.license;\r\n        projects[projectId].baseURI = _createProjectData.baseURI;\r\n        projects[projectId].scriptJSON = _createProjectData.scriptJSON;\r\n        projects[projectId].scriptCount = _createProjectData.scriptCount;\r\n        projects[projectId].name = _createProjectData.name;\r\n        projects[projectId].featureCategoryLabels = _createProjectData\r\n            .featureCategoryLabels;\r\n    }\r\n\r\n    function _createElementsAndAMMs(\r\n        uint256 _projectId,\r\n        address _artistAddress,\r\n        string[][] memory _features,\r\n        CreateAMM memory _createAMM\r\n    ) private returns (uint256[][] memory elementTokenIds) {\r\n        elementTokenIds = new uint256[][](_features.length);\r\n        // Loop through categories\r\n        for (uint256 i; i < _features.length; i++) {\r\n            elementTokenIds[i] = element.createFeatures(\r\n                _features[i],\r\n                address(amm)\r\n            );\r\n            amm.createBondingCurves(\r\n                elementTokenIds[i],\r\n                _createAMM.constantA[i],\r\n                _createAMM.constantB[i],\r\n                _artistAddress,\r\n                _createAMM.erc20Token,\r\n                _createAMM.startTime\r\n            );\r\n        }\r\n\r\n        projects[_projectId].featureTokenIds = elementTokenIds;\r\n    }\r\n\r\n    /////// View Functions ///////////\r\n\r\n    function getCanvasWrappedTokenIds(uint256 _canvasId)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return canvases[_canvasId].wrappedFeatureTokenIds;\r\n    }\r\n\r\n    function getCanvasWrappedFeatureLabels(uint256 _canvasId)\r\n        public\r\n        view\r\n        returns (string[] memory featureLabels)\r\n    {\r\n        featureLabels = new string[](\r\n            canvases[_canvasId].wrappedFeatureTokenIds.length\r\n        );\r\n\r\n        for (uint256 i; i < featureLabels.length; i++) {\r\n            featureLabels[i] = element.getElementLabel(\r\n                canvases[_canvasId].wrappedFeatureTokenIds[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function getUserNonce(address _user) public view returns (uint256) {\r\n        return userNonces[_user];\r\n    }\r\n\r\n    // @notice Function for returning a project's feature prices\r\n    function getProjectFeaturePrices(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (uint256[][] memory featurePrices)\r\n    {\r\n        uint256 featureCategoryLength = projects[_projectId]\r\n            .featureCategoryLabels\r\n            .length;\r\n        featurePrices = new uint256[][](featureCategoryLength);\r\n\r\n        for (uint256 i; i < featureCategoryLength; i++) {\r\n            uint256 featuresLength = projects[_projectId]\r\n                .featureTokenIds[i]\r\n                .length;\r\n            uint256[] memory innerFeaturePrices = new uint256[](featuresLength);\r\n            for (uint256 j; j < featuresLength; j++) {\r\n                uint256 featureTokenId = projects[_projectId].featureTokenIds[\r\n                    i\r\n                ][j];\r\n                (uint256 featurePrice, , ) = amm.getBuyERC20AmountWithFee(\r\n                    featureTokenId,\r\n                    1\r\n                );\r\n                innerFeaturePrices[j] = featurePrice;\r\n            }\r\n            featurePrices[i] = innerFeaturePrices;\r\n        }\r\n    }\r\n\r\n    function getCanvasTokenURI(uint256 _canvasTokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    projects[getProjectIdFromCanvasId(_canvasTokenId)].baseURI,\r\n                    Strings.toString(_canvasTokenId)\r\n                )\r\n            );\r\n    }\r\n\r\n    function getCanvasHash(uint256 _canvasId) public view returns (bytes32) {\r\n        return canvases[_canvasId].hash;\r\n    }\r\n\r\n    function getProjectScripts(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (string[] memory _scripts)\r\n    {\r\n        _scripts = new string[](projects[_projectId].scriptCount);\r\n\r\n        for(uint256 i; i < projects[_projectId].scriptCount; i++) {\r\n          _scripts[i] = projects[_projectId].scripts[i];\r\n        }\r\n    }\r\n\r\n    function getProjectFeatureCategoryLabels(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (string[] memory)\r\n    {\r\n        return projects[_projectId].featureCategoryLabels;\r\n    }\r\n\r\n    function getProjectFeatureTokenIds(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (uint256[][] memory)\r\n    {\r\n        return projects[_projectId].featureTokenIds;\r\n    }\r\n\r\n    function getProjectFeatureLabels(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (string[][] memory featureLabels)\r\n    {\r\n        uint256 featureCategoryLength = projects[_projectId]\r\n            .featureCategoryLabels\r\n            .length;\r\n        featureLabels = new string[][](featureCategoryLength);\r\n\r\n        for (uint256 i; i < featureCategoryLength; i++) {\r\n            uint256 featuresLength = projects[_projectId]\r\n                .featureTokenIds[i]\r\n                .length;\r\n            string[] memory innerFeatureLabels = new string[](featuresLength);\r\n            for (uint256 j; j < featuresLength; j++) {\r\n                innerFeatureLabels[j] = element.getElementLabel(\r\n                    projects[_projectId].featureTokenIds[i][j]\r\n                );\r\n            }\r\n            featureLabels[i] = innerFeatureLabels;\r\n        }\r\n    }\r\n\r\n    function getProjectIdFromCanvasId(uint256 canvasId)\r\n        public\r\n        pure\r\n        returns (uint256 projectId)\r\n    {\r\n        projectId = canvasId / 1_000_000;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/interfaces/IStudio.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IStudio {\r\n    event CanvasWrapped(\r\n        uint256 indexed canvasId,\r\n        address indexed wrapper,\r\n        uint256[] elementIds\r\n    );\r\n\r\n    event CanvasUnwrapped(\r\n        uint256 indexed canvasId,\r\n        address indexed unwrapped\r\n    );\r\n\r\n    struct ProjectData {\r\n        string name;\r\n        string description;\r\n        address artistAddress;\r\n        string artistName;\r\n        string website;\r\n        string license;\r\n        string baseURI;\r\n        string scriptJSON;\r\n        uint256 scriptCount;\r\n        mapping(uint256 => string) scripts;\r\n        string[] featureCategoryLabels;\r\n        uint256[][] featureTokenIds;\r\n    }\r\n\r\n    struct CreateProjectData {\r\n        string name;\r\n        string description;\r\n        address artistAddress;\r\n        string artistName;\r\n        string website;\r\n        string license;\r\n        string baseURI;\r\n        string scriptJSON;\r\n        uint256 scriptCount;\r\n        uint256 maxInvocations;\r\n        string[] featureCategoryLabels;\r\n        string[][] featureLabels;\r\n    }\r\n\r\n    struct CanvasData {\r\n        bool wrapped;\r\n        uint256[] wrappedFeatureTokenIds;\r\n        bytes32 hash;\r\n    }\r\n\r\n    struct CreateAMM {\r\n        uint256 startTime;\r\n        address erc20Token;\r\n        uint256[][] constantA;\r\n        uint256[][] constantB;\r\n    }\r\n\r\n    event ProjectCreated(uint256 indexed projectId);\r\n}\r\n"
    },
    "contracts/Canvas.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./interfaces/ICanvas.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\";\r\n\r\ncontract Canvas is ICanvas, Initializable, ERC721BurnableUpgradeable {\r\n    uint256 nextProjectId = 1;\r\n    mapping(uint256 => ProjectData) public projects;\r\n\r\n    function initialize() external initializer {\r\n        __ERC721_init(\"Intrinsic.art Canvases\", \"INSC\");\r\n        __ERC721Burnable_init();\r\n    }\r\n\r\n    function createProject(\r\n        address _studio,\r\n        address _minter,\r\n        uint256 _maxInvocations\r\n    ) public returns (uint256 projectId) {\r\n        require(\r\n            _maxInvocations < 1_000_000,\r\n            \"Max invocations must be less than 1,000,000\"\r\n        );\r\n\r\n        projectId = nextProjectId;\r\n\r\n        projects[projectId].studio = _studio;\r\n        projects[projectId].minter = _minter;\r\n        projects[projectId].invocations = 0;\r\n        projects[projectId].maxInvocations = _maxInvocations;\r\n\r\n        nextProjectId++;\r\n    }\r\n\r\n    function mint(uint256 _projectId, address _to)\r\n        public\r\n        returns (uint256 tokenId)\r\n    {\r\n        require(\r\n            msg.sender == projects[_projectId].minter,\r\n            \"Only minter can call this function\"\r\n        );\r\n        require(\r\n            (projects[_projectId].invocations) <=\r\n                projects[_projectId].maxInvocations,\r\n            \"This project has sold out\"\r\n        );\r\n        tokenId = (_projectId * 1_000_000) + projects[_projectId].invocations;\r\n        projects[_projectId].invocations++;\r\n\r\n        _safeMint(_to, tokenId);\r\n\r\n        emit MintedToken(_to, _projectId, tokenId);\r\n    }\r\n\r\n    function getProjectIdFromCanvasId(uint256 canvasId)\r\n        public\r\n        pure\r\n        returns (uint256 projectId)\r\n    {\r\n        projectId = canvasId / 1_000_000;\r\n    }\r\n\r\n    /////// View Functions ///////////\r\n    // function tokenURI(uint256 _tokenId)\r\n    //     public\r\n    //     view\r\n    //     override\r\n    //     returns (string memory)\r\n    // {\r\n    //     return\r\n    // }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721Upgradeable)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(ERC721BurnableUpgradeable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "contracts/DutchAuction.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./interfaces/IDutchAuction.sol\";\r\nimport \"./interfaces/IERC721Mint.sol\";\r\nimport \"./Canvas.sol\";\r\n\r\ncontract DutchAuction is IDutchAuction, Initializable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping(uint256 => Auction) public projectIdToAuction;\r\n    Canvas public canvas;\r\n    address public studio;\r\n    mapping(address => mapping(address => uint256))\r\n        public artistToERC20Balances;\r\n\r\n    modifier onlyStudio() {\r\n        require(\r\n            msg.sender == studio,\r\n            \"Only the Studio contract can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function initialize(address _canvas, address _studio) external initializer {\r\n        canvas = Canvas(_canvas);\r\n        studio = _studio;\r\n    }\r\n\r\n    function addAuction(uint256 _projectId, Auction memory _auction)\r\n        external\r\n        onlyStudio\r\n    {\r\n        require(\r\n            projectIdToAuction[_projectId].erc20Token == address(0),\r\n            \"Dutch Auction already initialized\"\r\n        );\r\n        require(\r\n            _auction.startPrice >= _auction.endPrice,\r\n            \"Start price must be greater than or equal end price\"\r\n        );\r\n        require(\r\n            _auction.endTime >= _auction.startTime,\r\n            \"End time must be after start time\"\r\n        );\r\n\r\n        projectIdToAuction[_projectId] = Auction(\r\n            _auction.startTime,\r\n            _auction.endTime,\r\n            _auction.startPrice,\r\n            _auction.endPrice,\r\n            _auction.artistAddress,\r\n            _auction.erc20Token\r\n        );\r\n\r\n        emit AuctionAdded(\r\n            msg.sender,\r\n            _projectId,\r\n            _auction.startTime,\r\n            _auction.endTime,\r\n            _auction.startPrice,\r\n            _auction.endPrice,\r\n            _auction.artistAddress\r\n        );\r\n    }\r\n\r\n    // todo: this should return array of canvas IDs that were bought\r\n    function buyCanvases(\r\n        uint256 _projectId,\r\n        uint256 _quantity,\r\n        address _spender,\r\n        address _recipient\r\n    ) external onlyStudio returns (uint256[] memory canvasIds) {\r\n        canvasIds = new uint256[](_quantity);\r\n\r\n        require(\r\n            block.timestamp >= projectIdToAuction[_projectId].startTime,\r\n            \"Auction has not started yet\"\r\n        );\r\n        uint256 canvasesTotalPrice = getCanvasPrice(_projectId) * _quantity;\r\n\r\n        // Safe transfer to the revenue claimer?\r\n        IERC20(projectIdToAuction[_projectId].erc20Token).safeTransferFrom(\r\n            _spender,\r\n            address(this),\r\n            canvasesTotalPrice\r\n        );\r\n\r\n        for (uint256 i; i < _quantity; i++) {\r\n            canvasIds[i] = canvas.mint(_projectId, _recipient);\r\n        }\r\n\r\n        artistToERC20Balances[projectIdToAuction[_projectId].artistAddress][\r\n            projectIdToAuction[_projectId].erc20Token\r\n        ] += canvasesTotalPrice;\r\n\r\n        emit CanvasesBought(_projectId, _quantity, canvasesTotalPrice);\r\n    }\r\n\r\n    function getCanvasPrice(uint256 _projectId)\r\n        public\r\n        view\r\n        returns (uint256 canvasPrice)\r\n    {\r\n        if (block.timestamp < projectIdToAuction[_projectId].startTime) {\r\n            // Auction hasn't started yet\r\n            canvasPrice = projectIdToAuction[_projectId].startPrice;\r\n        } else if (block.timestamp > projectIdToAuction[_projectId].endTime) {\r\n            // Auction has ended\r\n            canvasPrice = projectIdToAuction[_projectId].endPrice;\r\n        } else {\r\n            // Auction is active\r\n            canvasPrice =\r\n                projectIdToAuction[_projectId].startPrice -\r\n                (\r\n                    (((block.timestamp -\r\n                        projectIdToAuction[_projectId].startTime) *\r\n                        (projectIdToAuction[_projectId].startPrice -\r\n                            projectIdToAuction[_projectId].endPrice)) /\r\n                        (projectIdToAuction[_projectId].endTime -\r\n                            projectIdToAuction[_projectId].startTime))\r\n                );\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/Element.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./interfaces/IElement.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\r\n\r\ncontract Element is IElement, ERC1155, ERC1155Burnable, ERC1155Supply {\r\n    uint256 public nextTokenId = 1;\r\n    mapping(uint256 => Feature) public features;\r\n\r\n    constructor() ERC1155(\"\") {}\r\n\r\n    function createFeature(string calldata _label, address _minter)\r\n        public\r\n        returns (uint256 tokenId)\r\n    {\r\n        tokenId = nextTokenId;\r\n        nextTokenId++;\r\n\r\n        features[tokenId].label = _label;\r\n        features[tokenId].minter = _minter;\r\n    }\r\n\r\n    function createFeatures(\r\n        string[] calldata _labels,\r\n        address _minter\r\n    ) public returns (uint256[] memory tokenIds) {\r\n        tokenIds = new uint256[](_labels.length);\r\n\r\n        for (uint256 i; i < _labels.length; i++) {\r\n            tokenIds[i] = createFeature(_labels[i], _minter);\r\n        }\r\n    }\r\n\r\n    function mint(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    ) public {\r\n        require(msg.sender == features[_id].minter, \"Only minter can mint\");\r\n\r\n        _mint(_to, _id, _amount, bytes(\"\"));\r\n    }\r\n\r\n    function mintBatch(\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts\r\n    ) public {\r\n        require(_ids.length == _amounts.length, \"Invalid array lengths\");\r\n        for (uint256 i; i < _ids.length; i++) {\r\n            mint(_to, _ids[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal override(ERC1155, ERC1155Supply) {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    function getElementLabel(uint256 _tokenId) public view returns (string memory) {\r\n      return features[_tokenId].label;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ICanvas.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface ICanvas {\r\n    struct ProjectData {\r\n        address studio;\r\n        address minter;\r\n        uint256 invocations;\r\n        uint256 maxInvocations;\r\n    }\r\n\r\n    function initialize() external;\r\n\r\n    function createProject(\r\n        address _studio,\r\n        address _minter,\r\n        uint256 _maxInvocations\r\n    ) external returns (uint256 projectId);\r\n\r\n    function mint(uint256 _projectId, address _to)\r\n        external\r\n        returns (uint256 tokenId);\r\n\r\n    function getProjectIdFromCanvasId(uint256 canvasId)\r\n        external\r\n        pure\r\n        returns (uint256 projectId);\r\n\r\n    event MintedToken(address receiver, uint256 projectid, uint256 tokenId);\r\n    event WrappedTokens(uint256 canvasId, uint256 tokenIds, uint256 amounts);\r\n    event UnWrappedTokens(uint256 canvasId, uint256 tokenIds, uint256 amounts);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\n    function __ERC721Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IDutchAuction.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDutchAuction {\r\n    struct Auction {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 startPrice;\r\n        uint256 endPrice;\r\n        address artistAddress;\r\n        address erc20Token;\r\n    }\r\n\r\n    event AuctionAdded(\r\n        address indexed auctionCreator,\r\n        uint256 indexed projectId,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 startPrice,\r\n        uint256 endPrice,\r\n        address indexed artistAddress\r\n    );\r\n\r\n    event CanvasesBought(\r\n        uint256 indexed projectId,\r\n        uint256 quantity,\r\n        uint256 canvasesTotalPrice\r\n    );\r\n\r\n    event ArtistRevenueClaimed(\r\n        address indexed recipient,\r\n        address indexed currency,\r\n        uint256 claimedRevenue\r\n    );\r\n\r\n    function addAuction(uint256 _projectId, Auction memory _auction) external;\r\n\r\n    function buyCanvases(\r\n        uint256 _projectId,\r\n        uint256 _quantity,\r\n        address _spender,\r\n        address _recipient\r\n    ) external returns (uint256[] memory canvasIds);\r\n\r\n    function projectIdToAuction(uint256)\r\n        external\r\n        returns (\r\n            uint256 startTime,\r\n            uint256 endTime,\r\n            uint256 startPrice,\r\n            uint256 endPrice,\r\n            address artistAddress,\r\n            address erc20Token\r\n        );\r\n\r\n    function getCanvasPrice(uint256 _projectId)\r\n        external\r\n        view\r\n        returns (uint256 canvasPrice);\r\n}\r\n"
    },
    "contracts/interfaces/IERC721Mint.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface IERC721Mint {\r\n    function safeMint(address _to, uint256 _projectId) external returns (uint256 tokenId);\r\n}"
    },
    "contracts/interfaces/IElement.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IElement {\r\n    struct Feature {\r\n        string label;\r\n        address minter;\r\n    }\r\n\r\n    function createFeature(string calldata _label, address _minter)\r\n        external\r\n        returns (uint256 tokenId);\r\n\r\n    function createFeatures(\r\n        string[] calldata _labels,\r\n        address _minter\r\n    ) external returns (uint256[] memory tokenIds);\r\n\r\n    function mint(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function mintBatch(\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts\r\n    ) external;\r\n\r\n    function getElementLabel(uint256 _tokenId) external view returns (string memory);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155Supply.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] -= amounts[i];\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/RewardsClaimer.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./interfaces/IDutchAuction.sol\";\r\nimport \"./interfaces/IAMM.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract RewardsClaimer {\r\n    struct PlatformRevenueClaimer {\r\n        address claimerAddress;\r\n        uint256 claimerWeight;\r\n    }\r\n\r\n    IDutchAuction public dutchAuctionContract;\r\n    IAMM public ammContract;\r\n    PlatformRevenueClaimer[] public platformRevenueClaimers;\r\n\r\n    constructor(\r\n        address _dutchAuctionAddress,\r\n        address _ammAddress,\r\n        address[] memory _platformRevenueClaimerAddresses,\r\n        uint256[] memory _platformRevenueClaimerWeights\r\n    ) {\r\n        dutchAuctionContract = IDutchAuction(_dutchAuctionAddress);\r\n        ammContract = IAMM(_ammAddress);\r\n\r\n        _addPlatformRevenueClaimers(\r\n            _platformRevenueClaimerAddresses,\r\n            _platformRevenueClaimerWeights\r\n        );\r\n    }\r\n\r\n    function addPlatformRevenueClaimers(\r\n        address[] memory _platformRevenueClaimerAddresses,\r\n        uint256[] memory _platformRevenueClaimerWeights\r\n    ) external {\r\n        _addPlatformRevenueClaimers(\r\n            _platformRevenueClaimerAddresses,\r\n            _platformRevenueClaimerWeights\r\n        );\r\n    }\r\n\r\n    function _addPlatformRevenueClaimers(\r\n        address[] memory _platformRevenueClaimerAddresses,\r\n        uint256[] memory _platformRevenueClaimerWeights\r\n    ) internal {\r\n        require(\r\n            _platformRevenueClaimerAddresses.length ==\r\n                _platformRevenueClaimerWeights.length,\r\n            \"Unequal array lengths\"\r\n        );\r\n\r\n        for (uint256 i; i < _platformRevenueClaimerAddresses.length; i++) {\r\n            require(\r\n                _platformRevenueClaimerAddresses[i] != address(0),\r\n                \"Address zero cannot be claimer\"\r\n            );\r\n            require(\r\n                _platformRevenueClaimerWeights[i] > 0,\r\n                \"Weight must be greater than zero\"\r\n            );\r\n\r\n            platformRevenueClaimers.push(\r\n                PlatformRevenueClaimer(\r\n                    _platformRevenueClaimerAddresses[i],\r\n                    _platformRevenueClaimerWeights[i]\r\n                )\r\n            );\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/Mocks/MockWeth.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockWeth is ERC20 {\r\n    constructor() ERC20(\"WETH\", \"WETH\") {}\r\n\r\n    function mint(address to, uint256 amount) public {\r\n        _mint(to, amount);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}