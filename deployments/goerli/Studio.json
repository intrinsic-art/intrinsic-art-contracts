{
  "address": "0x8E6A3A8cCC96aFa982082d83717AD018d78c1100",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedRevenue",
          "type": "uint256"
        }
      ],
      "name": "ArtistRevenueClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "artworkTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "ArtworkCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "artworkTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ArtworkDecomposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionStartPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionEndPrice",
          "type": "uint256"
        }
      ],
      "name": "AuctionScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedRevenue",
          "type": "uint256"
        }
      ],
      "name": "PlatformRevenueClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "artistAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "ProjectCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitQuantities",
          "type": "uint256[]"
        }
      ],
      "name": "TraitsBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        }
      ],
      "name": "addAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artistAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artistClaimableRevenues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "artworkData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionPlatformFeeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "buyTraits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIdsToBuy",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitQuantitiesToBuy",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIdsToCreateArtwork",
          "type": "uint256[]"
        }
      ],
      "name": "buyTraitsCreateArtwork",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimArtistRevenue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPlatformRevenue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "createArtwork",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_artworkTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_artistAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "createProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitMaxSupplys",
          "type": "uint256[]"
        }
      ],
      "name": "createTraits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_artworkTokenId",
          "type": "uint256"
        }
      ],
      "name": "decomposeArtwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_artworkId",
          "type": "uint256"
        }
      ],
      "name": "getArtworkHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_artworkTokenId",
          "type": "uint256"
        }
      ],
      "name": "getArtworkTraits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "traitValues",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "traitTypeValues",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_artworkTokenId",
          "type": "uint256"
        }
      ],
      "name": "getArtworkURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "getIsAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjectArtist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjectIsLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjectMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjectScriptCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjectScripts",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "_scripts",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTraitAuctionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTraits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_traits",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformClaimableRevenues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        }
      ],
      "name": "removeAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStartPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndPrice",
          "type": "uint256"
        }
      ],
      "name": "scheduleAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traits",
      "outputs": [
        {
          "internalType": "contract ITraits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "updateBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "updateMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_scriptIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_script",
          "type": "string"
        }
      ],
      "name": "updateScript",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a0a419b518e8e3b114e0094a6e56e2a99f2a4874b5cd956b63de49ffaef4ee6",
  "receipt": {
    "to": null,
    "from": "0xAa9D46AE079851116967c6573f961B304095C34a",
    "contractAddress": "0x8E6A3A8cCC96aFa982082d83717AD018d78c1100",
    "transactionIndex": 18,
    "gasUsed": "4450270",
    "logsBloom": "0x
    "blockHash": "0x5ed6346ff98d9bf17c6cab175b81bdc946a77cba378fa41fec79cac5dbc9820a",
    "transactionHash": "0x9a0a419b518e8e3b114e0094a6e56e2a99f2a4874b5cd956b63de49ffaef4ee6",
    "logs": [],
    "blockNumber": 8386150,
    "cumulativeGasUsed": "7207255",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a0ffe0a204b17e0b6eeeecadcef9154b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedRevenue\",\"type\":\"uint256\"}],\"name\":\"ArtistRevenueClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ArtworkCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ArtworkDecomposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionStartPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndPrice\",\"type\":\"uint256\"}],\"name\":\"AuctionScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedRevenue\",\"type\":\"uint256\"}],\"name\":\"PlatformRevenueClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitQuantities\",\"type\":\"uint256[]\"}],\"name\":\"TraitsBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"}],\"name\":\"addAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistClaimableRevenues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionPlatformFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"buyTraits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIdsToBuy\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitQuantitiesToBuy\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIdsToCreateArtwork\",\"type\":\"uint256[]\"}],\"name\":\"buyTraitsCreateArtwork\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimArtistRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPlatformRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"createArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitMaxSupplys\",\"type\":\"uint256[]\"}],\"name\":\"createTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkTokenId\",\"type\":\"uint256\"}],\"name\":\"decomposeArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkId\",\"type\":\"uint256\"}],\"name\":\"getArtworkHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkTokenId\",\"type\":\"uint256\"}],\"name\":\"getArtworkTraits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"traitValues\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"traitTypeValues\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkTokenId\",\"type\":\"uint256\"}],\"name\":\"getArtworkURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"getIsAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectArtist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectIsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectScriptCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectScripts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_scripts\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraitAuctionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformClaimableRevenues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"}],\"name\":\"removeAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndPrice\",\"type\":\"uint256\"}],\"name\":\"scheduleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITraits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scriptIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_script\",\"type\":\"string\"}],\"name\":\"updateScript\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Studio.sol\":\"Studio\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x805b2b34d4829b892217e5116dc1feb9c67bee2eb7d7b18dac3dbbb91b13e9c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/StringConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract StringConverter {\\r\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10**64) {\\r\\n                value /= 10**64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10**32) {\\r\\n                value /= 10**32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10**16) {\\r\\n                value /= 10**16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10**8) {\\r\\n                value /= 10**8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10**4) {\\r\\n                value /= 10**4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10**2) {\\r\\n                value /= 10**2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10**1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa0f45fd8a84ef9e6576eaff781350df017db7633aab4041cd3b472c394c2414d\",\"license\":\"MIT\"},\"contracts/Studio.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./StringConverter.sol\\\";\\r\\nimport \\\"./interfaces/ITraits.sol\\\";\\r\\nimport \\\"./interfaces/IStudio.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\r\\n\\r\\ncontract Studio is\\r\\n    OwnableUpgradeable,\\r\\n    ERC721Upgradeable,\\r\\n    StringConverter,\\r\\n    IStudio,\\r\\n    ERC1155HolderUpgradeable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    ITraits public traits;\\r\\n    string public baseURI;\\r\\n    uint256 public constant auctionPlatformFeeNumerator = 100_000_000;\\r\\n    uint256 public constant FEE_DENOMINATOR = 1_000_000_000;\\r\\n\\r\\n    uint256 nextTokenId = 1;\\r\\n    uint256 totalSupply;\\r\\n    uint256 maxSupply;\\r\\n\\r\\n    bool public locked;\\r\\n    address public artistAddress;\\r\\n    mapping(uint256 => string) scripts;\\r\\n\\r\\n    string public metadata;\\r\\n    uint256 public auctionStartTime;\\r\\n    uint256 public auctionEndTime;\\r\\n    uint256 public auctionStartPrice;\\r\\n    uint256 public auctionEndPrice;\\r\\n    uint256 public artistClaimableRevenues;\\r\\n    uint256 public platformClaimableRevenues;\\r\\n\\r\\n    struct ArtworkData {\\r\\n        uint256[] traitTokenIds;\\r\\n        bytes32 hash;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => ArtworkData) public artworkData;\\r\\n    mapping(address => uint256) public userNonces;\\r\\n    mapping(address => bool) internal admins;\\r\\n\\r\\n    event ArtworkCreated(\\r\\n        uint256 indexed artworkTokenId,\\r\\n        uint256[] traitTokenIds,\\r\\n        bytes32 hash,\\r\\n        address indexed creator\\r\\n    );\\r\\n    event ArtworkDecomposed(\\r\\n        uint256 indexed artworkTokenId,\\r\\n        address indexed caller\\r\\n    );\\r\\n    event AuctionScheduled(\\r\\n        uint256 auctionStartTime,\\r\\n        uint256 auctionEndTime,\\r\\n        uint256 auctionStartPrice,\\r\\n        uint256 auctionEndPrice\\r\\n    );\\r\\n    event TraitsBought(\\r\\n        address indexed buyer,\\r\\n        uint256[] traitTokenIds,\\r\\n        uint256[] traitQuantities\\r\\n    );\\r\\n    event PlatformRevenueClaimed(uint256 claimedRevenue);\\r\\n    event ArtistRevenueClaimed(uint256 claimedRevenue);\\r\\n\\r\\n    event ProjectCreated(string baseURI, address artistAddress, uint256 maxSupply, string metadata);\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(admins[msg.sender], \\\"P01\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier notLocked() {\\r\\n        require(!locked, \\\"P02\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _traits,\\r\\n        address _owner,\\r\\n        address[] calldata _admins\\r\\n    ) external initializer {\\r\\n        __ERC721_init(_name, _symbol);\\r\\n        traits = ITraits(_traits);\\r\\n        _transferOwnership(_owner);\\r\\n        _addAdmins(_admins);\\r\\n    }\\r\\n\\r\\n    function createProject(\\r\\n        string memory _baseURI,\\r\\n        address _artistAddress,\\r\\n        uint256 _maxSupply,\\r\\n        string memory _metadata\\r\\n    ) external onlyAdmin {\\r\\n        baseURI = _baseURI;\\r\\n        artistAddress = _artistAddress;\\r\\n        maxSupply = _maxSupply;\\r\\n        metadata = _metadata;\\r\\n\\r\\n        emit ProjectCreated(_baseURI, _artistAddress, _maxSupply, _metadata);\\r\\n    }\\r\\n\\r\\n    function createTraits(\\r\\n        string[] memory _traitTypeNames,\\r\\n        string[] memory _traitTypeValues,\\r\\n        string[] calldata _traitNames,\\r\\n        string[] calldata _traitValues,\\r\\n        uint256[] calldata _traitTypeIndexes,\\r\\n        uint256[] calldata _traitMaxSupplys\\r\\n    ) external onlyAdmin {\\r\\n        traits.createTraitsAndTypes(\\r\\n            _traitTypeNames,\\r\\n            _traitTypeValues,\\r\\n            _traitNames,\\r\\n            _traitValues,\\r\\n            _traitTypeIndexes,\\r\\n            _traitMaxSupplys\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function scheduleAuction(\\r\\n        uint256 _auctionStartTime,\\r\\n        uint256 _auctionEndTime,\\r\\n        uint256 _auctionStartPrice,\\r\\n        uint256 _auctionEndPrice\\r\\n    ) external onlyAdmin {\\r\\n        require(locked, \\\"M03\\\");\\r\\n        require(_auctionEndTime >= _auctionStartTime, \\\"M05\\\");\\r\\n        require(_auctionEndPrice <= _auctionStartPrice, \\\"M06\\\");\\r\\n\\r\\n        auctionStartTime = _auctionStartTime;\\r\\n        auctionEndTime = _auctionEndTime;\\r\\n        auctionStartPrice = _auctionStartPrice;\\r\\n        auctionEndPrice = _auctionEndPrice;\\r\\n\\r\\n        emit AuctionScheduled(\\r\\n            _auctionStartTime,\\r\\n            _auctionEndTime,\\r\\n            _auctionStartPrice,\\r\\n            _auctionEndPrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateMetadata(\\r\\n        string calldata _metadata\\r\\n    ) external onlyAdmin notLocked {\\r\\n        metadata = _metadata;\\r\\n    }\\r\\n\\r\\n    function updateScript(\\r\\n        uint256 _scriptIndex,\\r\\n        string calldata _script\\r\\n    ) external onlyAdmin notLocked {\\r\\n        scripts[_scriptIndex] = (_script);\\r\\n    }\\r\\n\\r\\n    function lockProject() external onlyAdmin notLocked {\\r\\n        locked = true;\\r\\n    }\\r\\n\\r\\n    function buyTraits(\\r\\n        uint256[] calldata _traitTokenIds,\\r\\n        uint256[] calldata _traitAmounts\\r\\n    ) public payable {\\r\\n        require(_traitTokenIds.length == _traitAmounts.length, \\\"M01\\\");\\r\\n\\r\\n        uint256 totalQuantity;\\r\\n\\r\\n        for (uint256 i; i < _traitAmounts.length; i++) {\\r\\n            totalQuantity += _traitAmounts[i];\\r\\n        }\\r\\n\\r\\n        uint256 ethAmount = totalQuantity * getTraitAuctionPrice();\\r\\n\\r\\n        require(msg.value >= ethAmount, \\\"\\\");\\r\\n\\r\\n        traits.mintBatch(msg.sender, _traitTokenIds, _traitAmounts);\\r\\n\\r\\n        uint256 platformRevenue = (ethAmount * auctionPlatformFeeNumerator) /\\r\\n            FEE_DENOMINATOR;\\r\\n        platformClaimableRevenues += platformRevenue;\\r\\n        artistClaimableRevenues += ethAmount - platformRevenue;\\r\\n\\r\\n        emit TraitsBought(msg.sender, _traitTokenIds, _traitAmounts);\\r\\n    }\\r\\n\\r\\n    function claimPlatformRevenue() external onlyOwner {\\r\\n        uint256 claimedRevenue = platformClaimableRevenues;\\r\\n        require(claimedRevenue > 0, \\\"M07\\\");\\r\\n\\r\\n        platformClaimableRevenues = 0;\\r\\n\\r\\n        // todo: update this\\r\\n        IERC20(address(0)).safeTransfer(msg.sender, claimedRevenue);\\r\\n\\r\\n        emit PlatformRevenueClaimed(claimedRevenue);\\r\\n    }\\r\\n\\r\\n    function claimArtistRevenue() external {\\r\\n        uint256 claimedRevenue = artistClaimableRevenues;\\r\\n        require(claimedRevenue > 0, \\\"M07\\\");\\r\\n\\r\\n        artistClaimableRevenues = 0;\\r\\n\\r\\n        IERC20(address(0)).safeTransfer(msg.sender, claimedRevenue);\\r\\n\\r\\n        emit ArtistRevenueClaimed(claimedRevenue);\\r\\n    }\\r\\n\\r\\n    function updateBaseURI(string calldata _baseURI) external onlyOwner {\\r\\n        baseURI = _baseURI;\\r\\n    }\\r\\n\\r\\n    function addAdmins(address[] calldata _admins) external onlyOwner {\\r\\n        _addAdmins(_admins);\\r\\n    }\\r\\n\\r\\n    function _addAdmins(address[] calldata _admins) private {\\r\\n        for (uint256 i; i < _admins.length; i++) {\\r\\n            admins[_admins[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeAdmins(address[] calldata _admins) external onlyOwner {\\r\\n        _removeAdmins(_admins);\\r\\n    }\\r\\n\\r\\n    function _removeAdmins(address[] calldata _admins) private {\\r\\n        for (uint256 i; i < _admins.length; i++) {\\r\\n            admins[_admins[i]] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createArtwork(\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) public returns (uint256 _artworkTokenId) {\\r\\n        traits.transferTraitsToCreateArtwork(msg.sender, _traitTokenIds);\\r\\n\\r\\n        // todo: Handle this supply in better way\\r\\n        totalSupply++;\\r\\n\\r\\n        _artworkTokenId = nextTokenId;\\r\\n        nextTokenId++;\\r\\n\\r\\n        require(totalSupply <= maxSupply, \\\"Minted out\\\");\\r\\n\\r\\n        bytes32 newHash = keccak256(\\r\\n            abi.encodePacked(msg.sender, userNonces[msg.sender])\\r\\n        );\\r\\n\\r\\n        artworkData[_artworkTokenId].hash = newHash;\\r\\n        artworkData[_artworkTokenId].traitTokenIds = _traitTokenIds;\\r\\n        userNonces[msg.sender]++;\\r\\n\\r\\n        emit ArtworkCreated(\\r\\n            _artworkTokenId,\\r\\n            _traitTokenIds,\\r\\n            newHash,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        _safeMint(msg.sender, _artworkTokenId);\\r\\n    }\\r\\n\\r\\n    function decomposeArtwork(uint256 _artworkTokenId) public {\\r\\n        // todo: use internal version of this function\\r\\n        require(msg.sender == ownerOf(_artworkTokenId), \\\"S03\\\");\\r\\n\\r\\n        traits.transferTraitsToDecomposeArtwork(\\r\\n            msg.sender,\\r\\n            artworkData[_artworkTokenId].traitTokenIds\\r\\n        );\\r\\n\\r\\n        // Clear Artwork state\\r\\n        artworkData[_artworkTokenId].hash = 0;\\r\\n        artworkData[_artworkTokenId].traitTokenIds = new uint256[](0);\\r\\n\\r\\n        // Burn this token\\r\\n        _burn(_artworkTokenId);\\r\\n        totalSupply--;\\r\\n\\r\\n        emit ArtworkDecomposed(_artworkTokenId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function buyTraitsCreateArtwork(\\r\\n        uint256[] calldata _traitTokenIdsToBuy,\\r\\n        uint256[] calldata _traitQuantitiesToBuy,\\r\\n        uint256[] calldata _traitTokenIdsToCreateArtwork\\r\\n    ) public payable {\\r\\n        buyTraits(_traitTokenIdsToBuy, _traitQuantitiesToBuy);\\r\\n        createArtwork(_traitTokenIdsToCreateArtwork);\\r\\n    }\\r\\n\\r\\n    function getArtworkURI(\\r\\n        uint256 _artworkTokenId\\r\\n    ) external view returns (string memory) {\\r\\n        return string.concat(baseURI, toString(_artworkTokenId));\\r\\n    }\\r\\n\\r\\n    function getArtworkHash(\\r\\n        uint256 _artworkId\\r\\n    ) external view returns (bytes32) {\\r\\n        return artworkData[_artworkId].hash;\\r\\n    }\\r\\n\\r\\n    function getArtworkTraits(\\r\\n        uint256 _artworkTokenId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory traitTokenIds,\\r\\n            string[] memory traitNames,\\r\\n            string[] memory traitValues,\\r\\n            string[] memory traitTypeNames,\\r\\n            string[] memory traitTypeValues\\r\\n        )\\r\\n    {\\r\\n        uint256 traitCount = artworkData[_artworkTokenId].traitTokenIds.length;\\r\\n        traitTokenIds = artworkData[_artworkTokenId].traitTokenIds;\\r\\n        traitNames = new string[](traitCount);\\r\\n        traitValues = new string[](traitCount);\\r\\n        traitTypeNames = new string[](traitCount);\\r\\n        traitTypeValues = new string[](traitCount);\\r\\n\\r\\n        for (uint256 i; i < traitCount; i++) {\\r\\n            traitNames[i] = traits.getTraitName(traitTokenIds[i]);\\r\\n            traitValues[i] = traits.getTraitValue(traitTokenIds[i]);\\r\\n            traitTypeNames[i] = traits.getTraitTypeName(traitTokenIds[i]);\\r\\n            traitTypeValues[i] = traits.getTraitTypeValue(traitTokenIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getProjectIsLocked() external view returns (bool) {\\r\\n        return locked;\\r\\n    }\\r\\n\\r\\n    function getProjectArtist() external view returns (address) {\\r\\n        return artistAddress;\\r\\n    }\\r\\n\\r\\n    function getProjectScripts()\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory _scripts)\\r\\n    {\\r\\n        uint256 scriptCount = getProjectScriptCount();\\r\\n        _scripts = new string[](scriptCount);\\r\\n\\r\\n        for (uint256 i; i < scriptCount; i++) {\\r\\n            _scripts[i] = scripts[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getProjectScriptCount() public view returns (uint256) {\\r\\n        uint256 scriptIndex;\\r\\n\\r\\n        while (\\r\\n            keccak256(abi.encodePacked(scripts[scriptIndex])) !=\\r\\n            keccak256(abi.encodePacked(\\\"\\\"))\\r\\n        ) {\\r\\n            scriptIndex++;\\r\\n        }\\r\\n\\r\\n        return scriptIndex;\\r\\n    }\\r\\n\\r\\n    function getProjectMetadata() external view returns (string memory) {\\r\\n        return metadata;\\r\\n    }\\r\\n\\r\\n    function getIsAdmin(address _admin) external view returns (bool) {\\r\\n        return admins[_admin];\\r\\n    }\\r\\n\\r\\n    function getTraits()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            uint256[] memory _traitTypeIndexes,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        )\\r\\n    {\\r\\n        (\\r\\n            _traitTokenIds,\\r\\n            _traitNames,\\r\\n            _traitValues,\\r\\n            _traitTypeIndexes,\\r\\n            _traitTypeNames,\\r\\n            _traitTypeValues\\r\\n        ) = traits.getTraits();\\r\\n    }\\r\\n\\r\\n    function getTraitAuctionPrice() public view returns (uint256 _price) {\\r\\n        require(\\r\\n            block.timestamp >= auctionStartTime,\\r\\n            \\\"Auction hasn't started yet\\\"\\r\\n        );\\r\\n        if (block.timestamp > auctionEndTime) {\\r\\n            // Auction has ended\\r\\n            _price = auctionEndPrice;\\r\\n        } else {\\r\\n            // Auction is active\\r\\n            _price =\\r\\n                auctionStartPrice -\\r\\n                (\\r\\n                    (((block.timestamp - auctionStartTime) *\\r\\n                        (auctionStartPrice - auctionEndPrice)) /\\r\\n                        (auctionEndTime - auctionStartTime))\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override(ERC721Upgradeable, ERC1155ReceiverUpgradeable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IStudio).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbc9419252db53d8cfdcbae14609139937e7b3f2ec66c0c256d581e0741b35918\",\"license\":\"MIT\"},\"contracts/interfaces/IStudio.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IStudio {\\r\\n    function locked() external view returns (bool);\\r\\n}\",\"keccak256\":\"0x998e69de9ca32bdaad47e9522d851878a611edc6f859546998848dd4daca390b\",\"license\":\"MIT\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITraits {\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function createTraitsAndTypes(\\r\\n        string[] memory _traitTypeNames,\\r\\n        string[] memory _traitTypeValues,\\r\\n        string[] calldata _traitNames,\\r\\n        string[] calldata _traitValues,\\r\\n        uint256[] calldata _traitTypeIndexes,\\r\\n        uint256[] calldata _traitMaxSupplys\\r\\n    ) external;\\r\\n\\r\\n    function mintBatch(\\r\\n        address _to,\\r\\n        uint256[] memory _tokenIds,\\r\\n        uint256[] memory _amounts\\r\\n    ) external;\\r\\n\\r\\n    function transferTraitsToCreateArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external;\\r\\n\\r\\n    function transferTraitsToDecomposeArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external;\\r\\n\\r\\n    function getTraitName(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    function getTraitValue(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    function getTraitTypeName(uint256 _tokenId) external view returns (string memory);\\r\\n\\r\\n    function getTraitTypeValue(uint256 _tokenId) external view returns (string memory);\\r\\n\\r\\n    function getTraits()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            uint256[] memory _traitTypeIndexes,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x070d11f9b9a48bcd4b21a692ea177ae1c1e8c182991198d11a3e6cd24e621439\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600161012f5534801561001657600080fd5b50614f51806100266000396000f3fe6080604052600436106103975760003560e01c80637bd1085b116101dc578063b88d4fde11610102578063d7eb3f3a116100a0578063eb54f9ec1161006f578063eb54f9ec14610ae9578063f23a6e6114610b00578063f2fde38b14610b45578063f501c2c314610b6557600080fd5b8063d7eb3f3a14610a37578063e1fc334f14610a5d578063e785475114610a7e578063e985e9c514610aa057600080fd5b8063c87b56dd116100dc578063c87b56dd146109cd578063cf309012146109ed578063d73792a914610a08578063d756985b14610a2057600080fd5b8063b88d4fde14610938578063bc197c8114610958578063bcfbb611146109b657600080fd5b8063931688cb1161017a578063a22cb46511610149578063a22cb465146108c3578063a479cf04146108e3578063a713b02914610903578063b155d57e1461091857600080fd5b8063931688cb1461085757806395d89b41146108775780639c54df641461088c578063a04a6ac8146108ac57600080fd5b80638705e6a4116101b65780638705e6a4146107ec5780638da5cb5b146108045780638ecd895514610822578063918b5be11461083757600080fd5b80637bd1085b1461076b5780637f0429ef1461078b578063822b0ceb146107b257600080fd5b806331416a29116102c15780636352211e1161025f5780636cb801171161022e5780636cb801171461070157806370a0823114610721578063715018a61461074157806376f03dbb1461075657600080fd5b80636352211e1461067b57806367add6e51461069b578063685fe5e6146106bb5780636c0360eb146106ec57600080fd5b806342842e0e1161029b57806342842e0e1461061e57806345ce1fd11461063e5780634b449cba146106515780635711c2e61461066857600080fd5b806331416a29146105c9578063377e11e0146105e9578063392f37e91461060957600080fd5b80631af9fd17116103395780632cca7bb0116103085780632cca7bb01461052a5780632d9bace01461055b5780632dafcb221461057b5780632f7801f41461059b57600080fd5b80631af9fd17146104a05780631b1b7120146104b557806323b872dd146104e65780632504aaa81461050657600080fd5b8063095ea7b311610375578063095ea7b31461042b5780630bdc21cb1461044d578063100f1f321461047257806314e6d3d41461048b57600080fd5b806301ffc9a71461039c57806306fdde03146103d1578063081812fc146103f3575b600080fd5b3480156103a857600080fd5b506103bc6103b7366004613aae565b610b7a565b60405190151581526020015b60405180910390f35b3480156103dd57600080fd5b506103e6610bbe565b6040516103c89190613b1b565b3480156103ff57600080fd5b5061041361040e366004613b2e565b610c50565b6040516001600160a01b0390911681526020016103c8565b34801561043757600080fd5b5061044b610446366004613b5e565b610cea565b005b34801561045957600080fd5b506104646101395481565b6040519081526020016103c8565b34801561047e57600080fd5b506101325460ff166103bc565b34801561049757600080fd5b5061044b610e39565b3480156104ac57600080fd5b506103e6610ec9565b3480156104c157600080fd5b506104d56104d0366004613b2e565b610ed9565b6040516103c8959493929190613c1b565b3480156104f257600080fd5b5061044b610501366004613c88565b611372565b34801561051257600080fd5b506101325461010090046001600160a01b0316610413565b34801561053657600080fd5b50610464610545366004613b2e565b600090815261013b602052604090206001015490565b34801561056757600080fd5b5061044b610576366004613b2e565b6113f9565b34801561058757600080fd5b50610464610596366004613d10565b61157a565b3480156105a757600080fd5b506104646105b6366004613d52565b61013c6020526000908152604090205481565b3480156105d557600080fd5b5061044b6105e4366004613e32565b611775565b3480156105f557600080fd5b5061044b610604366004613d10565b61187c565b34801561061557600080fd5b506103e66118e4565b34801561062a57600080fd5b5061044b610639366004613c88565b611973565b61044b61064c366004613ee2565b61198e565b34801561065d57600080fd5b506104646101365481565b61044b610676366004613f4e565b611b8c565b34801561068757600080fd5b50610413610696366004613b2e565b611ba2565b3480156106a757600080fd5b5061044b6106b6366004613fc9565b611c2d565b3480156106c757600080fd5b506104646106d6366004613b2e565b61013b6020526000908152604090206001015481565b3480156106f857600080fd5b506103e6611d10565b34801561070d57600080fd5b5061044b61071c366004614047565b611d1e565b34801561072d57600080fd5b5061046461073c366004613d52565b611eb4565b34801561074d57600080fd5b5061044b611f4e565b34801561076257600080fd5b50610464611fb4565b34801561077757600080fd5b506103e6610786366004613b2e565b612075565b34801561079757600080fd5b506107a06120aa565b6040516103c896959493929190614079565b3480156107be57600080fd5b506103bc6107cd366004613d52565b6001600160a01b0316600090815261013d602052604090205460ff1690565b3480156107f857600080fd5b506104646305f5e10081565b34801561081057600080fd5b506033546001600160a01b0316610413565b34801561082e57600080fd5b5061044b612142565b34801561084357600080fd5b5061044b61085236600461413d565b61221d565b34801561086357600080fd5b5061044b61087236600461413d565b6122ab565b34801561088357600080fd5b506103e6612313565b34801561089857600080fd5b5061044b6108a7366004613d10565b612322565b3480156108b857600080fd5b506104646101385481565b3480156108cf57600080fd5b5061044b6108de366004614181565b612386565b3480156108ef57600080fd5b5061044b6108fe366004614267565b612391565b34801561090f57600080fd5b5061044b612471565b34801561092457600080fd5b5061044b610933366004614377565b6124eb565b34801561094457600080fd5b5061044b6109533660046143c3565b61258b565b34801561096457600080fd5b5061099d61097336600461447a565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040516001600160e01b031990911681526020016103c8565b3480156109c257600080fd5b5061046461013a5481565b3480156109d957600080fd5b506103e66109e8366004613b2e565b612613565b3480156109f957600080fd5b50610132546103bc9060ff1681565b348015610a1457600080fd5b50610464633b9aca0081565b348015610a2c57600080fd5b506104646101375481565b348015610a4357600080fd5b50610132546104139061010090046001600160a01b031681565b348015610a6957600080fd5b5061012d54610413906001600160a01b031681565b348015610a8a57600080fd5b50610a93612709565b6040516103c89190614524565b348015610aac57600080fd5b506103bc610abb366004614537565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b348015610af557600080fd5b506104646101355481565b348015610b0c57600080fd5b5061099d610b1b36600461456a565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b348015610b5157600080fd5b5061044b610b60366004613d52565b61283e565b348015610b7157600080fd5b50610464612920565b60006001600160e01b031982167fcf309012000000000000000000000000000000000000000000000000000000001480610bb85750610bb882612984565b92915050565b606060978054610bcd906145cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf9906145cf565b8015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b5050505050905090565b6000818152609960205260408120546001600160a01b0316610cce5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b6000610cf582611ba2565b9050806001600160a01b0316836001600160a01b031603610d7e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610cc5565b336001600160a01b0382161480610db857506001600160a01b0381166000908152609c6020908152604080832033845290915290205460ff165b610e2a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610cc5565b610e3483836129c2565b505050565b33600090815261013d602052604090205460ff16610e7f5760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b6101325460ff1615610eb95760405162461bcd60e51b815260206004820152600360248201526228181960e91b6044820152606401610cc5565b610132805460ff19166001179055565b60606101348054610bcd906145cf565b600081815261013b60209081526040918290208054835181840281018401909452808452606093849384938493849390929091908390830182828015610f3e57602002820191906000526020600020905b815481526020019060010190808311610f2a575b505050505095508067ffffffffffffffff811115610f5e57610f5e613d6d565b604051908082528060200260200182016040528015610f9157816020015b6060815260200190600190039081610f7c5790505b5094508067ffffffffffffffff811115610fad57610fad613d6d565b604051908082528060200260200182016040528015610fe057816020015b6060815260200190600190039081610fcb5790505b5093508067ffffffffffffffff811115610ffc57610ffc613d6d565b60405190808252806020026020018201604052801561102f57816020015b606081526020019060019003908161101a5790505b5092508067ffffffffffffffff81111561104b5761104b613d6d565b60405190808252806020026020018201604052801561107e57816020015b60608152602001906001900390816110695790505b50915060005b818110156113675761012d5487516001600160a01b039091169063e16f9c3d908990849081106110b6576110b6614609565b60200260200101516040518263ffffffff1660e01b81526004016110dc91815260200190565b600060405180830381865afa1580156110f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111219190810190614664565b86828151811061113357611133614609565b602090810291909101015261012d5487516001600160a01b039091169063db895c399089908490811061116857611168614609565b60200260200101516040518263ffffffff1660e01b815260040161118e91815260200190565b600060405180830381865afa1580156111ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111d39190810190614664565b8582815181106111e5576111e5614609565b602090810291909101015261012d5487516001600160a01b039091169063d10f99cb9089908490811061121a5761121a614609565b60200260200101516040518263ffffffff1660e01b815260040161124091815260200190565b600060405180830381865afa15801561125d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112859190810190614664565b84828151811061129757611297614609565b602090810291909101015261012d5487516001600160a01b0390911690635b2a8efa908990849081106112cc576112cc614609565b60200260200101516040518263ffffffff1660e01b81526004016112f291815260200190565b600060405180830381865afa15801561130f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113379190810190614664565b83828151811061134957611349614609565b6020026020010181905250808061135f906146af565b915050611084565b505091939590929450565b61137c3382612a30565b6113ee5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610cc5565b610e34838383612b27565b61140281611ba2565b6001600160a01b0316336001600160a01b0316146114625760405162461bcd60e51b815260206004820152600360248201527f53303300000000000000000000000000000000000000000000000000000000006044820152606401610cc5565b61012d54600082815261013b60205260409081902090517f5044651d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691635044651d916114bd913391906004016146c8565b600060405180830381600087803b1580156114d757600080fd5b505af11580156114eb573d6000803e3d6000fd5b505050600082815261013b60208181526040808420600181018590558151858152808401928390529487905292909152915161152a93509091906139fd565b5061153481612cf4565b610130805490600061154583614717565b9091555050604051339082907f8d47fd541b28b73f831d6613d064b04739e29e48ec78822fdcfb579cf3c8ecc290600090a350565b61012d546040517f02afd1a10000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906302afd1a1906115c990339087908790600401614779565b600060405180830381600087803b1580156115e357600080fd5b505af11580156115f7573d6000803e3d6000fd5b5050610130805492509050600061160d836146af565b909155505061012f8054915081906000611626836146af565b9190505550610131546101305411156116815760405162461bcd60e51b815260206004820152600a60248201527f4d696e746564206f7574000000000000000000000000000000000000000000006044820152606401610cc5565b33600081815261013c6020908152604080832054905192936116c29390920160609290921b6bffffffffffffffffffffffff19168252601482015260340190565b60408051601f198184030181529181528151602092830120600085815261013b9093529120600181018290559091506116fc908585613a48565b5033600090815261013c60205260408120805491611719836146af565b9190505550336001600160a01b0316827feb3e56751a478e501b86e03de5f91f16dfc366ad53198ff6de3ff4e61119e18086868560405161175c939291906147a5565b60405180910390a361176e3383612d8f565b5092915050565b600054610100900460ff166117905760005460ff1615611794565b303b155b6118065760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610cc5565b600054610100900460ff16158015611828576000805461ffff19166101011790555b6118328787612da9565b61012d80546001600160a01b0319166001600160a01b03871617905561185784612e1e565b6118618383612e70565b8015611873576000805461ff00191690555b50505050505050565b6033546001600160a01b031633146118d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b6118e08282612ee3565b5050565b61013480546118f2906145cf565b80601f016020809104026020016040519081016040528092919081815260200182805461191e906145cf565b801561196b5780601f106119405761010080835404028352916020019161196b565b820191906000526020600020905b81548152906001019060200180831161194e57829003601f168201915b505050505081565b610e348383836040518060200160405280600081525061258b565b8281146119dd5760405162461bcd60e51b815260206004820152600360248201527f4d303100000000000000000000000000000000000000000000000000000000006044820152606401610cc5565b6000805b82811015611a21578383828181106119fb576119fb614609565b9050602002013582611a0d91906147c9565b915080611a19816146af565b9150506119e1565b506000611a2c611fb4565b611a3690836147dc565b905080341015611a625760405162461bcd60e51b81526020600482015260006024820152604401610cc5565b61012d546040517fd81d0a150000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063d81d0a1590611ab49033908a908a908a908a906004016147f3565b600060405180830381600087803b158015611ace57600080fd5b505af1158015611ae2573d6000803e3d6000fd5b505050506000633b9aca006305f5e10083611afd91906147dc565b611b07919061483f565b90508061013a6000828254611b1c91906147c9565b90915550611b2c90508183614853565b6101396000828254611b3e91906147c9565b909155505060405133907f5e69dace42908bf940c680c4fd1884a926e1e39b2c2a350d9a0b96eeed5d32a690611b7b908a908a908a908a90614866565b60405180910390a250505050505050565b611b988686868661198e565b611873828261157a565b6000818152609960205260408120546001600160a01b031680610bb85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610cc5565b33600090815261013d602052604090205460ff16611c735760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b61012e611c8085826148db565b5061013280547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03861602179055610131829055610134611ccc82826148db565b507fb17352bce8f17c44ba2c908b86c48643573f8ec5c4081dfa1e8ba5e1b5518c7384848484604051611d02949392919061499b565b60405180910390a150505050565b61012e80546118f2906145cf565b33600090815261013d602052604090205460ff16611d645760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b6101325460ff16611db75760405162461bcd60e51b815260206004820152600360248201527f4d303300000000000000000000000000000000000000000000000000000000006044820152606401610cc5565b83831015611e075760405162461bcd60e51b815260206004820152600360248201527f4d303500000000000000000000000000000000000000000000000000000000006044820152606401610cc5565b81811115611e575760405162461bcd60e51b815260206004820152600360248201527f4d303600000000000000000000000000000000000000000000000000000000006044820152606401610cc5565b6101358490556101368390556101378290556101388190556040805185815260208101859052908101839052606081018290527f8a50b4310d356a636ffe634f917af814b9c1c8600f92e308f894ae146941093190608001611d02565b60006001600160a01b038216611f325760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610cc5565b506001600160a01b03166000908152609a602052604090205490565b6033546001600160a01b03163314611fa85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b611fb26000612e1e565b565b6000610135544210156120095760405162461bcd60e51b815260206004820152601a60248201527f41756374696f6e206861736e27742073746172746564207965740000000000006044820152606401610cc5565b6101365442111561201c57506101385490565b610135546101365461202e9190614853565b61013854610137546120409190614853565b6101355461204e9042614853565b61205891906147dc565b612062919061483f565b610137546120709190614853565b905090565b606061012e61208383612f56565b604051602001612094929190614a48565b6040516020818303038152906040529050919050565b60608060608060608061012d60009054906101000a90046001600160a01b03166001600160a01b0316637f0429ef6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612107573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261212f9190810190614b48565b949b939a50919850965094509092509050565b6033546001600160a01b0316331461219c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b61013a54806121d35760405162461bcd60e51b81526020600482015260036024820152624d303760e81b6044820152606401610cc5565b600061013a8190556121e6903383612ff6565b6040518181527f0c8d31947f98bc63af39d31a25af89c65e76f11fa8a8cd4edae335eee677b3cc906020015b60405180910390a150565b33600090815261013d602052604090205460ff166122635760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b6101325460ff161561229d5760405162461bcd60e51b815260206004820152600360248201526228181960e91b6044820152606401610cc5565b610134610e34828483614c3d565b6033546001600160a01b031633146123055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b61012e610e34828483614c3d565b606060988054610bcd906145cf565b6033546001600160a01b0316331461237c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b6118e08282612e70565b6118e0338383613076565b33600090815261013d602052604090205460ff166123d75760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b61012d546040517f01c8aa4b0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906301c8aa4b90612433908d908d908d908d908d908d908d908d908d908d90600401614db9565b600060405180830381600087803b15801561244d57600080fd5b505af1158015612461573d6000803e3d6000fd5b5050505050505050505050505050565b61013954806124a85760405162461bcd60e51b81526020600482015260036024820152624d303760e81b6044820152606401610cc5565b60006101398190556124bb903383612ff6565b6040518181527fc63609f37f0a5e3a7ed2911284184dc6ba3a4b8bb831f1e1e469e1ca5dd52ed090602001612212565b33600090815261013d602052604090205460ff166125315760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b6101325460ff161561256b5760405162461bcd60e51b815260206004820152600360248201526228181960e91b6044820152606401610cc5565b600083815261013360205260409020612585828483614c3d565b50505050565b6125953383612a30565b6126075760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610cc5565b61258584848484613144565b6000818152609960205260409020546060906001600160a01b03166126a05760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610cc5565b60006126b760408051602081019091526000815290565b905060008151116126d75760405180602001604052806000815250612702565b806126e1846131c2565b6040516020016126f2929190614e43565b6040516020818303038152906040525b9392505050565b60606000612715612920565b90508067ffffffffffffffff81111561273057612730613d6d565b60405190808252806020026020018201604052801561276357816020015b606081526020019060019003908161274e5790505b50915060005b8181101561283957600081815261013360205260409020805461278b906145cf565b80601f01602080910402602001604051908101604052809291908181526020018280546127b7906145cf565b80156128045780601f106127d957610100808354040283529160200191612804565b820191906000526020600020905b8154815290600101906020018083116127e757829003601f168201915b505050505083828151811061281b5761281b614609565b60200260200101819052508080612831906146af565b915050612769565b505090565b6033546001600160a01b031633146128985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b6001600160a01b0381166129145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610cc5565b61291d81612e1e565b50565b6000805b6040805160008082526020808301808552835190208583526101339091529083902090926129529201614e69565b604051602081830303815290604052805190602001201461297f5780612977816146af565b915050612924565b919050565b60006001600160e01b031982167f4e2312e0000000000000000000000000000000000000000000000000000000001480610bb85750610bb8826132f7565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b03841690811790915581906129f782611ba2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152609960205260408120546001600160a01b0316612aa95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610cc5565b6000612ab483611ba2565b9050806001600160a01b0316846001600160a01b03161480612aef5750836001600160a01b0316612ae484610c50565b6001600160a01b0316145b80612b1f57506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316612b3a82611ba2565b6001600160a01b031614612bb65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610cc5565b6001600160a01b038216612c315760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610cc5565b612c3c6000826129c2565b6001600160a01b0383166000908152609a60205260408120805460019290612c65908490614853565b90915550506001600160a01b0382166000908152609a60205260408120805460019290612c939084906147c9565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000612cff82611ba2565b9050612d0c6000836129c2565b6001600160a01b0381166000908152609a60205260408120805460019290612d35908490614853565b909155505060008281526099602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6118e0828260405180602001604052806000815250613392565b600054610100900460ff16612e145760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610cc5565b6118e08282613410565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b81811015610e3457600161013d6000858585818110612e9457612e94614609565b9050602002016020810190612ea99190613d52565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580612edb816146af565b915050612e73565b60005b81811015610e3457600061013d6000858585818110612f0757612f07614609565b9050602002016020810190612f1c9190613d52565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580612f4e816146af565b915050612ee6565b60606000612f6383613494565b600101905060008167ffffffffffffffff811115612f8357612f83613d6d565b6040519080825280601f01601f191660200182016040528015612fad576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084612fb757509392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e34908490613576565b816001600160a01b0316836001600160a01b0316036130d75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610cc5565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61314f848484612b27565b61315b8484848461365b565b6125855760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610cc5565b60608160000361320557505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561322f5780613219816146af565b91506132289050600a8361483f565b9150613209565b60008167ffffffffffffffff81111561324a5761324a613d6d565b6040519080825280601f01601f191660200182016040528015613274576020820181803683370190505b5090505b8415612b1f57613289600183614853565b9150613296600a86614e75565b6132a19060306147c9565b60f81b8183815181106132b6576132b6614609565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506132f0600a8661483f565b9450613278565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061335a57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610bb857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610bb8565b61339c83836137a7565b6133a9600084848461365b565b610e345760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610cc5565b600054610100900460ff1661347b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610cc5565b609761348783826148db565b506098610e3482826148db565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106134dd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310613509576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061352757662386f26fc10000830492506010015b6305f5e100831061353f576305f5e100830492506008015b612710831061355357612710830492506004015b60648310613565576064830492506002015b600a8310610bb85760010192915050565b60006135cb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138e99092919063ffffffff16565b805190915015610e3457808060200190518101906135e99190614e89565b610e345760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610cc5565b60006001600160a01b0384163b1561379c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061369f903390899088908890600401614ea6565b6020604051808303816000875af19250505080156136da575060408051601f3d908101601f191682019092526136d791810190614ee2565b60015b613782573d808015613708576040519150601f19603f3d011682016040523d82523d6000602084013e61370d565b606091505b50805160000361377a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610cc5565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612b1f565b506001949350505050565b6001600160a01b0382166137fd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610cc5565b6000818152609960205260409020546001600160a01b0316156138625760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610cc5565b6001600160a01b0382166000908152609a6020526040812080546001929061388b9084906147c9565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060612b1f8484600085856001600160a01b0385163b61394b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cc5565b600080866001600160a01b031685876040516139679190614eff565b60006040518083038185875af1925050503d80600081146139a4576040519150601f19603f3d011682016040523d82523d6000602084013e6139a9565b606091505b50915091506139b98282866139c4565b979650505050505050565b606083156139d3575081612702565b8251156139e35782518084602001fd5b8160405162461bcd60e51b8152600401610cc59190613b1b565b828054828255906000526020600020908101928215613a38579160200282015b82811115613a38578251825591602001919060010190613a1d565b50613a44929150613a83565b5090565b828054828255906000526020600020908101928215613a38579160200282015b82811115613a38578235825591602001919060010190613a68565b5b80821115613a445760008155600101613a84565b6001600160e01b03198116811461291d57600080fd5b600060208284031215613ac057600080fd5b813561270281613a98565b60005b83811015613ae6578181015183820152602001613ace565b50506000910152565b60008151808452613b07816020860160208601613acb565b601f01601f19169290920160200192915050565b6020815260006127026020830184613aef565b600060208284031215613b4057600080fd5b5035919050565b80356001600160a01b038116811461297f57600080fd5b60008060408385031215613b7157600080fd5b613b7a83613b47565b946020939093013593505050565b600081518084526020808501945080840160005b83811015613bb857815187529582019590820190600101613b9c565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b84811015613c0e57601f19868403018952613bfc838351613aef565b98840198925090830190600101613be0565b5090979650505050505050565b60a081526000613c2e60a0830188613b88565b8281036020840152613c408188613bc3565b90508281036040840152613c548187613bc3565b90508281036060840152613c688186613bc3565b90508281036080840152613c7c8185613bc3565b98975050505050505050565b600080600060608486031215613c9d57600080fd5b613ca684613b47565b9250613cb460208501613b47565b9150604084013590509250925092565b60008083601f840112613cd657600080fd5b50813567ffffffffffffffff811115613cee57600080fd5b6020830191508360208260051b8501011115613d0957600080fd5b9250929050565b60008060208385031215613d2357600080fd5b823567ffffffffffffffff811115613d3a57600080fd5b613d4685828601613cc4565b90969095509350505050565b600060208284031215613d6457600080fd5b61270282613b47565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613dac57613dac613d6d565b604052919050565b600067ffffffffffffffff821115613dce57613dce613d6d565b50601f01601f191660200190565b600082601f830112613ded57600080fd5b8135613e00613dfb82613db4565b613d83565b818152846020838601011115613e1557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060a08789031215613e4b57600080fd5b863567ffffffffffffffff80821115613e6357600080fd5b613e6f8a838b01613ddc565b97506020890135915080821115613e8557600080fd5b613e918a838b01613ddc565b9650613e9f60408a01613b47565b9550613ead60608a01613b47565b94506080890135915080821115613ec357600080fd5b50613ed089828a01613cc4565b979a9699509497509295939492505050565b60008060008060408587031215613ef857600080fd5b843567ffffffffffffffff80821115613f1057600080fd5b613f1c88838901613cc4565b90965094506020870135915080821115613f3557600080fd5b50613f4287828801613cc4565b95989497509550505050565b60008060008060008060608789031215613f6757600080fd5b863567ffffffffffffffff80821115613f7f57600080fd5b613f8b8a838b01613cc4565b90985096506020890135915080821115613fa457600080fd5b613fb08a838b01613cc4565b90965094506040890135915080821115613ec357600080fd5b60008060008060808587031215613fdf57600080fd5b843567ffffffffffffffff80821115613ff757600080fd5b61400388838901613ddc565b955061401160208801613b47565b945060408701359350606087013591508082111561402e57600080fd5b5061403b87828801613ddc565b91505092959194509250565b6000806000806080858703121561405d57600080fd5b5050823594602084013594506040840135936060013592509050565b60c08152600061408c60c0830189613b88565b828103602084015261409e8189613bc3565b905082810360408401526140b28188613bc3565b905082810360608401526140c68187613b88565b905082810360808401526140da8186613bc3565b905082810360a08401526140ee8185613bc3565b9998505050505050505050565b60008083601f84011261410d57600080fd5b50813567ffffffffffffffff81111561412557600080fd5b602083019150836020828501011115613d0957600080fd5b6000806020838503121561415057600080fd5b823567ffffffffffffffff81111561416757600080fd5b613d46858286016140fb565b801515811461291d57600080fd5b6000806040838503121561419457600080fd5b61419d83613b47565b915060208301356141ad81614173565b809150509250929050565b600067ffffffffffffffff8211156141d2576141d2613d6d565b5060051b60200190565b600082601f8301126141ed57600080fd5b813560206141fd613dfb836141b8565b82815260059290921b8401810191818101908684111561421c57600080fd5b8286015b8481101561425c57803567ffffffffffffffff8111156142405760008081fd5b61424e8986838b0101613ddc565b845250918301918301614220565b509695505050505050565b60008060008060008060008060008060c08b8d03121561428657600080fd5b8a3567ffffffffffffffff8082111561429e57600080fd5b6142aa8e838f016141dc565b9b5060208d01359150808211156142c057600080fd5b6142cc8e838f016141dc565b9a5060408d01359150808211156142e257600080fd5b6142ee8e838f01613cc4565b909a50985060608d013591508082111561430757600080fd5b6143138e838f01613cc4565b909850965060808d013591508082111561432c57600080fd5b6143388e838f01613cc4565b909650945060a08d013591508082111561435157600080fd5b5061435e8d828e01613cc4565b915080935050809150509295989b9194979a5092959850565b60008060006040848603121561438c57600080fd5b83359250602084013567ffffffffffffffff8111156143aa57600080fd5b6143b6868287016140fb565b9497909650939450505050565b600080600080608085870312156143d957600080fd5b6143e285613b47565b93506143f060208601613b47565b925060408501359150606085013567ffffffffffffffff81111561441357600080fd5b61403b87828801613ddc565b600082601f83011261443057600080fd5b81356020614440613dfb836141b8565b82815260059290921b8401810191818101908684111561445f57600080fd5b8286015b8481101561425c5780358352918301918301614463565b600080600080600060a0868803121561449257600080fd5b61449b86613b47565b94506144a960208701613b47565b9350604086013567ffffffffffffffff808211156144c657600080fd5b6144d289838a0161441f565b945060608801359150808211156144e857600080fd5b6144f489838a0161441f565b9350608088013591508082111561450a57600080fd5b5061451788828901613ddc565b9150509295509295909350565b6020815260006127026020830184613bc3565b6000806040838503121561454a57600080fd5b61455383613b47565b915061456160208401613b47565b90509250929050565b600080600080600060a0868803121561458257600080fd5b61458b86613b47565b945061459960208701613b47565b93506040860135925060608601359150608086013567ffffffffffffffff8111156145c357600080fd5b61451788828901613ddc565b600181811c908216806145e357607f821691505b60208210810361460357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261463057600080fd5b815161463e613dfb82613db4565b81815284602083860101111561465357600080fd5b612b1f826020830160208701613acb565b60006020828403121561467657600080fd5b815167ffffffffffffffff81111561468d57600080fd5b612b1f8482850161461f565b634e487b7160e01b600052601160045260246000fd5b6000600182016146c1576146c1614699565b5060010190565b6000604082016001600160a01b038516835260206040818501528185548084526060860191508660005282600020935060005b81811015613c0e578454835260019485019492840192016146fb565b60008161472657614726614699565b506000190190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561476057600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b038416815260406020820152600061479c60408301848661472e565b95945050505050565b6040815260006147b960408301858761472e565b9050826020830152949350505050565b80820180821115610bb857610bb8614699565b8082028115828204841417610bb857610bb8614699565b6001600160a01b038616815260606020820152600061481660608301868861472e565b8281036040840152613c7c81858761472e565b634e487b7160e01b600052601260045260246000fd5b60008261484e5761484e614829565b500490565b81810381811115610bb857610bb8614699565b60408152600061487a60408301868861472e565b82810360208401526139b981858761472e565b601f821115610e3457600081815260208120601f850160051c810160208610156148b45750805b601f850160051c820191505b818110156148d3578281556001016148c0565b505050505050565b815167ffffffffffffffff8111156148f5576148f5613d6d565b6149098161490384546145cf565b8461488d565b602080601f83116001811461493e57600084156149265750858301515b600019600386901b1c1916600185901b1785556148d3565b600085815260208120601f198616915b8281101561496d5788860151825594840194600190910190840161494e565b508582101561498b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080815260006149ae6080830187613aef565b6001600160a01b038616602084015284604084015282810360608401526139b98185613aef565b600081546149e2816145cf565b600182811680156149fa5760018114614a0f57614a3e565b60ff1984168752821515830287019450614a3e565b8560005260208060002060005b85811015614a355781548a820152908401908201614a1c565b50505082870194505b5050505092915050565b6000614a5482856149d5565b8351614a64818360208801613acb565b01949350505050565b600082601f830112614a7e57600080fd5b81516020614a8e613dfb836141b8565b82815260059290921b84018101918181019086841115614aad57600080fd5b8286015b8481101561425c5780518352918301918301614ab1565b600082601f830112614ad957600080fd5b81516020614ae9613dfb836141b8565b82815260059290921b84018101918181019086841115614b0857600080fd5b8286015b8481101561425c57805167ffffffffffffffff811115614b2c5760008081fd5b614b3a8986838b010161461f565b845250918301918301614b0c565b60008060008060008060c08789031215614b6157600080fd5b865167ffffffffffffffff80821115614b7957600080fd5b614b858a838b01614a6d565b97506020890151915080821115614b9b57600080fd5b614ba78a838b01614ac8565b96506040890151915080821115614bbd57600080fd5b614bc98a838b01614ac8565b95506060890151915080821115614bdf57600080fd5b614beb8a838b01614a6d565b94506080890151915080821115614c0157600080fd5b614c0d8a838b01614ac8565b935060a0890151915080821115614c2357600080fd5b50614c3089828a01614ac8565b9150509295509295509295565b67ffffffffffffffff831115614c5557614c55613d6d565b614c6983614c6383546145cf565b8361488d565b6000601f841160018114614c9d5760008515614c855750838201355b600019600387901b1c1916600186901b178355614cf7565b600083815260209020601f19861690835b82811015614cce5786850135825560209485019460019092019101614cae565b5086821015614ceb5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b87811015614dac5782840389528135601e19883603018112614d6257600080fd5b8701858101903567ffffffffffffffff811115614d7e57600080fd5b803603821315614d8d57600080fd5b614d98868284614cfe565b9a87019a9550505090840190600101614d41565b5091979650505050505050565b60c081526000614dcc60c083018d613bc3565b8281036020840152614dde818d613bc3565b90508281036040840152614df3818b8d614d27565b90508281036060840152614e0881898b614d27565b90508281036080840152614e1d81878961472e565b905082810360a0840152614e3281858761472e565b9d9c50505050505050505050505050565b60008351614e55818460208801613acb565b835190830190614a64818360208801613acb565b600061270282846149d5565b600082614e8457614e84614829565b500690565b600060208284031215614e9b57600080fd5b815161270281614173565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614ed86080830184613aef565b9695505050505050565b600060208284031215614ef457600080fd5b815161270281613a98565b60008251614f11818460208701613acb565b919091019291505056fea26469706673582212207fb266ccbf702d32aa314008cf394f0e86f529272af6cbb5df9c05a882dbb90864736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103975760003560e01c80637bd1085b116101dc578063b88d4fde11610102578063d7eb3f3a116100a0578063eb54f9ec1161006f578063eb54f9ec14610ae9578063f23a6e6114610b00578063f2fde38b14610b45578063f501c2c314610b6557600080fd5b8063d7eb3f3a14610a37578063e1fc334f14610a5d578063e785475114610a7e578063e985e9c514610aa057600080fd5b8063c87b56dd116100dc578063c87b56dd146109cd578063cf309012146109ed578063d73792a914610a08578063d756985b14610a2057600080fd5b8063b88d4fde14610938578063bc197c8114610958578063bcfbb611146109b657600080fd5b8063931688cb1161017a578063a22cb46511610149578063a22cb465146108c3578063a479cf04146108e3578063a713b02914610903578063b155d57e1461091857600080fd5b8063931688cb1461085757806395d89b41146108775780639c54df641461088c578063a04a6ac8146108ac57600080fd5b80638705e6a4116101b65780638705e6a4146107ec5780638da5cb5b146108045780638ecd895514610822578063918b5be11461083757600080fd5b80637bd1085b1461076b5780637f0429ef1461078b578063822b0ceb146107b257600080fd5b806331416a29116102c15780636352211e1161025f5780636cb801171161022e5780636cb801171461070157806370a0823114610721578063715018a61461074157806376f03dbb1461075657600080fd5b80636352211e1461067b57806367add6e51461069b578063685fe5e6146106bb5780636c0360eb146106ec57600080fd5b806342842e0e1161029b57806342842e0e1461061e57806345ce1fd11461063e5780634b449cba146106515780635711c2e61461066857600080fd5b806331416a29146105c9578063377e11e0146105e9578063392f37e91461060957600080fd5b80631af9fd17116103395780632cca7bb0116103085780632cca7bb01461052a5780632d9bace01461055b5780632dafcb221461057b5780632f7801f41461059b57600080fd5b80631af9fd17146104a05780631b1b7120146104b557806323b872dd146104e65780632504aaa81461050657600080fd5b8063095ea7b311610375578063095ea7b31461042b5780630bdc21cb1461044d578063100f1f321461047257806314e6d3d41461048b57600080fd5b806301ffc9a71461039c57806306fdde03146103d1578063081812fc146103f3575b600080fd5b3480156103a857600080fd5b506103bc6103b7366004613aae565b610b7a565b60405190151581526020015b60405180910390f35b3480156103dd57600080fd5b506103e6610bbe565b6040516103c89190613b1b565b3480156103ff57600080fd5b5061041361040e366004613b2e565b610c50565b6040516001600160a01b0390911681526020016103c8565b34801561043757600080fd5b5061044b610446366004613b5e565b610cea565b005b34801561045957600080fd5b506104646101395481565b6040519081526020016103c8565b34801561047e57600080fd5b506101325460ff166103bc565b34801561049757600080fd5b5061044b610e39565b3480156104ac57600080fd5b506103e6610ec9565b3480156104c157600080fd5b506104d56104d0366004613b2e565b610ed9565b6040516103c8959493929190613c1b565b3480156104f257600080fd5b5061044b610501366004613c88565b611372565b34801561051257600080fd5b506101325461010090046001600160a01b0316610413565b34801561053657600080fd5b50610464610545366004613b2e565b600090815261013b602052604090206001015490565b34801561056757600080fd5b5061044b610576366004613b2e565b6113f9565b34801561058757600080fd5b50610464610596366004613d10565b61157a565b3480156105a757600080fd5b506104646105b6366004613d52565b61013c6020526000908152604090205481565b3480156105d557600080fd5b5061044b6105e4366004613e32565b611775565b3480156105f557600080fd5b5061044b610604366004613d10565b61187c565b34801561061557600080fd5b506103e66118e4565b34801561062a57600080fd5b5061044b610639366004613c88565b611973565b61044b61064c366004613ee2565b61198e565b34801561065d57600080fd5b506104646101365481565b61044b610676366004613f4e565b611b8c565b34801561068757600080fd5b50610413610696366004613b2e565b611ba2565b3480156106a757600080fd5b5061044b6106b6366004613fc9565b611c2d565b3480156106c757600080fd5b506104646106d6366004613b2e565b61013b6020526000908152604090206001015481565b3480156106f857600080fd5b506103e6611d10565b34801561070d57600080fd5b5061044b61071c366004614047565b611d1e565b34801561072d57600080fd5b5061046461073c366004613d52565b611eb4565b34801561074d57600080fd5b5061044b611f4e565b34801561076257600080fd5b50610464611fb4565b34801561077757600080fd5b506103e6610786366004613b2e565b612075565b34801561079757600080fd5b506107a06120aa565b6040516103c896959493929190614079565b3480156107be57600080fd5b506103bc6107cd366004613d52565b6001600160a01b0316600090815261013d602052604090205460ff1690565b3480156107f857600080fd5b506104646305f5e10081565b34801561081057600080fd5b506033546001600160a01b0316610413565b34801561082e57600080fd5b5061044b612142565b34801561084357600080fd5b5061044b61085236600461413d565b61221d565b34801561086357600080fd5b5061044b61087236600461413d565b6122ab565b34801561088357600080fd5b506103e6612313565b34801561089857600080fd5b5061044b6108a7366004613d10565b612322565b3480156108b857600080fd5b506104646101385481565b3480156108cf57600080fd5b5061044b6108de366004614181565b612386565b3480156108ef57600080fd5b5061044b6108fe366004614267565b612391565b34801561090f57600080fd5b5061044b612471565b34801561092457600080fd5b5061044b610933366004614377565b6124eb565b34801561094457600080fd5b5061044b6109533660046143c3565b61258b565b34801561096457600080fd5b5061099d61097336600461447a565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040516001600160e01b031990911681526020016103c8565b3480156109c257600080fd5b5061046461013a5481565b3480156109d957600080fd5b506103e66109e8366004613b2e565b612613565b3480156109f957600080fd5b50610132546103bc9060ff1681565b348015610a1457600080fd5b50610464633b9aca0081565b348015610a2c57600080fd5b506104646101375481565b348015610a4357600080fd5b50610132546104139061010090046001600160a01b031681565b348015610a6957600080fd5b5061012d54610413906001600160a01b031681565b348015610a8a57600080fd5b50610a93612709565b6040516103c89190614524565b348015610aac57600080fd5b506103bc610abb366004614537565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b348015610af557600080fd5b506104646101355481565b348015610b0c57600080fd5b5061099d610b1b36600461456a565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b348015610b5157600080fd5b5061044b610b60366004613d52565b61283e565b348015610b7157600080fd5b50610464612920565b60006001600160e01b031982167fcf309012000000000000000000000000000000000000000000000000000000001480610bb85750610bb882612984565b92915050565b606060978054610bcd906145cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf9906145cf565b8015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b5050505050905090565b6000818152609960205260408120546001600160a01b0316610cce5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b6000610cf582611ba2565b9050806001600160a01b0316836001600160a01b031603610d7e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610cc5565b336001600160a01b0382161480610db857506001600160a01b0381166000908152609c6020908152604080832033845290915290205460ff165b610e2a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610cc5565b610e3483836129c2565b505050565b33600090815261013d602052604090205460ff16610e7f5760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b6101325460ff1615610eb95760405162461bcd60e51b815260206004820152600360248201526228181960e91b6044820152606401610cc5565b610132805460ff19166001179055565b60606101348054610bcd906145cf565b600081815261013b60209081526040918290208054835181840281018401909452808452606093849384938493849390929091908390830182828015610f3e57602002820191906000526020600020905b815481526020019060010190808311610f2a575b505050505095508067ffffffffffffffff811115610f5e57610f5e613d6d565b604051908082528060200260200182016040528015610f9157816020015b6060815260200190600190039081610f7c5790505b5094508067ffffffffffffffff811115610fad57610fad613d6d565b604051908082528060200260200182016040528015610fe057816020015b6060815260200190600190039081610fcb5790505b5093508067ffffffffffffffff811115610ffc57610ffc613d6d565b60405190808252806020026020018201604052801561102f57816020015b606081526020019060019003908161101a5790505b5092508067ffffffffffffffff81111561104b5761104b613d6d565b60405190808252806020026020018201604052801561107e57816020015b60608152602001906001900390816110695790505b50915060005b818110156113675761012d5487516001600160a01b039091169063e16f9c3d908990849081106110b6576110b6614609565b60200260200101516040518263ffffffff1660e01b81526004016110dc91815260200190565b600060405180830381865afa1580156110f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111219190810190614664565b86828151811061113357611133614609565b602090810291909101015261012d5487516001600160a01b039091169063db895c399089908490811061116857611168614609565b60200260200101516040518263ffffffff1660e01b815260040161118e91815260200190565b600060405180830381865afa1580156111ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111d39190810190614664565b8582815181106111e5576111e5614609565b602090810291909101015261012d5487516001600160a01b039091169063d10f99cb9089908490811061121a5761121a614609565b60200260200101516040518263ffffffff1660e01b815260040161124091815260200190565b600060405180830381865afa15801561125d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112859190810190614664565b84828151811061129757611297614609565b602090810291909101015261012d5487516001600160a01b0390911690635b2a8efa908990849081106112cc576112cc614609565b60200260200101516040518263ffffffff1660e01b81526004016112f291815260200190565b600060405180830381865afa15801561130f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113379190810190614664565b83828151811061134957611349614609565b6020026020010181905250808061135f906146af565b915050611084565b505091939590929450565b61137c3382612a30565b6113ee5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610cc5565b610e34838383612b27565b61140281611ba2565b6001600160a01b0316336001600160a01b0316146114625760405162461bcd60e51b815260206004820152600360248201527f53303300000000000000000000000000000000000000000000000000000000006044820152606401610cc5565b61012d54600082815261013b60205260409081902090517f5044651d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691635044651d916114bd913391906004016146c8565b600060405180830381600087803b1580156114d757600080fd5b505af11580156114eb573d6000803e3d6000fd5b505050600082815261013b60208181526040808420600181018590558151858152808401928390529487905292909152915161152a93509091906139fd565b5061153481612cf4565b610130805490600061154583614717565b9091555050604051339082907f8d47fd541b28b73f831d6613d064b04739e29e48ec78822fdcfb579cf3c8ecc290600090a350565b61012d546040517f02afd1a10000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906302afd1a1906115c990339087908790600401614779565b600060405180830381600087803b1580156115e357600080fd5b505af11580156115f7573d6000803e3d6000fd5b5050610130805492509050600061160d836146af565b909155505061012f8054915081906000611626836146af565b9190505550610131546101305411156116815760405162461bcd60e51b815260206004820152600a60248201527f4d696e746564206f7574000000000000000000000000000000000000000000006044820152606401610cc5565b33600081815261013c6020908152604080832054905192936116c29390920160609290921b6bffffffffffffffffffffffff19168252601482015260340190565b60408051601f198184030181529181528151602092830120600085815261013b9093529120600181018290559091506116fc908585613a48565b5033600090815261013c60205260408120805491611719836146af565b9190505550336001600160a01b0316827feb3e56751a478e501b86e03de5f91f16dfc366ad53198ff6de3ff4e61119e18086868560405161175c939291906147a5565b60405180910390a361176e3383612d8f565b5092915050565b600054610100900460ff166117905760005460ff1615611794565b303b155b6118065760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610cc5565b600054610100900460ff16158015611828576000805461ffff19166101011790555b6118328787612da9565b61012d80546001600160a01b0319166001600160a01b03871617905561185784612e1e565b6118618383612e70565b8015611873576000805461ff00191690555b50505050505050565b6033546001600160a01b031633146118d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b6118e08282612ee3565b5050565b61013480546118f2906145cf565b80601f016020809104026020016040519081016040528092919081815260200182805461191e906145cf565b801561196b5780601f106119405761010080835404028352916020019161196b565b820191906000526020600020905b81548152906001019060200180831161194e57829003601f168201915b505050505081565b610e348383836040518060200160405280600081525061258b565b8281146119dd5760405162461bcd60e51b815260206004820152600360248201527f4d303100000000000000000000000000000000000000000000000000000000006044820152606401610cc5565b6000805b82811015611a21578383828181106119fb576119fb614609565b9050602002013582611a0d91906147c9565b915080611a19816146af565b9150506119e1565b506000611a2c611fb4565b611a3690836147dc565b905080341015611a625760405162461bcd60e51b81526020600482015260006024820152604401610cc5565b61012d546040517fd81d0a150000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063d81d0a1590611ab49033908a908a908a908a906004016147f3565b600060405180830381600087803b158015611ace57600080fd5b505af1158015611ae2573d6000803e3d6000fd5b505050506000633b9aca006305f5e10083611afd91906147dc565b611b07919061483f565b90508061013a6000828254611b1c91906147c9565b90915550611b2c90508183614853565b6101396000828254611b3e91906147c9565b909155505060405133907f5e69dace42908bf940c680c4fd1884a926e1e39b2c2a350d9a0b96eeed5d32a690611b7b908a908a908a908a90614866565b60405180910390a250505050505050565b611b988686868661198e565b611873828261157a565b6000818152609960205260408120546001600160a01b031680610bb85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610cc5565b33600090815261013d602052604090205460ff16611c735760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b61012e611c8085826148db565b5061013280547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03861602179055610131829055610134611ccc82826148db565b507fb17352bce8f17c44ba2c908b86c48643573f8ec5c4081dfa1e8ba5e1b5518c7384848484604051611d02949392919061499b565b60405180910390a150505050565b61012e80546118f2906145cf565b33600090815261013d602052604090205460ff16611d645760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b6101325460ff16611db75760405162461bcd60e51b815260206004820152600360248201527f4d303300000000000000000000000000000000000000000000000000000000006044820152606401610cc5565b83831015611e075760405162461bcd60e51b815260206004820152600360248201527f4d303500000000000000000000000000000000000000000000000000000000006044820152606401610cc5565b81811115611e575760405162461bcd60e51b815260206004820152600360248201527f4d303600000000000000000000000000000000000000000000000000000000006044820152606401610cc5565b6101358490556101368390556101378290556101388190556040805185815260208101859052908101839052606081018290527f8a50b4310d356a636ffe634f917af814b9c1c8600f92e308f894ae146941093190608001611d02565b60006001600160a01b038216611f325760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610cc5565b506001600160a01b03166000908152609a602052604090205490565b6033546001600160a01b03163314611fa85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b611fb26000612e1e565b565b6000610135544210156120095760405162461bcd60e51b815260206004820152601a60248201527f41756374696f6e206861736e27742073746172746564207965740000000000006044820152606401610cc5565b6101365442111561201c57506101385490565b610135546101365461202e9190614853565b61013854610137546120409190614853565b6101355461204e9042614853565b61205891906147dc565b612062919061483f565b610137546120709190614853565b905090565b606061012e61208383612f56565b604051602001612094929190614a48565b6040516020818303038152906040529050919050565b60608060608060608061012d60009054906101000a90046001600160a01b03166001600160a01b0316637f0429ef6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612107573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261212f9190810190614b48565b949b939a50919850965094509092509050565b6033546001600160a01b0316331461219c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b61013a54806121d35760405162461bcd60e51b81526020600482015260036024820152624d303760e81b6044820152606401610cc5565b600061013a8190556121e6903383612ff6565b6040518181527f0c8d31947f98bc63af39d31a25af89c65e76f11fa8a8cd4edae335eee677b3cc906020015b60405180910390a150565b33600090815261013d602052604090205460ff166122635760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b6101325460ff161561229d5760405162461bcd60e51b815260206004820152600360248201526228181960e91b6044820152606401610cc5565b610134610e34828483614c3d565b6033546001600160a01b031633146123055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b61012e610e34828483614c3d565b606060988054610bcd906145cf565b6033546001600160a01b0316331461237c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b6118e08282612e70565b6118e0338383613076565b33600090815261013d602052604090205460ff166123d75760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b61012d546040517f01c8aa4b0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906301c8aa4b90612433908d908d908d908d908d908d908d908d908d908d90600401614db9565b600060405180830381600087803b15801561244d57600080fd5b505af1158015612461573d6000803e3d6000fd5b5050505050505050505050505050565b61013954806124a85760405162461bcd60e51b81526020600482015260036024820152624d303760e81b6044820152606401610cc5565b60006101398190556124bb903383612ff6565b6040518181527fc63609f37f0a5e3a7ed2911284184dc6ba3a4b8bb831f1e1e469e1ca5dd52ed090602001612212565b33600090815261013d602052604090205460ff166125315760405162461bcd60e51b815260206004820152600360248201526250303160e81b6044820152606401610cc5565b6101325460ff161561256b5760405162461bcd60e51b815260206004820152600360248201526228181960e91b6044820152606401610cc5565b600083815261013360205260409020612585828483614c3d565b50505050565b6125953383612a30565b6126075760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610cc5565b61258584848484613144565b6000818152609960205260409020546060906001600160a01b03166126a05760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610cc5565b60006126b760408051602081019091526000815290565b905060008151116126d75760405180602001604052806000815250612702565b806126e1846131c2565b6040516020016126f2929190614e43565b6040516020818303038152906040525b9392505050565b60606000612715612920565b90508067ffffffffffffffff81111561273057612730613d6d565b60405190808252806020026020018201604052801561276357816020015b606081526020019060019003908161274e5790505b50915060005b8181101561283957600081815261013360205260409020805461278b906145cf565b80601f01602080910402602001604051908101604052809291908181526020018280546127b7906145cf565b80156128045780601f106127d957610100808354040283529160200191612804565b820191906000526020600020905b8154815290600101906020018083116127e757829003601f168201915b505050505083828151811061281b5761281b614609565b60200260200101819052508080612831906146af565b915050612769565b505090565b6033546001600160a01b031633146128985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610cc5565b6001600160a01b0381166129145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610cc5565b61291d81612e1e565b50565b6000805b6040805160008082526020808301808552835190208583526101339091529083902090926129529201614e69565b604051602081830303815290604052805190602001201461297f5780612977816146af565b915050612924565b919050565b60006001600160e01b031982167f4e2312e0000000000000000000000000000000000000000000000000000000001480610bb85750610bb8826132f7565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b03841690811790915581906129f782611ba2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152609960205260408120546001600160a01b0316612aa95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610cc5565b6000612ab483611ba2565b9050806001600160a01b0316846001600160a01b03161480612aef5750836001600160a01b0316612ae484610c50565b6001600160a01b0316145b80612b1f57506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316612b3a82611ba2565b6001600160a01b031614612bb65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610cc5565b6001600160a01b038216612c315760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610cc5565b612c3c6000826129c2565b6001600160a01b0383166000908152609a60205260408120805460019290612c65908490614853565b90915550506001600160a01b0382166000908152609a60205260408120805460019290612c939084906147c9565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000612cff82611ba2565b9050612d0c6000836129c2565b6001600160a01b0381166000908152609a60205260408120805460019290612d35908490614853565b909155505060008281526099602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6118e0828260405180602001604052806000815250613392565b600054610100900460ff16612e145760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610cc5565b6118e08282613410565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b81811015610e3457600161013d6000858585818110612e9457612e94614609565b9050602002016020810190612ea99190613d52565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580612edb816146af565b915050612e73565b60005b81811015610e3457600061013d6000858585818110612f0757612f07614609565b9050602002016020810190612f1c9190613d52565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580612f4e816146af565b915050612ee6565b60606000612f6383613494565b600101905060008167ffffffffffffffff811115612f8357612f83613d6d565b6040519080825280601f01601f191660200182016040528015612fad576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084612fb757509392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e34908490613576565b816001600160a01b0316836001600160a01b0316036130d75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610cc5565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61314f848484612b27565b61315b8484848461365b565b6125855760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610cc5565b60608160000361320557505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561322f5780613219816146af565b91506132289050600a8361483f565b9150613209565b60008167ffffffffffffffff81111561324a5761324a613d6d565b6040519080825280601f01601f191660200182016040528015613274576020820181803683370190505b5090505b8415612b1f57613289600183614853565b9150613296600a86614e75565b6132a19060306147c9565b60f81b8183815181106132b6576132b6614609565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506132f0600a8661483f565b9450613278565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061335a57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610bb857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610bb8565b61339c83836137a7565b6133a9600084848461365b565b610e345760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610cc5565b600054610100900460ff1661347b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610cc5565b609761348783826148db565b506098610e3482826148db565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106134dd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310613509576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061352757662386f26fc10000830492506010015b6305f5e100831061353f576305f5e100830492506008015b612710831061355357612710830492506004015b60648310613565576064830492506002015b600a8310610bb85760010192915050565b60006135cb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138e99092919063ffffffff16565b805190915015610e3457808060200190518101906135e99190614e89565b610e345760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610cc5565b60006001600160a01b0384163b1561379c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061369f903390899088908890600401614ea6565b6020604051808303816000875af19250505080156136da575060408051601f3d908101601f191682019092526136d791810190614ee2565b60015b613782573d808015613708576040519150601f19603f3d011682016040523d82523d6000602084013e61370d565b606091505b50805160000361377a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610cc5565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612b1f565b506001949350505050565b6001600160a01b0382166137fd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610cc5565b6000818152609960205260409020546001600160a01b0316156138625760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610cc5565b6001600160a01b0382166000908152609a6020526040812080546001929061388b9084906147c9565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060612b1f8484600085856001600160a01b0385163b61394b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cc5565b600080866001600160a01b031685876040516139679190614eff565b60006040518083038185875af1925050503d80600081146139a4576040519150601f19603f3d011682016040523d82523d6000602084013e6139a9565b606091505b50915091506139b98282866139c4565b979650505050505050565b606083156139d3575081612702565b8251156139e35782518084602001fd5b8160405162461bcd60e51b8152600401610cc59190613b1b565b828054828255906000526020600020908101928215613a38579160200282015b82811115613a38578251825591602001919060010190613a1d565b50613a44929150613a83565b5090565b828054828255906000526020600020908101928215613a38579160200282015b82811115613a38578235825591602001919060010190613a68565b5b80821115613a445760008155600101613a84565b6001600160e01b03198116811461291d57600080fd5b600060208284031215613ac057600080fd5b813561270281613a98565b60005b83811015613ae6578181015183820152602001613ace565b50506000910152565b60008151808452613b07816020860160208601613acb565b601f01601f19169290920160200192915050565b6020815260006127026020830184613aef565b600060208284031215613b4057600080fd5b5035919050565b80356001600160a01b038116811461297f57600080fd5b60008060408385031215613b7157600080fd5b613b7a83613b47565b946020939093013593505050565b600081518084526020808501945080840160005b83811015613bb857815187529582019590820190600101613b9c565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b84811015613c0e57601f19868403018952613bfc838351613aef565b98840198925090830190600101613be0565b5090979650505050505050565b60a081526000613c2e60a0830188613b88565b8281036020840152613c408188613bc3565b90508281036040840152613c548187613bc3565b90508281036060840152613c688186613bc3565b90508281036080840152613c7c8185613bc3565b98975050505050505050565b600080600060608486031215613c9d57600080fd5b613ca684613b47565b9250613cb460208501613b47565b9150604084013590509250925092565b60008083601f840112613cd657600080fd5b50813567ffffffffffffffff811115613cee57600080fd5b6020830191508360208260051b8501011115613d0957600080fd5b9250929050565b60008060208385031215613d2357600080fd5b823567ffffffffffffffff811115613d3a57600080fd5b613d4685828601613cc4565b90969095509350505050565b600060208284031215613d6457600080fd5b61270282613b47565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613dac57613dac613d6d565b604052919050565b600067ffffffffffffffff821115613dce57613dce613d6d565b50601f01601f191660200190565b600082601f830112613ded57600080fd5b8135613e00613dfb82613db4565b613d83565b818152846020838601011115613e1557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060a08789031215613e4b57600080fd5b863567ffffffffffffffff80821115613e6357600080fd5b613e6f8a838b01613ddc565b97506020890135915080821115613e8557600080fd5b613e918a838b01613ddc565b9650613e9f60408a01613b47565b9550613ead60608a01613b47565b94506080890135915080821115613ec357600080fd5b50613ed089828a01613cc4565b979a9699509497509295939492505050565b60008060008060408587031215613ef857600080fd5b843567ffffffffffffffff80821115613f1057600080fd5b613f1c88838901613cc4565b90965094506020870135915080821115613f3557600080fd5b50613f4287828801613cc4565b95989497509550505050565b60008060008060008060608789031215613f6757600080fd5b863567ffffffffffffffff80821115613f7f57600080fd5b613f8b8a838b01613cc4565b90985096506020890135915080821115613fa457600080fd5b613fb08a838b01613cc4565b90965094506040890135915080821115613ec357600080fd5b60008060008060808587031215613fdf57600080fd5b843567ffffffffffffffff80821115613ff757600080fd5b61400388838901613ddc565b955061401160208801613b47565b945060408701359350606087013591508082111561402e57600080fd5b5061403b87828801613ddc565b91505092959194509250565b6000806000806080858703121561405d57600080fd5b5050823594602084013594506040840135936060013592509050565b60c08152600061408c60c0830189613b88565b828103602084015261409e8189613bc3565b905082810360408401526140b28188613bc3565b905082810360608401526140c68187613b88565b905082810360808401526140da8186613bc3565b905082810360a08401526140ee8185613bc3565b9998505050505050505050565b60008083601f84011261410d57600080fd5b50813567ffffffffffffffff81111561412557600080fd5b602083019150836020828501011115613d0957600080fd5b6000806020838503121561415057600080fd5b823567ffffffffffffffff81111561416757600080fd5b613d46858286016140fb565b801515811461291d57600080fd5b6000806040838503121561419457600080fd5b61419d83613b47565b915060208301356141ad81614173565b809150509250929050565b600067ffffffffffffffff8211156141d2576141d2613d6d565b5060051b60200190565b600082601f8301126141ed57600080fd5b813560206141fd613dfb836141b8565b82815260059290921b8401810191818101908684111561421c57600080fd5b8286015b8481101561425c57803567ffffffffffffffff8111156142405760008081fd5b61424e8986838b0101613ddc565b845250918301918301614220565b509695505050505050565b60008060008060008060008060008060c08b8d03121561428657600080fd5b8a3567ffffffffffffffff8082111561429e57600080fd5b6142aa8e838f016141dc565b9b5060208d01359150808211156142c057600080fd5b6142cc8e838f016141dc565b9a5060408d01359150808211156142e257600080fd5b6142ee8e838f01613cc4565b909a50985060608d013591508082111561430757600080fd5b6143138e838f01613cc4565b909850965060808d013591508082111561432c57600080fd5b6143388e838f01613cc4565b909650945060a08d013591508082111561435157600080fd5b5061435e8d828e01613cc4565b915080935050809150509295989b9194979a5092959850565b60008060006040848603121561438c57600080fd5b83359250602084013567ffffffffffffffff8111156143aa57600080fd5b6143b6868287016140fb565b9497909650939450505050565b600080600080608085870312156143d957600080fd5b6143e285613b47565b93506143f060208601613b47565b925060408501359150606085013567ffffffffffffffff81111561441357600080fd5b61403b87828801613ddc565b600082601f83011261443057600080fd5b81356020614440613dfb836141b8565b82815260059290921b8401810191818101908684111561445f57600080fd5b8286015b8481101561425c5780358352918301918301614463565b600080600080600060a0868803121561449257600080fd5b61449b86613b47565b94506144a960208701613b47565b9350604086013567ffffffffffffffff808211156144c657600080fd5b6144d289838a0161441f565b945060608801359150808211156144e857600080fd5b6144f489838a0161441f565b9350608088013591508082111561450a57600080fd5b5061451788828901613ddc565b9150509295509295909350565b6020815260006127026020830184613bc3565b6000806040838503121561454a57600080fd5b61455383613b47565b915061456160208401613b47565b90509250929050565b600080600080600060a0868803121561458257600080fd5b61458b86613b47565b945061459960208701613b47565b93506040860135925060608601359150608086013567ffffffffffffffff8111156145c357600080fd5b61451788828901613ddc565b600181811c908216806145e357607f821691505b60208210810361460357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261463057600080fd5b815161463e613dfb82613db4565b81815284602083860101111561465357600080fd5b612b1f826020830160208701613acb565b60006020828403121561467657600080fd5b815167ffffffffffffffff81111561468d57600080fd5b612b1f8482850161461f565b634e487b7160e01b600052601160045260246000fd5b6000600182016146c1576146c1614699565b5060010190565b6000604082016001600160a01b038516835260206040818501528185548084526060860191508660005282600020935060005b81811015613c0e578454835260019485019492840192016146fb565b60008161472657614726614699565b506000190190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561476057600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b038416815260406020820152600061479c60408301848661472e565b95945050505050565b6040815260006147b960408301858761472e565b9050826020830152949350505050565b80820180821115610bb857610bb8614699565b8082028115828204841417610bb857610bb8614699565b6001600160a01b038616815260606020820152600061481660608301868861472e565b8281036040840152613c7c81858761472e565b634e487b7160e01b600052601260045260246000fd5b60008261484e5761484e614829565b500490565b81810381811115610bb857610bb8614699565b60408152600061487a60408301868861472e565b82810360208401526139b981858761472e565b601f821115610e3457600081815260208120601f850160051c810160208610156148b45750805b601f850160051c820191505b818110156148d3578281556001016148c0565b505050505050565b815167ffffffffffffffff8111156148f5576148f5613d6d565b6149098161490384546145cf565b8461488d565b602080601f83116001811461493e57600084156149265750858301515b600019600386901b1c1916600185901b1785556148d3565b600085815260208120601f198616915b8281101561496d5788860151825594840194600190910190840161494e565b508582101561498b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080815260006149ae6080830187613aef565b6001600160a01b038616602084015284604084015282810360608401526139b98185613aef565b600081546149e2816145cf565b600182811680156149fa5760018114614a0f57614a3e565b60ff1984168752821515830287019450614a3e565b8560005260208060002060005b85811015614a355781548a820152908401908201614a1c565b50505082870194505b5050505092915050565b6000614a5482856149d5565b8351614a64818360208801613acb565b01949350505050565b600082601f830112614a7e57600080fd5b81516020614a8e613dfb836141b8565b82815260059290921b84018101918181019086841115614aad57600080fd5b8286015b8481101561425c5780518352918301918301614ab1565b600082601f830112614ad957600080fd5b81516020614ae9613dfb836141b8565b82815260059290921b84018101918181019086841115614b0857600080fd5b8286015b8481101561425c57805167ffffffffffffffff811115614b2c5760008081fd5b614b3a8986838b010161461f565b845250918301918301614b0c565b60008060008060008060c08789031215614b6157600080fd5b865167ffffffffffffffff80821115614b7957600080fd5b614b858a838b01614a6d565b97506020890151915080821115614b9b57600080fd5b614ba78a838b01614ac8565b96506040890151915080821115614bbd57600080fd5b614bc98a838b01614ac8565b95506060890151915080821115614bdf57600080fd5b614beb8a838b01614a6d565b94506080890151915080821115614c0157600080fd5b614c0d8a838b01614ac8565b935060a0890151915080821115614c2357600080fd5b50614c3089828a01614ac8565b9150509295509295509295565b67ffffffffffffffff831115614c5557614c55613d6d565b614c6983614c6383546145cf565b8361488d565b6000601f841160018114614c9d5760008515614c855750838201355b600019600387901b1c1916600186901b178355614cf7565b600083815260209020601f19861690835b82811015614cce5786850135825560209485019460019092019101614cae565b5086821015614ceb5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b87811015614dac5782840389528135601e19883603018112614d6257600080fd5b8701858101903567ffffffffffffffff811115614d7e57600080fd5b803603821315614d8d57600080fd5b614d98868284614cfe565b9a87019a9550505090840190600101614d41565b5091979650505050505050565b60c081526000614dcc60c083018d613bc3565b8281036020840152614dde818d613bc3565b90508281036040840152614df3818b8d614d27565b90508281036060840152614e0881898b614d27565b90508281036080840152614e1d81878961472e565b905082810360a0840152614e3281858761472e565b9d9c50505050505050505050505050565b60008351614e55818460208801613acb565b835190830190614a64818360208801613acb565b600061270282846149d5565b600082614e8457614e84614829565b500690565b600060208284031215614e9b57600080fd5b815161270281614173565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614ed86080830184613aef565b9695505050505050565b600060208284031215614ef457600080fd5b815161270281613a98565b60008251614f11818460208701613acb565b919091019291505056fea26469706673582212207fb266ccbf702d32aa314008cf394f0e86f529272af6cbb5df9c05a882dbb90864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Studio.sol:Studio",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Studio.sol:Studio",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3498,
        "contract": "contracts/Studio.sol:Studio",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Studio.sol:Studio",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Studio.sol:Studio",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3745,
        "contract": "contracts/Studio.sol:Studio",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2191,
        "contract": "contracts/Studio.sol:Studio",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 2193,
        "contract": "contracts/Studio.sol:Studio",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 2197,
        "contract": "contracts/Studio.sol:Studio",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2201,
        "contract": "contracts/Studio.sol:Studio",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2205,
        "contract": "contracts/Studio.sol:Studio",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2211,
        "contract": "contracts/Studio.sol:Studio",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3052,
        "contract": "contracts/Studio.sol:Studio",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1859,
        "contract": "contracts/Studio.sol:Studio",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1805,
        "contract": "contracts/Studio.sol:Studio",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4562,
        "contract": "contracts/Studio.sol:Studio",
        "label": "traits",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(ITraits)6503"
      },
      {
        "astId": 4564,
        "contract": "contracts/Studio.sol:Studio",
        "label": "baseURI",
        "offset": 0,
        "slot": "302",
        "type": "t_string_storage"
      },
      {
        "astId": 4573,
        "contract": "contracts/Studio.sol:Studio",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 4575,
        "contract": "contracts/Studio.sol:Studio",
        "label": "totalSupply",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 4577,
        "contract": "contracts/Studio.sol:Studio",
        "label": "maxSupply",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 4579,
        "contract": "contracts/Studio.sol:Studio",
        "label": "locked",
        "offset": 0,
        "slot": "306",
        "type": "t_bool"
      },
      {
        "astId": 4581,
        "contract": "contracts/Studio.sol:Studio",
        "label": "artistAddress",
        "offset": 1,
        "slot": "306",
        "type": "t_address"
      },
      {
        "astId": 4585,
        "contract": "contracts/Studio.sol:Studio",
        "label": "scripts",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4587,
        "contract": "contracts/Studio.sol:Studio",
        "label": "metadata",
        "offset": 0,
        "slot": "308",
        "type": "t_string_storage"
      },
      {
        "astId": 4589,
        "contract": "contracts/Studio.sol:Studio",
        "label": "auctionStartTime",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 4591,
        "contract": "contracts/Studio.sol:Studio",
        "label": "auctionEndTime",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      },
      {
        "astId": 4593,
        "contract": "contracts/Studio.sol:Studio",
        "label": "auctionStartPrice",
        "offset": 0,
        "slot": "311",
        "type": "t_uint256"
      },
      {
        "astId": 4595,
        "contract": "contracts/Studio.sol:Studio",
        "label": "auctionEndPrice",
        "offset": 0,
        "slot": "312",
        "type": "t_uint256"
      },
      {
        "astId": 4597,
        "contract": "contracts/Studio.sol:Studio",
        "label": "artistClaimableRevenues",
        "offset": 0,
        "slot": "313",
        "type": "t_uint256"
      },
      {
        "astId": 4599,
        "contract": "contracts/Studio.sol:Studio",
        "label": "platformClaimableRevenues",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 4610,
        "contract": "contracts/Studio.sol:Studio",
        "label": "artworkData",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_uint256,t_struct(ArtworkData)4605_storage)"
      },
      {
        "astId": 4614,
        "contract": "contracts/Studio.sol:Studio",
        "label": "userNonces",
        "offset": 0,
        "slot": "316",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4618,
        "contract": "contracts/Studio.sol:Studio",
        "label": "admins",
        "offset": 0,
        "slot": "317",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITraits)6503": {
        "encoding": "inplace",
        "label": "contract ITraits",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(ArtworkData)4605_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Studio.ArtworkData)",
        "numberOfBytes": "32",
        "value": "t_struct(ArtworkData)4605_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ArtworkData)4605_storage": {
        "encoding": "inplace",
        "label": "struct Studio.ArtworkData",
        "members": [
          {
            "astId": 4602,
            "contract": "contracts/Studio.sol:Studio",
            "label": "traitTokenIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4604,
            "contract": "contracts/Studio.sol:Studio",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}