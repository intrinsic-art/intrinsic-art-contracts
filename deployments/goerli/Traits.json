{
  "address": "0xDaDBcAe24988A94Fe05fdb310cDE5997Eb559c3c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "studio",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "TraitCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "traitTypeNames",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "traitTypeValues",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "traitNames",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "traitValues",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitMaxSupplys",
          "type": "uint256[]"
        }
      ],
      "name": "TraitsAndTypesCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitMaxSupplys",
          "type": "uint256[]"
        }
      ],
      "name": "createTraitsAndTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTraitName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTraitTypeName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTraitTypeValue",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTraitValue",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTraits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_studio",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "studio",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "traits",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "typeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "transferTraitsToCreateArtwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "transferTraitsToDecomposeArtwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd3e1d2b002eaaef2ed63570ef0b55264b167881f3f86566cb7dd126e6204d8b",
  "receipt": {
    "to": null,
    "from": "0xAa9D46AE079851116967c6573f961B304095C34a",
    "contractAddress": "0xDaDBcAe24988A94Fe05fdb310cDE5997Eb559c3c",
    "transactionIndex": 30,
    "gasUsed": "3329312",
    "logsBloom": "0x
    "blockHash": "0x03997ae55bcaa43967d755eaca09d71ceb1f1360322f3ec5080fa3f02da128d8",
    "transactionHash": "0xfd3e1d2b002eaaef2ed63570ef0b55264b167881f3f86566cb7dd126e6204d8b",
    "logs": [],
    "blockNumber": 8406137,
    "cumulativeGasUsed": "11224591",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "502e3ff2e9a0f9351b59813856bae62f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"studio\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TraitCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"traitTypeNames\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"traitTypeValues\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"traitNames\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"traitValues\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitTypeIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitMaxSupplys\",\"type\":\"uint256[]\"}],\"name\":\"TraitsAndTypesCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitMaxSupplys\",\"type\":\"uint256[]\"}],\"name\":\"createTraitsAndTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitTypeName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitTypeValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_studio\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"studio\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"typeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferTraitsToCreateArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferTraitsToDecomposeArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Traits.sol\":\"Traits\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x00a36a453484b7145a0d4a0c64daea248a7e806e6be4d7bbae1032a328777c82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xce2d5b25063e871aeca913786040a56117d16f01a819fbdc0b726128b6cbe25a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb04849e624ffff85de1ee3d541aaa058ed9323a26200e34dd443fc46a642ba56\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/ITraits.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract Traits is\\r\\n    ERC1155Upgradeable,\\r\\n    ERC1155BurnableUpgradeable,\\r\\n    ERC1155SupplyUpgradeable\\r\\n{\\r\\n    event TraitCreated(\\r\\n        address indexed studio,\\r\\n        string indexed name,\\r\\n        string indexed value\\r\\n    );\\r\\n\\r\\n    event TraitsAndTypesCreated(\\r\\n        string[] traitTypeNames,\\r\\n        string[] traitTypeValues,\\r\\n        uint256[] traitTokenIds,\\r\\n        string[] traitNames,\\r\\n        string[] traitValues,\\r\\n        uint256[] traitTypeIndexes,\\r\\n        uint256[] traitMaxSupplys\\r\\n    );\\r\\n\\r\\n    struct Trait {\\r\\n        string name;\\r\\n        string value;\\r\\n        uint256 typeIndex;\\r\\n        uint256 maxSupply;\\r\\n    }\\r\\n\\r\\n    address public studio;\\r\\n    uint256 public nextTokenId = 1;\\r\\n    uint256 traitTypesLength;\\r\\n    // todo: move these into a struct array\\r\\n    string[] traitTypeNames;\\r\\n    string[] traitTypeValues;\\r\\n    mapping(uint256 => Trait) public traits;\\r\\n\\r\\n    modifier onlyStudio() {\\r\\n        require(msg.sender == studio, \\\"Only the studio can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _studio,\\r\\n        string memory _uri\\r\\n    ) external initializer {\\r\\n        __ERC1155_init(_uri);\\r\\n        studio = _studio;\\r\\n    }\\r\\n\\r\\n    function createTraitsAndTypes(\\r\\n        string[] memory _traitTypeNames,\\r\\n        string[] memory _traitTypeValues,\\r\\n        string[] calldata _traitNames,\\r\\n        string[] calldata _traitValues,\\r\\n        uint256[] calldata _traitTypeIndexes,\\r\\n        uint256[] calldata _traitMaxSupplys\\r\\n    ) external onlyStudio {\\r\\n        require(_traitTypeNames.length == _traitTypeValues.length, \\\"E02\\\");\\r\\n        require(_traitNames.length == _traitValues.length, \\\"E02\\\");\\r\\n        require(_traitNames.length == _traitTypeIndexes.length, \\\"E02\\\");\\r\\n        require(_traitNames.length == _traitMaxSupplys.length, \\\"E02\\\");\\r\\n\\r\\n        traitTypeNames = _traitTypeNames;\\r\\n        traitTypeValues = _traitTypeValues;\\r\\n\\r\\n        uint256[] memory traitTokenIds = new uint256[](_traitNames.length);\\r\\n\\r\\n        // Loop through traits\\r\\n        for (uint256 i; i < _traitNames.length; i++) {\\r\\n            uint256 tokenId = nextTokenId;\\r\\n            nextTokenId++;\\r\\n\\r\\n            traits[tokenId].name = _traitNames[i];\\r\\n            traits[tokenId].value = _traitValues[i];\\r\\n            traits[tokenId].typeIndex = _traitTypeIndexes[i];\\r\\n            traits[tokenId].maxSupply = _traitMaxSupplys[i];\\r\\n\\r\\n            traitTokenIds[i] = tokenId;\\r\\n        }\\r\\n\\r\\n        emit TraitsAndTypesCreated(\\r\\n            _traitTypeNames,\\r\\n            _traitTypeValues,\\r\\n            traitTokenIds,\\r\\n            _traitNames,\\r\\n            _traitValues,\\r\\n            _traitTypeIndexes,\\r\\n            _traitMaxSupplys\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function mintBatch(\\r\\n        address _to,\\r\\n        uint256[] memory _tokenIds,\\r\\n        uint256[] memory _amounts\\r\\n    ) external onlyStudio {\\r\\n        for (uint256 i; i < _tokenIds.length; i++) {\\r\\n            require(\\r\\n                totalSupply(_tokenIds[i]) + _amounts[i] <=\\r\\n                    traits[_tokenIds[i]].maxSupply,\\r\\n                \\\"Trait max supply reached\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _mintBatch(_to, _tokenIds, _amounts, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function transferTraitsToCreateArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external onlyStudio {\\r\\n        require(\\r\\n            _traitTokenIds.length == traitTypeNames.length,\\r\\n            \\\"Incorrect number of traits specified\\\"\\r\\n        );\\r\\n\\r\\n        uint256[] memory amounts = new uint256[](_traitTokenIds.length);\\r\\n        for (uint256 i; i < _traitTokenIds.length; i++) {\\r\\n            require(\\r\\n                traits[_traitTokenIds[i]].typeIndex == i,\\r\\n                \\\"Invalid trait token IDs\\\"\\r\\n            );\\r\\n            amounts[i] = 1;\\r\\n        }\\r\\n\\r\\n        // Transfer the traits from the caller to the Studio contract\\r\\n        _safeBatchTransferFrom(\\r\\n            _caller,\\r\\n            address(studio),\\r\\n            _traitTokenIds,\\r\\n            amounts,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferTraitsToDecomposeArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external onlyStudio {\\r\\n        require(\\r\\n            _traitTokenIds.length == traitTypeNames.length,\\r\\n            \\\"Incorrect number of traits specified\\\"\\r\\n        );\\r\\n\\r\\n        uint256[] memory amounts = new uint256[](_traitTokenIds.length);\\r\\n        for (uint256 i; i < _traitTokenIds.length; i++) {\\r\\n            require(\\r\\n                traits[_traitTokenIds[i]].typeIndex == i,\\r\\n                \\\"Invalid trait token IDs\\\"\\r\\n            );\\r\\n            amounts[i] = 1;\\r\\n        }\\r\\n\\r\\n        // Transfer the traits from the Studio contract to the caller\\r\\n        _safeBatchTransferFrom(\\r\\n            address(studio),\\r\\n            _caller,\\r\\n            _traitTokenIds,\\r\\n            amounts,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    function getTraitName(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (string memory) {\\r\\n        return traits[_tokenId].name;\\r\\n    }\\r\\n\\r\\n    function getTraitValue(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (string memory) {\\r\\n        return traits[_tokenId].value;\\r\\n    }\\r\\n\\r\\n    function getTraitTypeName(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (string memory) {\\r\\n        return traitTypeNames[traits[_tokenId].typeIndex];\\r\\n    }\\r\\n\\r\\n    function getTraitTypeValue(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (string memory) {\\r\\n        return traitTypeValues[traits[_tokenId].typeIndex];\\r\\n    }\\r\\n\\r\\n    function getTraits()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            uint256[] memory _traitTypeIndexes,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        )\\r\\n    {\\r\\n        uint256 traitCount = nextTokenId - 1;\\r\\n        _traitTokenIds = new uint256[](traitCount);\\r\\n        _traitNames = new string[](traitCount);\\r\\n        _traitValues = new string[](traitCount);\\r\\n        _traitTypeIndexes = new uint256[](traitCount);\\r\\n        _traitTypeNames = new string[](traitCount);\\r\\n        _traitTypeValues = new string[](traitCount);\\r\\n\\r\\n        for (uint256 i = 0; i < traitCount; i++) {\\r\\n            _traitTokenIds[i] = i + 1;\\r\\n            _traitNames[i] = traits[i + 1].name;\\r\\n            _traitValues[i] = traits[i + 1].value;\\r\\n            _traitTypeIndexes[i] = traits[i + 1].typeIndex;\\r\\n            _traitTypeNames[i] = traitTypeNames[traits[i + 1].typeIndex];\\r\\n            _traitTypeValues[i] = traitTypeValues[traits[i + 1].typeIndex];\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xae145cee9164e2700d71d0b2b34aac908a61e8f24fb0ec7446a07f869128f539\",\"license\":\"MIT\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITraits {\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function createTraitsAndTypes(\\r\\n        string[] memory _traitTypeNames,\\r\\n        string[] memory _traitTypeValues,\\r\\n        string[] calldata _traitNames,\\r\\n        string[] calldata _traitValues,\\r\\n        uint256[] calldata _traitTypeIndexes,\\r\\n        uint256[] calldata _traitMaxSupplys\\r\\n    ) external;\\r\\n\\r\\n    function mintBatch(\\r\\n        address _to,\\r\\n        uint256[] memory _tokenIds,\\r\\n        uint256[] memory _amounts\\r\\n    ) external;\\r\\n\\r\\n    function transferTraitsToCreateArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external;\\r\\n\\r\\n    function transferTraitsToDecomposeArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external;\\r\\n\\r\\n    function getTraitName(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    function getTraitValue(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    function getTraitTypeName(uint256 _tokenId) external view returns (string memory);\\r\\n\\r\\n    function getTraitTypeValue(uint256 _tokenId) external view returns (string memory);\\r\\n\\r\\n    function getTraits()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            uint256[] memory _traitTypeIndexes,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x070d11f9b9a48bcd4b21a692ea177ae1c1e8c182991198d11a3e6cd24e621439\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160fc5534801561001557600080fd5b50613ae8806100256000396000f3fe608060405234801561001057600080fd5b50600436106101a25760003560e01c806375794a3c116100ee578063d81d0a1511610097578063e985e9c511610071578063e985e9c5146103b6578063f242432a146103f2578063f399e22e14610405578063f5298aca1461041857600080fd5b8063d81d0a151461037d578063db895c3914610390578063e16f9c3d146103a357600080fd5b8063bd85b039116100c8578063bd85b0391461031f578063ca7ee8a01461033f578063d10f99cb1461036a57600080fd5b806375794a3c146102e95780637f0429ef146102f2578063a22cb4651461030c57600080fd5b80632eb2c2d6116101505780635044651d1161012a5780635044651d146102b05780635b2a8efa146102c35780636b20c454146102d657600080fd5b80632eb2c2d61461025b5780634e1273f41461026e5780634f558e791461028e57600080fd5b806302afd1a11161018157806302afd1a1146102055780630e89341c146102185780632d72225b1461023857600080fd5b8062fdd58e146101a757806301c8aa4b146101cd57806301ffc9a7146101e2575b600080fd5b6101ba6101b5366004612be8565b61042b565b6040519081526020015b60405180910390f35b6101e06101db366004612dcf565b6104d9565b005b6101f56101f0366004612ef5565b61081e565b60405190151581526020016101c4565b6101e0610213366004612f19565b6108b9565b61022b610226366004612f6c565b610aea565b6040516101c49190612fcb565b61024b610246366004612f6c565b610b7e565b6040516101c49493929190612fde565b6101e061026936600461307d565b610cb7565b61028161027c366004613127565b610d59565b6040516101c4919061322d565b6101f561029c366004612f6c565b600090815260c96020526040902054151590565b6101e06102be366004612f19565b610e97565b61022b6102d1366004612f6c565b6110b9565b6101e06102e4366004613240565b6110f7565b6101ba60fc5481565b6102fa611181565b6040516101c496959493929190613309565b6101e061031a36600461338b565b611748565b6101ba61032d366004612f6c565b600090815260c9602052604090205490565b60fb54610352906001600160a01b031681565b6040516001600160a01b0390911681526020016101c4565b61022b610378366004612f6c565b611757565b6101e061038b366004613240565b611780565b61022b61039e366004612f6c565b6118f5565b61022b6103b1366004612f6c565b611916565b6101f56103c43660046133c7565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6101e06104003660046133fa565b611934565b6101e061041336600461345f565b6119bb565b6101e06104263660046134a3565b611ac0565b60006001600160a01b0383166104ae5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60fb546001600160a01b031633146105425760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b88518a51146105795760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8685146105ae5760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8683146105e35760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8681146106185760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b895161062b9060fe9060208d0190612b0f565b50885161063f9060ff9060208c0190612b0f565b5060008767ffffffffffffffff81111561065b5761065b612c12565b604051908082528060200260200182016040528015610684578160200160208202803683370190505b50905060005b888110156107c55760fc805490819060006106a4836134ec565b91905055508a8a838181106106bb576106bb613505565b90506020028101906106cd919061351b565b600083815261010060205260409020916106e89190836135e2565b508888838181106106fb576106fb613505565b905060200281019061070d919061351b565b6000838152610100602052604090206001019161072b9190836135e2565b5086868381811061073e5761073e613505565b9050602002013561010060008381526020019081526020016000206002018190555084848381811061077257610772613505565b90506020020135610100600083815260200190815260200160002060030181905550808383815181106107a7576107a7613505565b602090810291909101015250806107bd816134ec565b91505061068a565b507fe612ac3a2c1d732816bc97be62b7144ae1b826aabe21c80a6213fe760dd827d58b8b838c8c8c8c8c8c8c8c6040516108099b9a9998979695949392919061379b565b60405180910390a15050505050505050505050565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061088157506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806104d357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146104d3565b60fb546001600160a01b031633146109225760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60fe54811461097f5760405162461bcd60e51b8152602060048201526024808201527f496e636f7272656374206e756d626572206f6620747261697473207370656369604482015263199a595960e21b60648201526084016104a5565b60008167ffffffffffffffff81111561099a5761099a612c12565b6040519080825280602002602001820160405280156109c3578160200160208202803683370190505b50905060005b82811015610a80578061010060008686858181106109e9576109e9613505565b9050602002013581526020019081526020016000206002015414610a4f5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420747261697420746f6b656e2049447300000000000000000060448201526064016104a5565b6001828281518110610a6357610a63613505565b602090810291909101015280610a78816134ec565b9150506109c9565b50610ae48460fb60009054906101000a90046001600160a01b0316858580806020026020016040519081016040528093929190818152602001838360200280828437600092018290525060408051602081019091529081528893509150611b459050565b50505050565b606060678054610af990613562565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2590613562565b8015610b725780601f10610b4757610100808354040283529160200191610b72565b820191906000526020600020905b815481529060010190602001808311610b5557829003601f168201915b50505050509050919050565b61010060205260009081526040902080548190610b9a90613562565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc690613562565b8015610c135780601f10610be857610100808354040283529160200191610c13565b820191906000526020600020905b815481529060010190602001808311610bf657829003601f168201915b505050505090806001018054610c2890613562565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5490613562565b8015610ca15780601f10610c7657610100808354040283529160200191610ca1565b820191906000526020600020905b815481529060010190602001808311610c8457829003601f168201915b5050505050908060020154908060030154905084565b6001600160a01b038516331480610cd35750610cd385336103c4565b610d455760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016104a5565b610d528585858585611b45565b5050505050565b60608151835114610dd25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016104a5565b6000835167ffffffffffffffff811115610dee57610dee612c12565b604051908082528060200260200182016040528015610e17578160200160208202803683370190505b50905060005b8451811015610e8f57610e62858281518110610e3b57610e3b613505565b6020026020010151858381518110610e5557610e55613505565b602002602001015161042b565b828281518110610e7457610e74613505565b6020908102919091010152610e88816134ec565b9050610e1d565b509392505050565b60fb546001600160a01b03163314610f005760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60fe548114610f5d5760405162461bcd60e51b8152602060048201526024808201527f496e636f7272656374206e756d626572206f6620747261697473207370656369604482015263199a595960e21b60648201526084016104a5565b60008167ffffffffffffffff811115610f7857610f78612c12565b604051908082528060200260200182016040528015610fa1578160200160208202803683370190505b50905060005b8281101561105e57806101006000868685818110610fc757610fc7613505565b905060200201358152602001908152602001600020600201541461102d5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420747261697420746f6b656e2049447300000000000000000060448201526064016104a5565b600182828151811061104157611041613505565b602090810291909101015280611056816134ec565b915050610fa7565b5060fb546040805160208086028281018201909352858252610ae4936001600160a01b03169288929188918891829190850190849080828437600092018290525060408051602081019091529081528893509150611b459050565b6000818152610100602052604090206002015460ff80546060929081106110e2576110e2613505565b906000526020600020018054610af990613562565b6001600160a01b038316331480611113575061111383336103c4565b6111715760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b61117c838383611db4565b505050565b6060806060806060806000600160fc5461119b919061383a565b90508067ffffffffffffffff8111156111b6576111b6612c12565b6040519080825280602002602001820160405280156111df578160200160208202803683370190505b5096508067ffffffffffffffff8111156111fb576111fb612c12565b60405190808252806020026020018201604052801561122e57816020015b60608152602001906001900390816112195790505b5095508067ffffffffffffffff81111561124a5761124a612c12565b60405190808252806020026020018201604052801561127d57816020015b60608152602001906001900390816112685790505b5094508067ffffffffffffffff81111561129957611299612c12565b6040519080825280602002602001820160405280156112c2578160200160208202803683370190505b5093508067ffffffffffffffff8111156112de576112de612c12565b60405190808252806020026020018201604052801561131157816020015b60608152602001906001900390816112fc5790505b5092508067ffffffffffffffff81111561132d5761132d612c12565b60405190808252806020026020018201604052801561136057816020015b606081526020019060019003908161134b5790505b50915060005b8181101561173e5761137981600161384d565b88828151811061138b5761138b613505565b602090810291909101015261010060006113a683600161384d565b815260200190815260200160002060000180546113c290613562565b80601f01602080910402602001604051908101604052809291908181526020018280546113ee90613562565b801561143b5780601f106114105761010080835404028352916020019161143b565b820191906000526020600020905b81548152906001019060200180831161141e57829003601f168201915b505050505087828151811061145257611452613505565b6020908102919091010152610100600061146d83600161384d565b8152602001908152602001600020600101805461148990613562565b80601f01602080910402602001604051908101604052809291908181526020018280546114b590613562565b80156115025780601f106114d757610100808354040283529160200191611502565b820191906000526020600020905b8154815290600101906020018083116114e557829003601f168201915b505050505086828151811061151957611519613505565b6020908102919091010152610100600061153483600161384d565b81526020019081526020016000206002015485828151811061155857611558613505565b602090810291909101015260fe610100600061157584600161384d565b8152602001908152602001600020600201548154811061159757611597613505565b9060005260206000200180546115ac90613562565b80601f01602080910402602001604051908101604052809291908181526020018280546115d890613562565b80156116255780601f106115fa57610100808354040283529160200191611625565b820191906000526020600020905b81548152906001019060200180831161160857829003601f168201915b505050505084828151811061163c5761163c613505565b602090810291909101015260ff610100600061165984600161384d565b8152602001908152602001600020600201548154811061167b5761167b613505565b90600052602060002001805461169090613562565b80601f01602080910402602001604051908101604052809291908181526020018280546116bc90613562565b80156117095780601f106116de57610100808354040283529160200191611709565b820191906000526020600020905b8154815290600101906020018083116116ec57829003601f168201915b505050505083828151811061172057611720613505565b60200260200101819052508080611736906134ec565b915050611366565b5050909192939495565b611753338383611ffe565b5050565b6000818152610100602052604090206002015460fe80546060929081106110e2576110e2613505565b60fb546001600160a01b031633146117e95760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60005b82518110156118d957610100600084838151811061180c5761180c613505565b602002602001015181526020019081526020016000206003015482828151811061183857611838613505565b602002602001015161186f85848151811061185557611855613505565b6020026020010151600090815260c9602052604090205490565b611879919061384d565b11156118c75760405162461bcd60e51b815260206004820152601860248201527f5472616974206d617820737570706c792072656163686564000000000000000060448201526064016104a5565b806118d1816134ec565b9150506117ec565b5061117c838383604051806020016040528060008152506120f2565b600081815261010060205260409020600101805460609190610af990613562565b600081815261010060205260409020805460609190610af990613562565b6001600160a01b038516331480611950575061195085336103c4565b6119ae5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b610d5285858585856122e4565b600054610100900460ff166119d65760005460ff16156119da565b303b155b611a4c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104a5565b600054610100900460ff16158015611a6e576000805461ffff19166101011790555b611a7782612495565b60fb80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038516179055801561117c576000805461ff0019169055505050565b6001600160a01b038316331480611adc5750611adc83336103c4565b611b3a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b61117c83838361250c565b8151835114611ba75760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b6001600160a01b038416611c0b5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104a5565b33611c1a818787878787612689565b60005b8451811015611d46576000858281518110611c3a57611c3a613505565b602002602001015190506000858381518110611c5857611c58613505565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015611cec5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104a5565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611d2b90849061384d565b9250508190555050505080611d3f906134ec565b9050611c1d565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611d96929190613860565b60405180910390a4611dac818787878787612697565b505050505050565b6001600160a01b038316611e165760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104a5565b8051825114611e785760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b6000339050611e9b81856000868660405180602001604052806000815250612689565b60005b8351811015611f9f576000848281518110611ebb57611ebb613505565b602002602001015190506000848381518110611ed957611ed9613505565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611f665760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104a5565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611f97816134ec565b915050611e9e565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611ff0929190613860565b60405180910390a450505050565b816001600160a01b0316836001600160a01b0316036120855760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016104a5565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841661216e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104a5565b81518351146121d05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b336121e081600087878787612689565b60005b845181101561227c578381815181106121fe576121fe613505565b60200260200101516065600087848151811061221c5761221c613505565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254612264919061384d565b90915550819050612274816134ec565b9150506121e3565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122cd929190613860565b60405180910390a4610d5281600087878787612697565b6001600160a01b0384166123485760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104a5565b336123678187876123588861283c565b6123618861283c565b87612689565b60008481526065602090815260408083206001600160a01b038a168452909152902054838110156123ed5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104a5565b60008581526065602090815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061242c90849061384d565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461248c828888888888612887565b50505050505050565b600054610100900460ff166125005760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a5565b61250981612983565b50565b6001600160a01b03831661256e5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104a5565b3361259d8185600061257f8761283c565b6125888761283c565b60405180602001604052806000815250612689565b60008381526065602090815260408083206001600160a01b03881684529091529020548281101561261c5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104a5565b60008481526065602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b611dac8686868686866129f7565b6001600160a01b0384163b15611dac5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906126db908990899088908890889060040161388e565b6020604051808303816000875af1925050508015612716575060408051601f3d908101601f19168201909252612713918101906138ec565b60015b6127cb57612722613909565b806308c379a00361275b5750612736613925565b80612741575061275d565b8060405162461bcd60e51b81526004016104a59190612fcb565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016104a5565b6001600160e01b0319811663bc197c8160e01b1461248c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104a5565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061287657612876613505565b602090810291909101015292915050565b6001600160a01b0384163b15611dac5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906128cb90899089908890889088906004016139af565b6020604051808303816000875af1925050508015612906575060408051601f3d908101601f19168201909252612903918101906138ec565b60015b61291257612722613909565b6001600160e01b0319811663f23a6e6160e01b1461248c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104a5565b600054610100900460ff166129ee5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a5565b61250981612b03565b6001600160a01b038516612a7e5760005b8351811015612a7c57828181518110612a2357612a23613505565b602002602001015160c96000868481518110612a4157612a41613505565b602002602001015181526020019081526020016000206000828254612a66919061384d565b90915550612a759050816134ec565b9050612a08565b505b6001600160a01b038416611dac5760005b835181101561248c57828181518110612aaa57612aaa613505565b602002602001015160c96000868481518110612ac857612ac8613505565b602002602001015181526020019081526020016000206000828254612aed919061383a565b90915550612afc9050816134ec565b9050612a8f565b606761175382826139f2565b828054828255906000526020600020908101928215612b55579160200282015b82811115612b555782518290612b4590826139f2565b5091602001919060010190612b2f565b50612b61929150612b65565b5090565b80821115612b61576000612b798282612b82565b50600101612b65565b508054612b8e90613562565b6000825580601f10612b9e575050565b601f01602090049060005260206000209081019061250991905b80821115612b615760008155600101612bb8565b80356001600160a01b0381168114612be357600080fd5b919050565b60008060408385031215612bfb57600080fd5b612c0483612bcc565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612c4e57612c4e612c12565b6040525050565b600067ffffffffffffffff821115612c6f57612c6f612c12565b5060051b60200190565b600082601f830112612c8a57600080fd5b813567ffffffffffffffff811115612ca457612ca4612c12565b604051612cbb601f8301601f191660200182612c28565b818152846020838601011115612cd057600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612cfe57600080fd5b81356020612d0b82612c55565b604051612d188282612c28565b83815260059390931b8501820192828101915086841115612d3857600080fd5b8286015b84811015612d7857803567ffffffffffffffff811115612d5c5760008081fd5b612d6a8986838b0101612c79565b845250918301918301612d3c565b509695505050505050565b60008083601f840112612d9557600080fd5b50813567ffffffffffffffff811115612dad57600080fd5b6020830191508360208260051b8501011115612dc857600080fd5b9250929050565b60008060008060008060008060008060c08b8d031215612dee57600080fd5b8a3567ffffffffffffffff80821115612e0657600080fd5b612e128e838f01612ced565b9b5060208d0135915080821115612e2857600080fd5b612e348e838f01612ced565b9a5060408d0135915080821115612e4a57600080fd5b612e568e838f01612d83565b909a50985060608d0135915080821115612e6f57600080fd5b612e7b8e838f01612d83565b909850965060808d0135915080821115612e9457600080fd5b612ea08e838f01612d83565b909650945060a08d0135915080821115612eb957600080fd5b50612ec68d828e01612d83565b915080935050809150509295989b9194979a5092959850565b6001600160e01b03198116811461250957600080fd5b600060208284031215612f0757600080fd5b8135612f1281612edf565b9392505050565b600080600060408486031215612f2e57600080fd5b612f3784612bcc565b9250602084013567ffffffffffffffff811115612f5357600080fd5b612f5f86828701612d83565b9497909650939450505050565b600060208284031215612f7e57600080fd5b5035919050565b6000815180845260005b81811015612fab57602081850181015186830182015201612f8f565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000612f126020830184612f85565b608081526000612ff16080830187612f85565b82810360208401526130038187612f85565b604084019590955250506060015292915050565b600082601f83011261302857600080fd5b8135602061303582612c55565b6040516130428282612c28565b83815260059390931b850182019282810191508684111561306257600080fd5b8286015b84811015612d785780358352918301918301613066565b600080600080600060a0868803121561309557600080fd5b61309e86612bcc565b94506130ac60208701612bcc565b9350604086013567ffffffffffffffff808211156130c957600080fd5b6130d589838a01613017565b945060608801359150808211156130eb57600080fd5b6130f789838a01613017565b9350608088013591508082111561310d57600080fd5b5061311a88828901612c79565b9150509295509295909350565b6000806040838503121561313a57600080fd5b823567ffffffffffffffff8082111561315257600080fd5b818501915085601f83011261316657600080fd5b8135602061317382612c55565b6040516131808282612c28565b83815260059390931b85018201928281019150898411156131a057600080fd5b948201945b838610156131c5576131b686612bcc565b825294820194908201906131a5565b965050860135925050808211156131db57600080fd5b506131e885828601613017565b9150509250929050565b600081518084526020808501945080840160005b8381101561322257815187529582019590820190600101613206565b509495945050505050565b602081526000612f1260208301846131f2565b60008060006060848603121561325557600080fd5b61325e84612bcc565b9250602084013567ffffffffffffffff8082111561327b57600080fd5b61328787838801613017565b9350604086013591508082111561329d57600080fd5b506132aa86828701613017565b9150509250925092565b600081518084526020808501808196508360051b8101915082860160005b858110156132fc5782840389526132ea848351612f85565b988501989350908401906001016132d2565b5091979650505050505050565b60c08152600061331c60c08301896131f2565b828103602084015261332e81896132b4565b9050828103604084015261334281886132b4565b9050828103606084015261335681876131f2565b9050828103608084015261336a81866132b4565b905082810360a084015261337e81856132b4565b9998505050505050505050565b6000806040838503121561339e57600080fd5b6133a783612bcc565b9150602083013580151581146133bc57600080fd5b809150509250929050565b600080604083850312156133da57600080fd5b6133e383612bcc565b91506133f160208401612bcc565b90509250929050565b600080600080600060a0868803121561341257600080fd5b61341b86612bcc565b945061342960208701612bcc565b93506040860135925060608601359150608086013567ffffffffffffffff81111561345357600080fd5b61311a88828901612c79565b6000806040838503121561347257600080fd5b61347b83612bcc565b9150602083013567ffffffffffffffff81111561349757600080fd5b6131e885828601612c79565b6000806000606084860312156134b857600080fd5b6134c184612bcc565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016134fe576134fe6134d6565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261353257600080fd5b83018035915067ffffffffffffffff82111561354d57600080fd5b602001915036819003821315612dc857600080fd5b600181811c9082168061357657607f821691505b60208210810361359657634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561117c57600081815260208120601f850160051c810160208610156135c35750805b601f850160051c820191505b81811015611dac578281556001016135cf565b67ffffffffffffffff8311156135fa576135fa612c12565b61360e836136088354613562565b8361359c565b6000601f841160018114613642576000851561362a5750838201355b600019600387901b1c1916600186901b178355610d52565b600083815260209020601f19861690835b828110156136735786850135825560209485019460019092019101613653565b50868210156136905760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b878110156132fc5782840389528135601e1988360301811261370657600080fd5b8701858101903567ffffffffffffffff81111561372257600080fd5b80360382131561373157600080fd5b61373c8682846136a2565b9a87019a95505050908401906001016136e5565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561378257600080fd5b8260051b80836020870137939093016020019392505050565b60e0815260006137ae60e083018e6132b4565b82810360208401526137c0818e6132b4565b905082810360408401526137d4818d6131f2565b905082810360608401526137e9818b8d6136cb565b905082810360808401526137fe81898b6136cb565b905082810360a0840152613813818789613750565b905082810360c0840152613828818587613750565b9e9d5050505050505050505050505050565b818103818111156104d3576104d36134d6565b808201808211156104d3576104d36134d6565b60408152600061387360408301856131f2565b828103602084015261388581856131f2565b95945050505050565b60006001600160a01b03808816835280871660208401525060a060408301526138ba60a08301866131f2565b82810360608401526138cc81866131f2565b905082810360808401526138e08185612f85565b98975050505050505050565b6000602082840312156138fe57600080fd5b8151612f1281612edf565b600060033d11156139225760046000803e5060005160e01c5b90565b600060443d10156139335790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561396357505050505090565b828501915081518181111561397b5750505050505090565b843d87010160208285010111156139955750505050505090565b6139a460208286010187612c28565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526139e760a0830184612f85565b979650505050505050565b815167ffffffffffffffff811115613a0c57613a0c612c12565b613a2081613a1a8454613562565b8461359c565b602080601f831160018114613a555760008415613a3d5750858301515b600019600386901b1c1916600185901b178555611dac565b600085815260208120601f198616915b82811015613a8457888601518255948401946001909101908401613a65565b5085821015613aa25787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220fe5e1f0368a463158aa8c7262b1415fe4c4a2d8a911764862e3b4475aeb25a6464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a25760003560e01c806375794a3c116100ee578063d81d0a1511610097578063e985e9c511610071578063e985e9c5146103b6578063f242432a146103f2578063f399e22e14610405578063f5298aca1461041857600080fd5b8063d81d0a151461037d578063db895c3914610390578063e16f9c3d146103a357600080fd5b8063bd85b039116100c8578063bd85b0391461031f578063ca7ee8a01461033f578063d10f99cb1461036a57600080fd5b806375794a3c146102e95780637f0429ef146102f2578063a22cb4651461030c57600080fd5b80632eb2c2d6116101505780635044651d1161012a5780635044651d146102b05780635b2a8efa146102c35780636b20c454146102d657600080fd5b80632eb2c2d61461025b5780634e1273f41461026e5780634f558e791461028e57600080fd5b806302afd1a11161018157806302afd1a1146102055780630e89341c146102185780632d72225b1461023857600080fd5b8062fdd58e146101a757806301c8aa4b146101cd57806301ffc9a7146101e2575b600080fd5b6101ba6101b5366004612be8565b61042b565b6040519081526020015b60405180910390f35b6101e06101db366004612dcf565b6104d9565b005b6101f56101f0366004612ef5565b61081e565b60405190151581526020016101c4565b6101e0610213366004612f19565b6108b9565b61022b610226366004612f6c565b610aea565b6040516101c49190612fcb565b61024b610246366004612f6c565b610b7e565b6040516101c49493929190612fde565b6101e061026936600461307d565b610cb7565b61028161027c366004613127565b610d59565b6040516101c4919061322d565b6101f561029c366004612f6c565b600090815260c96020526040902054151590565b6101e06102be366004612f19565b610e97565b61022b6102d1366004612f6c565b6110b9565b6101e06102e4366004613240565b6110f7565b6101ba60fc5481565b6102fa611181565b6040516101c496959493929190613309565b6101e061031a36600461338b565b611748565b6101ba61032d366004612f6c565b600090815260c9602052604090205490565b60fb54610352906001600160a01b031681565b6040516001600160a01b0390911681526020016101c4565b61022b610378366004612f6c565b611757565b6101e061038b366004613240565b611780565b61022b61039e366004612f6c565b6118f5565b61022b6103b1366004612f6c565b611916565b6101f56103c43660046133c7565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6101e06104003660046133fa565b611934565b6101e061041336600461345f565b6119bb565b6101e06104263660046134a3565b611ac0565b60006001600160a01b0383166104ae5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60fb546001600160a01b031633146105425760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b88518a51146105795760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8685146105ae5760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8683146105e35760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8681146106185760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b895161062b9060fe9060208d0190612b0f565b50885161063f9060ff9060208c0190612b0f565b5060008767ffffffffffffffff81111561065b5761065b612c12565b604051908082528060200260200182016040528015610684578160200160208202803683370190505b50905060005b888110156107c55760fc805490819060006106a4836134ec565b91905055508a8a838181106106bb576106bb613505565b90506020028101906106cd919061351b565b600083815261010060205260409020916106e89190836135e2565b508888838181106106fb576106fb613505565b905060200281019061070d919061351b565b6000838152610100602052604090206001019161072b9190836135e2565b5086868381811061073e5761073e613505565b9050602002013561010060008381526020019081526020016000206002018190555084848381811061077257610772613505565b90506020020135610100600083815260200190815260200160002060030181905550808383815181106107a7576107a7613505565b602090810291909101015250806107bd816134ec565b91505061068a565b507fe612ac3a2c1d732816bc97be62b7144ae1b826aabe21c80a6213fe760dd827d58b8b838c8c8c8c8c8c8c8c6040516108099b9a9998979695949392919061379b565b60405180910390a15050505050505050505050565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061088157506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806104d357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146104d3565b60fb546001600160a01b031633146109225760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60fe54811461097f5760405162461bcd60e51b8152602060048201526024808201527f496e636f7272656374206e756d626572206f6620747261697473207370656369604482015263199a595960e21b60648201526084016104a5565b60008167ffffffffffffffff81111561099a5761099a612c12565b6040519080825280602002602001820160405280156109c3578160200160208202803683370190505b50905060005b82811015610a80578061010060008686858181106109e9576109e9613505565b9050602002013581526020019081526020016000206002015414610a4f5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420747261697420746f6b656e2049447300000000000000000060448201526064016104a5565b6001828281518110610a6357610a63613505565b602090810291909101015280610a78816134ec565b9150506109c9565b50610ae48460fb60009054906101000a90046001600160a01b0316858580806020026020016040519081016040528093929190818152602001838360200280828437600092018290525060408051602081019091529081528893509150611b459050565b50505050565b606060678054610af990613562565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2590613562565b8015610b725780601f10610b4757610100808354040283529160200191610b72565b820191906000526020600020905b815481529060010190602001808311610b5557829003601f168201915b50505050509050919050565b61010060205260009081526040902080548190610b9a90613562565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc690613562565b8015610c135780601f10610be857610100808354040283529160200191610c13565b820191906000526020600020905b815481529060010190602001808311610bf657829003601f168201915b505050505090806001018054610c2890613562565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5490613562565b8015610ca15780601f10610c7657610100808354040283529160200191610ca1565b820191906000526020600020905b815481529060010190602001808311610c8457829003601f168201915b5050505050908060020154908060030154905084565b6001600160a01b038516331480610cd35750610cd385336103c4565b610d455760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016104a5565b610d528585858585611b45565b5050505050565b60608151835114610dd25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016104a5565b6000835167ffffffffffffffff811115610dee57610dee612c12565b604051908082528060200260200182016040528015610e17578160200160208202803683370190505b50905060005b8451811015610e8f57610e62858281518110610e3b57610e3b613505565b6020026020010151858381518110610e5557610e55613505565b602002602001015161042b565b828281518110610e7457610e74613505565b6020908102919091010152610e88816134ec565b9050610e1d565b509392505050565b60fb546001600160a01b03163314610f005760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60fe548114610f5d5760405162461bcd60e51b8152602060048201526024808201527f496e636f7272656374206e756d626572206f6620747261697473207370656369604482015263199a595960e21b60648201526084016104a5565b60008167ffffffffffffffff811115610f7857610f78612c12565b604051908082528060200260200182016040528015610fa1578160200160208202803683370190505b50905060005b8281101561105e57806101006000868685818110610fc757610fc7613505565b905060200201358152602001908152602001600020600201541461102d5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420747261697420746f6b656e2049447300000000000000000060448201526064016104a5565b600182828151811061104157611041613505565b602090810291909101015280611056816134ec565b915050610fa7565b5060fb546040805160208086028281018201909352858252610ae4936001600160a01b03169288929188918891829190850190849080828437600092018290525060408051602081019091529081528893509150611b459050565b6000818152610100602052604090206002015460ff80546060929081106110e2576110e2613505565b906000526020600020018054610af990613562565b6001600160a01b038316331480611113575061111383336103c4565b6111715760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b61117c838383611db4565b505050565b6060806060806060806000600160fc5461119b919061383a565b90508067ffffffffffffffff8111156111b6576111b6612c12565b6040519080825280602002602001820160405280156111df578160200160208202803683370190505b5096508067ffffffffffffffff8111156111fb576111fb612c12565b60405190808252806020026020018201604052801561122e57816020015b60608152602001906001900390816112195790505b5095508067ffffffffffffffff81111561124a5761124a612c12565b60405190808252806020026020018201604052801561127d57816020015b60608152602001906001900390816112685790505b5094508067ffffffffffffffff81111561129957611299612c12565b6040519080825280602002602001820160405280156112c2578160200160208202803683370190505b5093508067ffffffffffffffff8111156112de576112de612c12565b60405190808252806020026020018201604052801561131157816020015b60608152602001906001900390816112fc5790505b5092508067ffffffffffffffff81111561132d5761132d612c12565b60405190808252806020026020018201604052801561136057816020015b606081526020019060019003908161134b5790505b50915060005b8181101561173e5761137981600161384d565b88828151811061138b5761138b613505565b602090810291909101015261010060006113a683600161384d565b815260200190815260200160002060000180546113c290613562565b80601f01602080910402602001604051908101604052809291908181526020018280546113ee90613562565b801561143b5780601f106114105761010080835404028352916020019161143b565b820191906000526020600020905b81548152906001019060200180831161141e57829003601f168201915b505050505087828151811061145257611452613505565b6020908102919091010152610100600061146d83600161384d565b8152602001908152602001600020600101805461148990613562565b80601f01602080910402602001604051908101604052809291908181526020018280546114b590613562565b80156115025780601f106114d757610100808354040283529160200191611502565b820191906000526020600020905b8154815290600101906020018083116114e557829003601f168201915b505050505086828151811061151957611519613505565b6020908102919091010152610100600061153483600161384d565b81526020019081526020016000206002015485828151811061155857611558613505565b602090810291909101015260fe610100600061157584600161384d565b8152602001908152602001600020600201548154811061159757611597613505565b9060005260206000200180546115ac90613562565b80601f01602080910402602001604051908101604052809291908181526020018280546115d890613562565b80156116255780601f106115fa57610100808354040283529160200191611625565b820191906000526020600020905b81548152906001019060200180831161160857829003601f168201915b505050505084828151811061163c5761163c613505565b602090810291909101015260ff610100600061165984600161384d565b8152602001908152602001600020600201548154811061167b5761167b613505565b90600052602060002001805461169090613562565b80601f01602080910402602001604051908101604052809291908181526020018280546116bc90613562565b80156117095780601f106116de57610100808354040283529160200191611709565b820191906000526020600020905b8154815290600101906020018083116116ec57829003601f168201915b505050505083828151811061172057611720613505565b60200260200101819052508080611736906134ec565b915050611366565b5050909192939495565b611753338383611ffe565b5050565b6000818152610100602052604090206002015460fe80546060929081106110e2576110e2613505565b60fb546001600160a01b031633146117e95760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60005b82518110156118d957610100600084838151811061180c5761180c613505565b602002602001015181526020019081526020016000206003015482828151811061183857611838613505565b602002602001015161186f85848151811061185557611855613505565b6020026020010151600090815260c9602052604090205490565b611879919061384d565b11156118c75760405162461bcd60e51b815260206004820152601860248201527f5472616974206d617820737570706c792072656163686564000000000000000060448201526064016104a5565b806118d1816134ec565b9150506117ec565b5061117c838383604051806020016040528060008152506120f2565b600081815261010060205260409020600101805460609190610af990613562565b600081815261010060205260409020805460609190610af990613562565b6001600160a01b038516331480611950575061195085336103c4565b6119ae5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b610d5285858585856122e4565b600054610100900460ff166119d65760005460ff16156119da565b303b155b611a4c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104a5565b600054610100900460ff16158015611a6e576000805461ffff19166101011790555b611a7782612495565b60fb80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038516179055801561117c576000805461ff0019169055505050565b6001600160a01b038316331480611adc5750611adc83336103c4565b611b3a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b61117c83838361250c565b8151835114611ba75760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b6001600160a01b038416611c0b5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104a5565b33611c1a818787878787612689565b60005b8451811015611d46576000858281518110611c3a57611c3a613505565b602002602001015190506000858381518110611c5857611c58613505565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015611cec5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104a5565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611d2b90849061384d565b9250508190555050505080611d3f906134ec565b9050611c1d565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611d96929190613860565b60405180910390a4611dac818787878787612697565b505050505050565b6001600160a01b038316611e165760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104a5565b8051825114611e785760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b6000339050611e9b81856000868660405180602001604052806000815250612689565b60005b8351811015611f9f576000848281518110611ebb57611ebb613505565b602002602001015190506000848381518110611ed957611ed9613505565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611f665760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104a5565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611f97816134ec565b915050611e9e565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611ff0929190613860565b60405180910390a450505050565b816001600160a01b0316836001600160a01b0316036120855760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016104a5565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841661216e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104a5565b81518351146121d05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b336121e081600087878787612689565b60005b845181101561227c578381815181106121fe576121fe613505565b60200260200101516065600087848151811061221c5761221c613505565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254612264919061384d565b90915550819050612274816134ec565b9150506121e3565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122cd929190613860565b60405180910390a4610d5281600087878787612697565b6001600160a01b0384166123485760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104a5565b336123678187876123588861283c565b6123618861283c565b87612689565b60008481526065602090815260408083206001600160a01b038a168452909152902054838110156123ed5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104a5565b60008581526065602090815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061242c90849061384d565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461248c828888888888612887565b50505050505050565b600054610100900460ff166125005760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a5565b61250981612983565b50565b6001600160a01b03831661256e5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104a5565b3361259d8185600061257f8761283c565b6125888761283c565b60405180602001604052806000815250612689565b60008381526065602090815260408083206001600160a01b03881684529091529020548281101561261c5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104a5565b60008481526065602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b611dac8686868686866129f7565b6001600160a01b0384163b15611dac5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906126db908990899088908890889060040161388e565b6020604051808303816000875af1925050508015612716575060408051601f3d908101601f19168201909252612713918101906138ec565b60015b6127cb57612722613909565b806308c379a00361275b5750612736613925565b80612741575061275d565b8060405162461bcd60e51b81526004016104a59190612fcb565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016104a5565b6001600160e01b0319811663bc197c8160e01b1461248c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104a5565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061287657612876613505565b602090810291909101015292915050565b6001600160a01b0384163b15611dac5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906128cb90899089908890889088906004016139af565b6020604051808303816000875af1925050508015612906575060408051601f3d908101601f19168201909252612903918101906138ec565b60015b61291257612722613909565b6001600160e01b0319811663f23a6e6160e01b1461248c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104a5565b600054610100900460ff166129ee5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a5565b61250981612b03565b6001600160a01b038516612a7e5760005b8351811015612a7c57828181518110612a2357612a23613505565b602002602001015160c96000868481518110612a4157612a41613505565b602002602001015181526020019081526020016000206000828254612a66919061384d565b90915550612a759050816134ec565b9050612a08565b505b6001600160a01b038416611dac5760005b835181101561248c57828181518110612aaa57612aaa613505565b602002602001015160c96000868481518110612ac857612ac8613505565b602002602001015181526020019081526020016000206000828254612aed919061383a565b90915550612afc9050816134ec565b9050612a8f565b606761175382826139f2565b828054828255906000526020600020908101928215612b55579160200282015b82811115612b555782518290612b4590826139f2565b5091602001919060010190612b2f565b50612b61929150612b65565b5090565b80821115612b61576000612b798282612b82565b50600101612b65565b508054612b8e90613562565b6000825580601f10612b9e575050565b601f01602090049060005260206000209081019061250991905b80821115612b615760008155600101612bb8565b80356001600160a01b0381168114612be357600080fd5b919050565b60008060408385031215612bfb57600080fd5b612c0483612bcc565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612c4e57612c4e612c12565b6040525050565b600067ffffffffffffffff821115612c6f57612c6f612c12565b5060051b60200190565b600082601f830112612c8a57600080fd5b813567ffffffffffffffff811115612ca457612ca4612c12565b604051612cbb601f8301601f191660200182612c28565b818152846020838601011115612cd057600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612cfe57600080fd5b81356020612d0b82612c55565b604051612d188282612c28565b83815260059390931b8501820192828101915086841115612d3857600080fd5b8286015b84811015612d7857803567ffffffffffffffff811115612d5c5760008081fd5b612d6a8986838b0101612c79565b845250918301918301612d3c565b509695505050505050565b60008083601f840112612d9557600080fd5b50813567ffffffffffffffff811115612dad57600080fd5b6020830191508360208260051b8501011115612dc857600080fd5b9250929050565b60008060008060008060008060008060c08b8d031215612dee57600080fd5b8a3567ffffffffffffffff80821115612e0657600080fd5b612e128e838f01612ced565b9b5060208d0135915080821115612e2857600080fd5b612e348e838f01612ced565b9a5060408d0135915080821115612e4a57600080fd5b612e568e838f01612d83565b909a50985060608d0135915080821115612e6f57600080fd5b612e7b8e838f01612d83565b909850965060808d0135915080821115612e9457600080fd5b612ea08e838f01612d83565b909650945060a08d0135915080821115612eb957600080fd5b50612ec68d828e01612d83565b915080935050809150509295989b9194979a5092959850565b6001600160e01b03198116811461250957600080fd5b600060208284031215612f0757600080fd5b8135612f1281612edf565b9392505050565b600080600060408486031215612f2e57600080fd5b612f3784612bcc565b9250602084013567ffffffffffffffff811115612f5357600080fd5b612f5f86828701612d83565b9497909650939450505050565b600060208284031215612f7e57600080fd5b5035919050565b6000815180845260005b81811015612fab57602081850181015186830182015201612f8f565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000612f126020830184612f85565b608081526000612ff16080830187612f85565b82810360208401526130038187612f85565b604084019590955250506060015292915050565b600082601f83011261302857600080fd5b8135602061303582612c55565b6040516130428282612c28565b83815260059390931b850182019282810191508684111561306257600080fd5b8286015b84811015612d785780358352918301918301613066565b600080600080600060a0868803121561309557600080fd5b61309e86612bcc565b94506130ac60208701612bcc565b9350604086013567ffffffffffffffff808211156130c957600080fd5b6130d589838a01613017565b945060608801359150808211156130eb57600080fd5b6130f789838a01613017565b9350608088013591508082111561310d57600080fd5b5061311a88828901612c79565b9150509295509295909350565b6000806040838503121561313a57600080fd5b823567ffffffffffffffff8082111561315257600080fd5b818501915085601f83011261316657600080fd5b8135602061317382612c55565b6040516131808282612c28565b83815260059390931b85018201928281019150898411156131a057600080fd5b948201945b838610156131c5576131b686612bcc565b825294820194908201906131a5565b965050860135925050808211156131db57600080fd5b506131e885828601613017565b9150509250929050565b600081518084526020808501945080840160005b8381101561322257815187529582019590820190600101613206565b509495945050505050565b602081526000612f1260208301846131f2565b60008060006060848603121561325557600080fd5b61325e84612bcc565b9250602084013567ffffffffffffffff8082111561327b57600080fd5b61328787838801613017565b9350604086013591508082111561329d57600080fd5b506132aa86828701613017565b9150509250925092565b600081518084526020808501808196508360051b8101915082860160005b858110156132fc5782840389526132ea848351612f85565b988501989350908401906001016132d2565b5091979650505050505050565b60c08152600061331c60c08301896131f2565b828103602084015261332e81896132b4565b9050828103604084015261334281886132b4565b9050828103606084015261335681876131f2565b9050828103608084015261336a81866132b4565b905082810360a084015261337e81856132b4565b9998505050505050505050565b6000806040838503121561339e57600080fd5b6133a783612bcc565b9150602083013580151581146133bc57600080fd5b809150509250929050565b600080604083850312156133da57600080fd5b6133e383612bcc565b91506133f160208401612bcc565b90509250929050565b600080600080600060a0868803121561341257600080fd5b61341b86612bcc565b945061342960208701612bcc565b93506040860135925060608601359150608086013567ffffffffffffffff81111561345357600080fd5b61311a88828901612c79565b6000806040838503121561347257600080fd5b61347b83612bcc565b9150602083013567ffffffffffffffff81111561349757600080fd5b6131e885828601612c79565b6000806000606084860312156134b857600080fd5b6134c184612bcc565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016134fe576134fe6134d6565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261353257600080fd5b83018035915067ffffffffffffffff82111561354d57600080fd5b602001915036819003821315612dc857600080fd5b600181811c9082168061357657607f821691505b60208210810361359657634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561117c57600081815260208120601f850160051c810160208610156135c35750805b601f850160051c820191505b81811015611dac578281556001016135cf565b67ffffffffffffffff8311156135fa576135fa612c12565b61360e836136088354613562565b8361359c565b6000601f841160018114613642576000851561362a5750838201355b600019600387901b1c1916600186901b178355610d52565b600083815260209020601f19861690835b828110156136735786850135825560209485019460019092019101613653565b50868210156136905760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b878110156132fc5782840389528135601e1988360301811261370657600080fd5b8701858101903567ffffffffffffffff81111561372257600080fd5b80360382131561373157600080fd5b61373c8682846136a2565b9a87019a95505050908401906001016136e5565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561378257600080fd5b8260051b80836020870137939093016020019392505050565b60e0815260006137ae60e083018e6132b4565b82810360208401526137c0818e6132b4565b905082810360408401526137d4818d6131f2565b905082810360608401526137e9818b8d6136cb565b905082810360808401526137fe81898b6136cb565b905082810360a0840152613813818789613750565b905082810360c0840152613828818587613750565b9e9d5050505050505050505050505050565b818103818111156104d3576104d36134d6565b808201808211156104d3576104d36134d6565b60408152600061387360408301856131f2565b828103602084015261388581856131f2565b95945050505050565b60006001600160a01b03808816835280871660208401525060a060408301526138ba60a08301866131f2565b82810360608401526138cc81866131f2565b905082810360808401526138e08185612f85565b98975050505050505050565b6000602082840312156138fe57600080fd5b8151612f1281612edf565b600060033d11156139225760046000803e5060005160e01c5b90565b600060443d10156139335790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561396357505050505090565b828501915081518181111561397b5750505050505090565b843d87010160208285010111156139955750505050505090565b6139a460208286010187612c28565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526139e760a0830184612f85565b979650505050505050565b815167ffffffffffffffff811115613a0c57613a0c612c12565b613a2081613a1a8454613562565b8461359c565b602080601f831160018114613a555760008415613a3d5750858301515b600019600386901b1c1916600185901b178555611dac565b600085815260208120601f198616915b82811015613a8457888601518255948401946001909101908401613a65565b5085821015613aa25787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220fe5e1f0368a463158aa8c7262b1415fe4c4a2d8a911764862e3b4475aeb25a6464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3498,
        "contract": "contracts/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3745,
        "contract": "contracts/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 226,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 232,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 234,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1314,
        "contract": "contracts/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 1566,
        "contract": "contracts/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1592,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1719,
        "contract": "contracts/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5915,
        "contract": "contracts/Traits.sol:Traits",
        "label": "studio",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 5918,
        "contract": "contracts/Traits.sol:Traits",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 5920,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traitTypesLength",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 5923,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traitTypeNames",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 5926,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traitTypeValues",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 5931,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traits",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_struct(Trait)5913_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Trait)5913_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Traits.Trait)",
        "numberOfBytes": "32",
        "value": "t_struct(Trait)5913_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Trait)5913_storage": {
        "encoding": "inplace",
        "label": "struct Traits.Trait",
        "members": [
          {
            "astId": 5906,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5908,
            "contract": "contracts/Traits.sol:Traits",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5910,
            "contract": "contracts/Traits.sol:Traits",
            "label": "typeIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5912,
            "contract": "contracts/Traits.sol:Traits",
            "label": "maxSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}