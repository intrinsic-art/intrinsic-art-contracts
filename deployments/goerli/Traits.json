{
  "address": "0x17218d7135B24bcA4305b41B736Aa0f2252CC3Ed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_artwork",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_platformRevenueClaimer",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_artistRevenueClaimer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AuctionNotLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEthAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTraits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Locked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRevenue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyArtwork",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyClaimer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SoldOut",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedRevenue",
          "type": "uint256"
        }
      ],
      "name": "ArtistRevenueClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "ArtistRevenueClaimerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedRevenue",
          "type": "uint256"
        }
      ],
      "name": "PlatformRevenueClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "PlatormRevenueClaimerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitQuantities",
          "type": "uint256[]"
        }
      ],
      "name": "TraitsBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUCTION_PLATFORM_FEE_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artistClaimableRevenues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artistRevenueClaimer",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artwork",
      "outputs": [
        {
          "internalType": "contract IArtwork",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "buyTraits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimArtistRevenue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPlatformRevenue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitMaxRevenues",
          "type": "uint256[]"
        }
      ],
      "name": "createTraitsAndTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformClaimableRevenues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformRevenueClaimer",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStartPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndPrice",
          "type": "uint256"
        }
      ],
      "name": "scheduleAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "trait",
      "outputs": [
        {
          "internalType": "string",
          "name": "_traitName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitValue",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitTypeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitTypeValue",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "traitMaxRevenue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maxRevenue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "traitTotalRevenue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalRevenue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitTypes",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "transferTraitsToCreateArtwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "updateArtistRevenueClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "updatePlatformRevenueClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "updateURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0d918210bf48fa1d4f89b87f81ddfe6c2de4e9c25c4e0fecc7831e581d6ab02",
  "receipt": {
    "to": null,
    "from": "0xAa9D46AE079851116967c6573f961B304095C34a",
    "contractAddress": "0x17218d7135B24bcA4305b41B736Aa0f2252CC3Ed",
    "transactionIndex": 41,
    "gasUsed": "3710618",
    "logsBloom": "0x
    "blockHash": "0x58ea5ec618b0c8c8cd520a6aa77578b5c1040f534f7c635cfd7c72b68a75da71",
    "transactionHash": "0xf0d918210bf48fa1d4f89b87f81ddfe6c2de4e9c25c4e0fecc7831e581d6ab02",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 8814002,
        "transactionHash": "0xf0d918210bf48fa1d4f89b87f81ddfe6c2de4e9c25c4e0fecc7831e581d6ab02",
        "address": "0x17218d7135B24bcA4305b41B736Aa0f2252CC3Ed",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aa9d46ae079851116967c6573f961b304095c34a"
        ],
        "data": "0x",
        "logIndex": 81,
        "blockHash": "0x58ea5ec618b0c8c8cd520a6aa77578b5c1040f534f7c635cfd7c72b68a75da71"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 8814002,
        "transactionHash": "0xf0d918210bf48fa1d4f89b87f81ddfe6c2de4e9c25c4e0fecc7831e581d6ab02",
        "address": "0x17218d7135B24bcA4305b41B736Aa0f2252CC3Ed",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000aa9d46ae079851116967c6573f961b304095c34a",
          "0x000000000000000000000000aa9d46ae079851116967c6573f961b304095c34a"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0x58ea5ec618b0c8c8cd520a6aa77578b5c1040f534f7c635cfd7c72b68a75da71"
      }
    ],
    "blockNumber": 8814002,
    "cumulativeGasUsed": "10039041",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaE92614d29a43c0b1B5b0944CC0F9d370a27Ba75",
    "https://api.intrinsic.art/",
    "0xAa9D46AE079851116967c6573f961B304095C34a",
    "0xAa9D46AE079851116967c6573f961B304095C34a",
    "0xAa9D46AE079851116967c6573f961B304095C34a"
  ],
  "numDeployments": 1,
  "solcInputHash": "85c0a34fedfad7f77697de3e7385ecea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artwork\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_platformRevenueClaimer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_artistRevenueClaimer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctionNotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEthAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTraits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Locked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRevenue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyArtwork\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyClaimer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SoldOut\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedRevenue\",\"type\":\"uint256\"}],\"name\":\"ArtistRevenueClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"ArtistRevenueClaimerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedRevenue\",\"type\":\"uint256\"}],\"name\":\"PlatformRevenueClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"PlatormRevenueClaimerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitQuantities\",\"type\":\"uint256[]\"}],\"name\":\"TraitsBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_PLATFORM_FEE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistClaimableRevenues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistRevenueClaimer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artwork\",\"outputs\":[{\"internalType\":\"contract IArtwork\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"buyTraits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimArtistRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPlatformRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitMaxRevenues\",\"type\":\"uint256[]\"}],\"name\":\"createTraitsAndTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformClaimableRevenues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformRevenueClaimer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndPrice\",\"type\":\"uint256\"}],\"name\":\"scheduleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"trait\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_traitName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitValue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitTypeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitTypeValue\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"traitMaxRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxRevenue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"traitTotalRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRevenue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitTypes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferTraitsToCreateArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"updateArtistRevenueClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"updatePlatformRevenueClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Traits.sol\":\"Traits\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\r\\npragma solidity =0.8.19;\\r\\n\\r\\nimport {ITraits} from \\\"./interfaces/ITraits.sol\\\";\\r\\nimport {IArtwork} from \\\"./interfaces/IArtwork.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport {ERC1155Supply} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\r\\n\\r\\ncontract Traits is ITraits, ERC1155, ERC1155Supply, Ownable {\\r\\n    IArtwork public artwork;\\r\\n    address payable public platformRevenueClaimer;\\r\\n    address payable public artistRevenueClaimer;\\r\\n    string public constant VERSION = \\\"1.0.0\\\";\\r\\n    uint256 public constant AUCTION_PLATFORM_FEE_NUMERATOR = 100_000;\\r\\n    uint256 public constant FEE_DENOMINATOR = 1_000_000;\\r\\n    uint256 public artistClaimableRevenues;\\r\\n    uint256 public platformClaimableRevenues;\\r\\n    uint256 public auctionStartTime;\\r\\n    uint256 public auctionEndTime;\\r\\n    uint256 public auctionStartPrice;\\r\\n    uint256 public auctionEndPrice;\\r\\n    TraitType[] private _traitTypes;\\r\\n    Trait[] private _traits;\\r\\n\\r\\n    modifier onlyArtwork() {\\r\\n        if (msg.sender != address(artwork)) revert OnlyArtwork();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _artwork,\\r\\n        string memory _uri,\\r\\n        address _owner,\\r\\n        address payable _platformRevenueClaimer,\\r\\n        address payable _artistRevenueClaimer\\r\\n    ) ERC1155(_uri) {\\r\\n        artwork = IArtwork(_artwork);\\r\\n        _transferOwnership(_owner);\\r\\n        platformRevenueClaimer = _platformRevenueClaimer;\\r\\n        artistRevenueClaimer = _artistRevenueClaimer;\\r\\n    }\\r\\n\\r\\n    function createTraitsAndTypes(\\r\\n        string[] memory _traitTypeNames,\\r\\n        string[] memory _traitTypeValues,\\r\\n        string[] calldata _traitNames,\\r\\n        string[] calldata _traitValues,\\r\\n        uint256[] calldata _traitTypeIndexes,\\r\\n        uint256[] calldata _traitMaxRevenues\\r\\n    ) external onlyOwner {\\r\\n        if (artwork.locked()) revert Locked();\\r\\n        if (\\r\\n            _traitTypeNames.length == 0 ||\\r\\n            _traitNames.length == 0 ||\\r\\n            _traitTypeNames.length != _traitTypeValues.length ||\\r\\n            _traitNames.length != _traitValues.length ||\\r\\n            _traitNames.length != _traitTypeIndexes.length ||\\r\\n            _traitNames.length != _traitMaxRevenues.length\\r\\n        ) revert InvalidArrayLengths();\\r\\n\\r\\n        // Push trait types to array\\r\\n        for (uint256 i; i < _traitTypeNames.length; ) {\\r\\n            _traitTypes.push(\\r\\n                TraitType({\\r\\n                    name: _traitTypeNames[i],\\r\\n                    value: _traitTypeValues[i]\\r\\n                })\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Push traits to array\\r\\n        for (uint256 i; i < _traitNames.length; ) {\\r\\n            _traits.push(\\r\\n                Trait({\\r\\n                    name: _traitNames[i],\\r\\n                    value: _traitValues[i],\\r\\n                    typeIndex: _traitTypeIndexes[i],\\r\\n                    maxRevenue: _traitMaxRevenues[i],\\r\\n                    totalRevenue: 0\\r\\n                })\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function scheduleAuction(\\r\\n        uint256 _auctionStartTime,\\r\\n        uint256 _auctionEndTime,\\r\\n        uint256 _auctionStartPrice,\\r\\n        uint256 _auctionEndPrice\\r\\n    ) external onlyOwner {\\r\\n        if (!artwork.locked()) revert NotLocked();\\r\\n        if (\\r\\n            _auctionEndTime < _auctionStartTime ||\\r\\n            _auctionEndPrice > _auctionStartPrice\\r\\n        ) revert InvalidAuction();\\r\\n\\r\\n        auctionStartTime = _auctionStartTime;\\r\\n        auctionEndTime = _auctionEndTime;\\r\\n        auctionStartPrice = _auctionStartPrice;\\r\\n        auctionEndPrice = _auctionEndPrice;\\r\\n    }\\r\\n\\r\\n    function updateURI(string memory _uri) external onlyOwner {\\r\\n        _setURI(_uri);\\r\\n    }\\r\\n\\r\\n    function updatePlatformRevenueClaimer(\\r\\n        address payable _claimer\\r\\n    ) external onlyOwner {\\r\\n        platformRevenueClaimer = _claimer;\\r\\n    }\\r\\n\\r\\n    function updateArtistRevenueClaimer(address payable _claimer) external {\\r\\n        if (msg.sender != artistRevenueClaimer) revert OnlyClaimer();\\r\\n\\r\\n        artistRevenueClaimer = _claimer;\\r\\n    }\\r\\n\\r\\n    function buyTraits(\\r\\n        address _recipient,\\r\\n        uint256[] calldata _traitTokenIds,\\r\\n        uint256[] calldata _traitAmounts\\r\\n    ) public payable {\\r\\n        if (_traitTokenIds.length != _traitAmounts.length)\\r\\n            revert InvalidArrayLengths();\\r\\n\\r\\n        uint256 _traitCount;\\r\\n        uint256 _traitPrice = traitPrice();\\r\\n\\r\\n        for (uint256 i; i < _traitAmounts.length; ) {\\r\\n            _traitCount += _traitAmounts[i];\\r\\n\\r\\n            uint256 newTraitRevenue = _traits[_traitTokenIds[i]].totalRevenue +\\r\\n                (_traitPrice * _traitAmounts[i]);\\r\\n\\r\\n            if (\\r\\n                newTraitRevenue >\\r\\n                _traits[_traitTokenIds[i]].maxRevenue + _traitPrice\\r\\n            ) revert SoldOut();\\r\\n\\r\\n            _traits[_traitTokenIds[i]].totalRevenue = newTraitRevenue;\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 ethCost = _traitCount * _traitPrice;\\r\\n\\r\\n        if (msg.value < ethCost) revert InvalidEthAmount();\\r\\n\\r\\n        uint256 platformRevenue = (msg.value * AUCTION_PLATFORM_FEE_NUMERATOR) /\\r\\n            FEE_DENOMINATOR;\\r\\n        platformClaimableRevenues += platformRevenue;\\r\\n        artistClaimableRevenues += msg.value - platformRevenue;\\r\\n\\r\\n        emit TraitsBought(_recipient, _traitTokenIds, _traitAmounts);\\r\\n\\r\\n        _mintBatch(_recipient, _traitTokenIds, _traitAmounts, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function transferTraitsToCreateArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external onlyArtwork {\\r\\n        if (_traitTokenIds.length != _traitTypes.length)\\r\\n            revert InvalidArrayLengths();\\r\\n\\r\\n        uint256[] memory amounts = new uint256[](_traitTokenIds.length);\\r\\n\\r\\n        for (uint256 i; i < _traitTokenIds.length; ) {\\r\\n            if (_traits[_traitTokenIds[i]].typeIndex != i)\\r\\n                revert InvalidTraits();\\r\\n            amounts[i] = 1;\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _safeBatchTransferFrom(\\r\\n            _caller,\\r\\n            address(artwork),\\r\\n            _traitTokenIds,\\r\\n            amounts,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function claimPlatformRevenue() external {\\r\\n        if (msg.sender != platformRevenueClaimer) revert OnlyClaimer();\\r\\n        uint256 claimedRevenue = platformClaimableRevenues;\\r\\n        if (claimedRevenue == 0) revert NoRevenue();\\r\\n\\r\\n        platformClaimableRevenues = 0;\\r\\n\\r\\n        emit PlatformRevenueClaimed(claimedRevenue);\\r\\n\\r\\n        platformRevenueClaimer.transfer(claimedRevenue);\\r\\n    }\\r\\n\\r\\n    function claimArtistRevenue() external {\\r\\n        if (msg.sender != artistRevenueClaimer) revert OnlyClaimer();\\r\\n        uint256 claimedRevenue = artistClaimableRevenues;\\r\\n        if (claimedRevenue == 0) revert NoRevenue();\\r\\n\\r\\n        artistClaimableRevenues = 0;\\r\\n\\r\\n        emit ArtistRevenueClaimed(claimedRevenue);\\r\\n\\r\\n        artistRevenueClaimer.transfer(claimedRevenue);\\r\\n    }\\r\\n\\r\\n    function maxSupply(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (uint256 _maxSupply) {\\r\\n        if (_traits[_tokenId].maxRevenue >= _traits[_tokenId].totalRevenue) {\\r\\n            _maxSupply =\\r\\n                totalSupply(_tokenId) +\\r\\n                ((_traits[_tokenId].maxRevenue -\\r\\n                    _traits[_tokenId].totalRevenue) / auctionEndPrice) +\\r\\n                1;\\r\\n        } else {\\r\\n            _maxSupply = totalSupply(_tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function traits()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            uint256[] memory _traitTypeIndexes,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        )\\r\\n    {\\r\\n        uint256 traitCount = _traits.length;\\r\\n\\r\\n        _traitTokenIds = new uint256[](traitCount);\\r\\n        _traitNames = new string[](traitCount);\\r\\n        _traitValues = new string[](traitCount);\\r\\n        _traitTypeIndexes = new uint256[](traitCount);\\r\\n        _traitTypeNames = new string[](traitCount);\\r\\n        _traitTypeValues = new string[](traitCount);\\r\\n\\r\\n        for (uint256 i = 0; i < traitCount; ) {\\r\\n            _traitTokenIds[i] = i;\\r\\n            _traitNames[i] = _traits[i].name;\\r\\n            _traitValues[i] = _traits[i].value;\\r\\n            _traitTypeIndexes[i] = _traits[i].typeIndex;\\r\\n            _traitTypeNames[i] = _traitTypes[_traits[i].typeIndex].name;\\r\\n            _traitTypeValues[i] = _traitTypes[_traits[i].typeIndex].value;\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function traitTypes()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        )\\r\\n    {\\r\\n        uint256 traitTypeCount = _traitTypes.length;\\r\\n\\r\\n        _traitTypeNames = new string[](traitTypeCount);\\r\\n        _traitTypeValues = new string[](traitTypeCount);\\r\\n\\r\\n        for (uint256 i; i < traitTypeCount; ) {\\r\\n            _traitTypeNames[i] = _traitTypes[i].name;\\r\\n            _traitTypeValues[i] = _traitTypes[i].value;\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function trait(\\r\\n        uint256 _tokenId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string memory _traitName,\\r\\n            string memory _traitValue,\\r\\n            string memory _traitTypeName,\\r\\n            string memory _traitTypeValue\\r\\n        )\\r\\n    {\\r\\n        _traitName = _traits[_tokenId].name;\\r\\n        _traitValue = _traits[_tokenId].value;\\r\\n        _traitTypeName = _traitTypes[_traits[_tokenId].typeIndex].name;\\r\\n        _traitTypeValue = _traitTypes[_traits[_tokenId].typeIndex].value;\\r\\n    }\\r\\n\\r\\n    function traitTotalRevenue(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (uint256 _totalRevenue) {\\r\\n        _totalRevenue = _traits[_tokenId].totalRevenue;\\r\\n    }\\r\\n\\r\\n    function traitMaxRevenue(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (uint256 _maxRevenue) {\\r\\n        _maxRevenue = _traits[_tokenId].maxRevenue;\\r\\n    }\\r\\n\\r\\n    function traitPrice() public view returns (uint256 _price) {\\r\\n        if (block.timestamp < auctionStartTime) revert AuctionNotLive();\\r\\n\\r\\n        if (block.timestamp > auctionEndTime) {\\r\\n            // Auction has ended\\r\\n            _price = auctionEndPrice;\\r\\n        } else {\\r\\n            // Auction is active\\r\\n            _price =\\r\\n                auctionStartPrice -\\r\\n                (\\r\\n                    (((block.timestamp - auctionStartTime) *\\r\\n                        (auctionStartPrice - auctionEndPrice)) /\\r\\n                        (auctionEndTime - auctionStartTime))\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal override(ERC1155, ERC1155Supply) {\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x323133100774a4cdd08124fdd3148e9e514415aadb5ac50529ac01cd308122ac\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IArtwork.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\r\\npragma solidity =0.8.19;\\r\\n\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IArtwork is IERC721 {\\r\\n    struct ArtworkData {\\r\\n        bytes32 hash;\\r\\n        uint256[] traitTokenIds;\\r\\n    }\\r\\n\\r\\n    error TraitsAlreadySet();\\r\\n    error Locked();\\r\\n    error OnlyArtist();\\r\\n    error OnlyArtworkOwner();\\r\\n\\r\\n    event ArtistAddressUpdated(address indexed artistAddress);\\r\\n    event BaseURIUpdated(string baseURI);\\r\\n    event ArtworkCreated(\\r\\n        uint256 indexed artworkTokenId,\\r\\n        uint256[] traitTokenIds,\\r\\n        bytes32 hash,\\r\\n        address indexed creator\\r\\n    );\\r\\n    event ArtworkDecomposed(\\r\\n        uint256 indexed artworkTokenId,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    function setTraits(address _traits) external;\\r\\n\\r\\n    function updateScript(\\r\\n        uint256 _scriptIndex,\\r\\n        string calldata _script\\r\\n    ) external;\\r\\n\\r\\n    function updateBaseURI(string memory _baseURI) external;\\r\\n\\r\\n    function lockProject() external;\\r\\n\\r\\n    function createArtwork(\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external returns (uint256 _artworkTokenId);\\r\\n\\r\\n    function decomposeArtwork(uint256 _artworkTokenId) external;\\r\\n\\r\\n    function buyTraitsCreateArtwork(\\r\\n        uint256[] calldata _traitTokenIdsToBuy,\\r\\n        uint256[] calldata _traitQuantitiesToBuy,\\r\\n        uint256[] calldata _traitTokenIdsToCreateArtwork\\r\\n    ) external payable;\\r\\n\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    function artwork(\\r\\n        uint256 _artworkTokenId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues,\\r\\n            bytes32 _hash\\r\\n        );\\r\\n\\r\\n    function projectScripts() external view returns (string[] memory _scripts);\\r\\n\\r\\n    function projectScriptCount() external view returns (uint256);\\r\\n\\r\\n    function projectTraits()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            uint256[] memory _traitTypeIndexes,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        );\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    function locked() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xb43cb40ede522326e2b75c9030d5b6d62f973b20112a07bcfb3f58381794fae6\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\r\\npragma solidity =0.8.19;\\r\\n\\r\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\ninterface ITraits is IERC1155 {\\r\\n    struct TraitType {\\r\\n        string name;\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    struct Trait {\\r\\n        string name;\\r\\n        string value;\\r\\n        uint256 typeIndex;\\r\\n        uint256 maxRevenue;\\r\\n        uint256 totalRevenue;\\r\\n    }\\r\\n\\r\\n    event TraitsBought(\\r\\n        address indexed recipient,\\r\\n        uint256[] traitTokenIds,\\r\\n        uint256[] traitQuantities\\r\\n    );\\r\\n\\r\\n    error OnlyArtwork();\\r\\n    error Locked();\\r\\n    error InvalidArrayLengths();\\r\\n    error NotLocked();\\r\\n    error InvalidAuction();\\r\\n    error OnlyClaimer();\\r\\n    error SoldOut();\\r\\n    error InvalidEthAmount();\\r\\n    error InvalidTraits();\\r\\n    error NoRevenue();\\r\\n    error AuctionNotLive();\\r\\n\\r\\n    event PlatformRevenueClaimed(uint256 claimedRevenue);\\r\\n    event ArtistRevenueClaimed(uint256 claimedRevenue);\\r\\n    event PlatormRevenueClaimerUpdated(address indexed claimer);\\r\\n    event ArtistRevenueClaimerUpdated(address indexed claimer);\\r\\n\\r\\n    function createTraitsAndTypes(\\r\\n        string[] memory _traitTypeNames,\\r\\n        string[] memory _traitTypeValues,\\r\\n        string[] calldata _traitNames,\\r\\n        string[] calldata _traitValues,\\r\\n        uint256[] calldata _traitTypeIndexes,\\r\\n        uint256[] calldata _traitMaxRevenues\\r\\n    ) external;\\r\\n\\r\\n    function scheduleAuction(\\r\\n        uint256 _auctionStartTime,\\r\\n        uint256 _auctionEndTime,\\r\\n        uint256 _auctionStartPrice,\\r\\n        uint256 _auctionEndPrice\\r\\n    ) external;\\r\\n\\r\\n    function updateURI(string memory _uri) external;\\r\\n\\r\\n    function updatePlatformRevenueClaimer(address payable _claimer) external;\\r\\n\\r\\n    function updateArtistRevenueClaimer(address payable _claimer) external;\\r\\n\\r\\n    function buyTraits(\\r\\n        address _recipient,\\r\\n        uint256[] calldata _traitTokenIds,\\r\\n        uint256[] calldata _traitAmounts\\r\\n    ) external payable;\\r\\n\\r\\n    function maxSupply(uint256 _tokenId) external view returns (uint256 _maxSupply);\\r\\n\\r\\n    function transferTraitsToCreateArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external;\\r\\n\\r\\n    function claimPlatformRevenue() external;\\r\\n\\r\\n    function claimArtistRevenue() external;\\r\\n\\r\\n    function traits()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            uint256[] memory _traitTypeIndexes,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        );\\r\\n\\r\\n    function traitTypes()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        );\\r\\n\\r\\n    function trait(\\r\\n        uint256 _tokenId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory _traitName,\\r\\n            string memory _traitValue,\\r\\n            string memory _traitTypeName,\\r\\n            string memory _traitTypeValue\\r\\n        );\\r\\n\\r\\n    function traitTotalRevenue(\\r\\n        uint256 _tokenId\\r\\n    ) external view returns (uint256 _totalRevenue);\\r\\n\\r\\n    function traitMaxRevenue(\\r\\n        uint256 _tokenId\\r\\n    ) external view returns (uint256 _maxRevenue);\\r\\n\\r\\n    function traitPrice() external view returns (uint256 _price);\\r\\n}\\r\\n\",\"keccak256\":\"0x6ffdd23bfaa7ec9875aa2cb39f5ee2fa958cf34552cb75f2623bf017e7502dff\",\"license\":\"GNU GPLv3\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102c45760003560e01c8063869f759411610179578063c30f4a5a116100d6578063e985e9c51161008a578063f2fde38b11610064578063f2fde38b146107a6578063f3457fdf146107c6578063ffa1ad74146107f657600080fd5b8063e985e9c514610727578063eb54f9ec14610770578063f242432a1461078657600080fd5b8063d756985b116100bb578063d756985b146106ca578063da79dbe6146106e0578063e1fc334f1461070057600080fd5b8063c30f4a5a14610693578063d73792a9146106b357600080fd5b8063a22cb4651161012d578063ab50d2cf11610112578063ab50d2cf14610630578063bcfbb61114610650578063bd85b0391461066657600080fd5b8063a22cb465146105fb578063a713b0291461061b57600080fd5b80638ecd89551161015e5780638ecd8955146105b05780638ff168fc146105c5578063a04a6ac8146105e557600080fd5b8063869f7594146105725780638da5cb5b1461059257600080fd5b806336a9e60c1161022757806363539063116101db578063715018a6116101c0578063715018a61461052a5780637bedfac01461053f578063815d98b21461055257600080fd5b806363539063146104f35780636cb801171461050a57600080fd5b80634e1273f41161020c5780634e1273f4146104775780634f558e79146104a4578063626661fc146104d357600080fd5b806336a9e60c146104415780634b449cba1461046157600080fd5b80630bdc21cb1161027e5780631f0a595b116102635780631f0a595b146103c657806326cc133e146103e95780632eb2c2d61461042157600080fd5b80630bdc21cb146103835780630e89341c1461039957600080fd5b806301c8aa4b116102af57806301c8aa4b1461031157806301ffc9a71461033357806302afd1a11461036357600080fd5b8062a9bb01146102c9578062fdd58e146102f1575b600080fd5b3480156102d557600080fd5b506102de61083f565b6040519081526020015b60405180910390f35b3480156102fd57600080fd5b506102de61030c3660046131f4565b6108e2565b34801561031d57600080fd5b5061033161032c3660046133dd565b61098e565b005b34801561033f57600080fd5b5061035361034e366004613503565b610cc3565b60405190151581526020016102e8565b34801561036f57600080fd5b5061033161037e366004613527565b610d5e565b34801561038f57600080fd5b506102de60085481565b3480156103a557600080fd5b506103b96103b436600461357c565b610f1c565b6040516102e891906135db565b3480156103d257600080fd5b506103db610fb0565b6040516102e8929190613646565b3480156103f557600080fd5b50600554610409906001600160a01b031681565b6040516001600160a01b0390911681526020016102e8565b34801561042d57600080fd5b5061033161043c3660046136da565b611203565b34801561044d57600080fd5b506102de61045c36600461357c565b6112a5565b34801561046d57600080fd5b506102de600b5481565b34801561048357600080fd5b50610497610492366004613788565b6112d3565b6040516102e89190613890565b3480156104b057600080fd5b506103536104bf36600461357c565b600090815260036020526040902054151590565b3480156104df57600080fd5b50600654610409906001600160a01b031681565b3480156104ff57600080fd5b506102de620186a081565b34801561051657600080fd5b506103316105253660046138a3565b611411565b34801561053657600080fd5b5061033161151e565b61033161054d3660046138d5565b611532565b34801561055e57600080fd5b506102de61056d36600461357c565b611839565b34801561057e57600080fd5b506102de61058d36600461357c565b611867565b34801561059e57600080fd5b506004546001600160a01b0316610409565b3480156105bc57600080fd5b50610331611951565b3480156105d157600080fd5b50600754610409906001600160a01b031681565b3480156105f157600080fd5b506102de600d5481565b34801561060757600080fd5b50610331610616366004613966565b611a17565b34801561062757600080fd5b50610331611a22565b34801561063c57600080fd5b5061033161064b36600461399f565b611ae4565b34801561065c57600080fd5b506102de60095481565b34801561067257600080fd5b506102de61068136600461357c565b60009081526003602052604090205490565b34801561069f57600080fd5b506103316106ae3660046139bc565b611b3e565b3480156106bf57600080fd5b506102de620f424081565b3480156106d657600080fd5b506102de600c5481565b3480156106ec57600080fd5b506103316106fb36600461399f565b611b52565b34801561070c57600080fd5b50610715611b89565b6040516102e8969594939291906139f9565b34801561073357600080fd5b50610353610742366004613a7b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561077c57600080fd5b506102de600a5481565b34801561079257600080fd5b506103316107a1366004613aa9565b612151565b3480156107b257600080fd5b506103316107c136600461399f565b6121ec565b3480156107d257600080fd5b506107e66107e136600461357c565b612279565b6040516102e89493929190613b12565b34801561080257600080fd5b506103b96040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6000600a5442101561087d576040517f58fd8d1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b5442111561088e5750600d5490565b600a54600b5461089e9190613b80565b600d54600c546108ae9190613b80565b600a546108bb9042613b80565b6108c59190613b93565b6108cf9190613baa565b600c546108dc9190613b80565b90505b90565b60006001600160a01b0383166109655760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b61099661258a565b600560009054906101000a90046001600160a01b03166001600160a01b031663cf3090126040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0d9190613bcc565b15610a44576040517f0f2e5b6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b89511580610a50575086155b80610a5d575088518a5114155b80610a685750868514155b80610a735750868314155b80610a7e5750868114155b15610a9c5760405163a9854bc960e01b815260040160405180910390fd5b60005b8a51811015610b3c57600e60405180604001604052808d8481518110610ac757610ac7613be9565b602002602001015181526020018c8481518110610ae657610ae6613be9565b6020908102919091018101519091528254600181018455600093845292208151919260020201908190610b199082613c84565b5060208201516001820190610b2e9082613c84565b505050806001019050610a9f565b5060005b87811015610cb657600f6040518060a001604052808b8b85818110610b6757610b67613be9565b9050602002810190610b799190613d44565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001898985818110610bc557610bc5613be9565b9050602002810190610bd79190613d44565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001878785818110610c2357610c23613be9565b905060200201358152602001858585818110610c4157610c41613be9565b602090810292909201358352506000918101829052835460018101855593825290208151919260050201908190610c789082613c84565b5060208201516001820190610c8d9082613c84565b506040820151600282015560608201516003820155608090910151600490910155600101610b40565b5050505050505050505050565b60006001600160e01b031982167fd9b67a26000000000000000000000000000000000000000000000000000000001480610d2657506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061098857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610988565b6005546001600160a01b03163314610da2576040517f6447134900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e548114610dc45760405163a9854bc960e01b815260040160405180910390fd5b60008167ffffffffffffffff811115610ddf57610ddf613220565b604051908082528060200260200182016040528015610e08578160200160208202803683370190505b50905060005b82811015610eb25780600f858584818110610e2b57610e2b613be9565b9050602002013581548110610e4257610e42613be9565b90600052602060002090600502016002015414610e8b576040517fc886447400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001828281518110610e9f57610e9f613be9565b6020908102919091010152600101610e0e565b50610f1684600560009054906101000a90046001600160a01b03168585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250604080516020810190915290815288935091506125e49050565b50505050565b606060028054610f2b90613bff565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5790613bff565b8015610fa45780601f10610f7957610100808354040283529160200191610fa4565b820191906000526020600020905b815481529060010190602001808311610f8757829003601f168201915b50505050509050919050565b600e5460609081908067ffffffffffffffff811115610fd157610fd1613220565b60405190808252806020026020018201604052801561100457816020015b6060815260200190600190039081610fef5790505b5092508067ffffffffffffffff81111561102057611020613220565b60405190808252806020026020018201604052801561105357816020015b606081526020019060019003908161103e5790505b50915060005b818110156111fd57600e818154811061107457611074613be9565b9060005260206000209060020201600001805461109090613bff565b80601f01602080910402602001604051908101604052809291908181526020018280546110bc90613bff565b80156111095780601f106110de57610100808354040283529160200191611109565b820191906000526020600020905b8154815290600101906020018083116110ec57829003601f168201915b505050505084828151811061112057611120613be9565b6020026020010181905250600e818154811061113e5761113e613be9565b9060005260206000209060020201600101805461115a90613bff565b80601f016020809104026020016040519081016040528092919081815260200182805461118690613bff565b80156111d35780601f106111a8576101008083540402835291602001916111d3565b820191906000526020600020905b8154815290600101906020018083116111b657829003601f168201915b50505050508382815181106111ea576111ea613be9565b6020908102919091010152600101611059565b50509091565b6001600160a01b03851633148061121f575061121f8533610742565b6112915760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f766564000000000000000000000000000000000000606482015260840161095c565b61129e85858585856125e4565b5050505050565b6000600f82815481106112ba576112ba613be9565b9060005260206000209060050201600401549050919050565b6060815183511461134c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161095c565b6000835167ffffffffffffffff81111561136857611368613220565b604051908082528060200260200182016040528015611391578160200160208202803683370190505b50905060005b8451811015611409576113dc8582815181106113b5576113b5613be9565b60200260200101518583815181106113cf576113cf613be9565b60200260200101516108e2565b8282815181106113ee576113ee613be9565b602090810291909101015261140281613d8b565b9050611397565b509392505050565b61141961258a565b600560009054906101000a90046001600160a01b03166001600160a01b031663cf3090126040518163ffffffff1660e01b8152600401602060405180830381865afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190613bcc565b6114c6576040517f1834e26500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838310806114d357508181115b1561150a576040517f2156216000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a93909355600b91909155600c55600d55565b61152661258a565b6115306000612850565b565b8281146115525760405163a9854bc960e01b815260040160405180910390fd5b60008061155d61083f565b905060005b838110156116c95784848281811061157c5761157c613be9565b905060200201358361158e9190613da4565b925060008585838181106115a4576115a4613be9565b90506020020135836115b69190613b93565b600f8989858181106115ca576115ca613be9565b90506020020135815481106115e1576115e1613be9565b9060005260206000209060050201600401546115fd9190613da4565b905082600f89898581811061161457611614613be9565b905060200201358154811061162b5761162b613be9565b9060005260206000209060050201600301546116479190613da4565b811115611680576040517f52df9fe500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600f89898581811061169557611695613be9565b90506020020135815481106116ac576116ac613be9565b600091825260209091206004600590920201015550600101611562565b5060006116d68284613b93565b905080341015611712576040517f0772327b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000620f4240611725620186a034613b93565b61172f9190613baa565b905080600960008282546117439190613da4565b9091555061175390508134613b80565b600860008282546117649190613da4565b92505081905550886001600160a01b03167f5e69dace42908bf940c680c4fd1884a926e1e39b2c2a350d9a0b96eeed5d32a6898989896040516117aa9493929190613e02565b60405180910390a261182e8989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920182905250604080516020810190915290815292506128af915050565b505050505050505050565b6000600f828154811061184e5761184e613be9565b9060005260206000209060050201600301549050919050565b6000600f828154811061187c5761187c613be9565b906000526020600020906005020160040154600f83815481106118a1576118a1613be9565b9060005260206000209060050201600301541061193d57600d54600f83815481106118ce576118ce613be9565b906000526020600020906005020160040154600f84815481106118f3576118f3613be9565b90600052602060002090600502016003015461190f9190613b80565b6119199190613baa565b6000838152600360205260409020546119329190613da4565b610988906001613da4565b600082815260036020526040902054610988565b6006546001600160a01b0316331461197c57604051630a34495360e01b815260040160405180910390fd5b60095460008190036119a15760405163d55eb96360e01b815260040160405180910390fd5b60006009556040518181527f0c8d31947f98bc63af39d31a25af89c65e76f11fa8a8cd4edae335eee677b3cc9060200160405180910390a16006546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611a13573d6000803e3d6000fd5b5050565b611a13338383612aa0565b6007546001600160a01b03163314611a4d57604051630a34495360e01b815260040160405180910390fd5b6008546000819003611a725760405163d55eb96360e01b815260040160405180910390fd5b60006008556040518181527fc63609f37f0a5e3a7ed2911284184dc6ba3a4b8bb831f1e1e469e1ca5dd52ed09060200160405180910390a16007546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611a13573d6000803e3d6000fd5b6007546001600160a01b03163314611b0f57604051630a34495360e01b815260040160405180910390fd5b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611b4661258a565b611b4f81612b94565b50565b611b5a61258a565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6060806060806060806000600f8054905090508067ffffffffffffffff811115611bb557611bb5613220565b604051908082528060200260200182016040528015611bde578160200160208202803683370190505b5096508067ffffffffffffffff811115611bfa57611bfa613220565b604051908082528060200260200182016040528015611c2d57816020015b6060815260200190600190039081611c185790505b5095508067ffffffffffffffff811115611c4957611c49613220565b604051908082528060200260200182016040528015611c7c57816020015b6060815260200190600190039081611c675790505b5094508067ffffffffffffffff811115611c9857611c98613220565b604051908082528060200260200182016040528015611cc1578160200160208202803683370190505b5093508067ffffffffffffffff811115611cdd57611cdd613220565b604051908082528060200260200182016040528015611d1057816020015b6060815260200190600190039081611cfb5790505b5092508067ffffffffffffffff811115611d2c57611d2c613220565b604051908082528060200260200182016040528015611d5f57816020015b6060815260200190600190039081611d4a5790505b50915060005b818110156121475780888281518110611d8057611d80613be9565b602002602001018181525050600f8181548110611d9f57611d9f613be9565b90600052602060002090600502016000018054611dbb90613bff565b80601f0160208091040260200160405190810160405280929190818152602001828054611de790613bff565b8015611e345780601f10611e0957610100808354040283529160200191611e34565b820191906000526020600020905b815481529060010190602001808311611e1757829003601f168201915b5050505050878281518110611e4b57611e4b613be9565b6020026020010181905250600f8181548110611e6957611e69613be9565b90600052602060002090600502016001018054611e8590613bff565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb190613bff565b8015611efe5780601f10611ed357610100808354040283529160200191611efe565b820191906000526020600020905b815481529060010190602001808311611ee157829003601f168201915b5050505050868281518110611f1557611f15613be9565b6020026020010181905250600f8181548110611f3357611f33613be9565b906000526020600020906005020160020154858281518110611f5757611f57613be9565b602002602001018181525050600e600f8281548110611f7857611f78613be9565b90600052602060002090600502016002015481548110611f9a57611f9a613be9565b90600052602060002090600202016000018054611fb690613bff565b80601f0160208091040260200160405190810160405280929190818152602001828054611fe290613bff565b801561202f5780601f106120045761010080835404028352916020019161202f565b820191906000526020600020905b81548152906001019060200180831161201257829003601f168201915b505050505084828151811061204657612046613be9565b6020026020010181905250600e600f828154811061206657612066613be9565b9060005260206000209060050201600201548154811061208857612088613be9565b906000526020600020906002020160010180546120a490613bff565b80601f01602080910402602001604051908101604052809291908181526020018280546120d090613bff565b801561211d5780601f106120f25761010080835404028352916020019161211d565b820191906000526020600020905b81548152906001019060200180831161210057829003601f168201915b505050505083828151811061213457612134613be9565b6020908102919091010152600101611d65565b5050909192939495565b6001600160a01b03851633148061216d575061216d8533610742565b6121df5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f766564000000000000000000000000000000000000606482015260840161095c565b61129e8585858585612ba0565b6121f461258a565b6001600160a01b0381166122705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161095c565b611b4f81612850565b606080606080600f858154811061229257612292613be9565b906000526020600020906005020160000180546122ae90613bff565b80601f01602080910402602001604051908101604052809291908181526020018280546122da90613bff565b80156123275780601f106122fc57610100808354040283529160200191612327565b820191906000526020600020905b81548152906001019060200180831161230a57829003601f168201915b50505050509350600f858154811061234157612341613be9565b9060005260206000209060050201600101805461235d90613bff565b80601f016020809104026020016040519081016040528092919081815260200182805461238990613bff565b80156123d65780601f106123ab576101008083540402835291602001916123d6565b820191906000526020600020905b8154815290600101906020018083116123b957829003601f168201915b50505050509250600e600f86815481106123f2576123f2613be9565b9060005260206000209060050201600201548154811061241457612414613be9565b9060005260206000209060020201600001805461243090613bff565b80601f016020809104026020016040519081016040528092919081815260200182805461245c90613bff565b80156124a95780601f1061247e576101008083540402835291602001916124a9565b820191906000526020600020905b81548152906001019060200180831161248c57829003601f168201915b50505050509150600e600f86815481106124c5576124c5613be9565b906000526020600020906005020160020154815481106124e7576124e7613be9565b9060005260206000209060020201600101805461250390613bff565b80601f016020809104026020016040519081016040528092919081815260200182805461252f90613bff565b801561257c5780601f106125515761010080835404028352916020019161257c565b820191906000526020600020905b81548152906001019060200180831161255f57829003601f168201915b505050505090509193509193565b6004546001600160a01b031633146115305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161095c565b81518351146126465760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161095c565b6001600160a01b0384166126aa5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161095c565b336126b9818787878787612d4e565b60005b84518110156127e25760008582815181106126d9576126d9613be9565b6020026020010151905060008583815181106126f7576126f7613be9565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561278a5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161095c565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906127c7908490613da4565b92505081905550505050806127db90613d8b565b90506126bc565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612832929190613e29565b60405180910390a4612848818787878787612d5c565b505050505050565b600480546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03841661292b5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161095c565b815183511461298d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161095c565b3361299d81600087878787612d4e565b60005b8451811015612a38578381815181106129bb576129bb613be9565b60200260200101516000808784815181106129d8576129d8613be9565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254612a209190613da4565b90915550819050612a3081613d8b565b9150506129a0565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612a89929190613e29565b60405180910390a461129e81600087878787612d5c565b816001600160a01b0316836001600160a01b031603612b275760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161095c565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6002611a138282613c84565b6001600160a01b038416612c045760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161095c565b336000612c1085612f0a565b90506000612c1d85612f0a565b9050612c2d838989858589612d4e565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015612cb15760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161095c565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612cee908490613da4565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461182e848a8a8a8a8a612f55565b612848868686868686613051565b6001600160a01b0384163b156128485760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612da09089908990889088908890600401613e4e565b6020604051808303816000875af1925050508015612ddb575060408051601f3d908101601f19168201909252612dd891810190613eac565b60015b612e9057612de7613ec9565b806308c379a003612e205750612dfb613ee4565b80612e065750612e22565b8060405162461bcd60e51b815260040161095c91906135db565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161095c565b6001600160e01b0319811663bc197c8160e01b14612f015760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161095c565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612f4457612f44613be9565b602090810291909101015292915050565b6001600160a01b0384163b156128485760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612f999089908990889088908890600401613f6e565b6020604051808303816000875af1925050508015612fd4575060408051601f3d908101601f19168201909252612fd191810190613eac565b60015b612fe057612de7613ec9565b6001600160e01b0319811663f23a6e6160e01b14612f015760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161095c565b6001600160a01b0385166130d85760005b83518110156130d65782818151811061307d5761307d613be9565b60200260200101516003600086848151811061309b5761309b613be9565b6020026020010151815260200190815260200160002060008282546130c09190613da4565b909155506130cf905081613d8b565b9050613062565b505b6001600160a01b0384166128485760005b8351811015612f0157600084828151811061310657613106613be9565b60200260200101519050600084838151811061312457613124613be9565b60200260200101519050600060036000848152602001908152602001600020549050818110156131bc5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c79000000000000000000000000000000000000000000000000606482015260840161095c565b600092835260036020526040909220910390556131d881613d8b565b90506130e9565b6001600160a01b0381168114611b4f57600080fd5b6000806040838503121561320757600080fd5b8235613212816131df565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561325c5761325c613220565b6040525050565b600067ffffffffffffffff82111561327d5761327d613220565b5060051b60200190565b600082601f83011261329857600080fd5b813567ffffffffffffffff8111156132b2576132b2613220565b6040516132c9601f8301601f191660200182613236565b8181528460208386010111156132de57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261330c57600080fd5b8135602061331982613263565b6040516133268282613236565b83815260059390931b850182019282810191508684111561334657600080fd5b8286015b8481101561338657803567ffffffffffffffff81111561336a5760008081fd5b6133788986838b0101613287565b84525091830191830161334a565b509695505050505050565b60008083601f8401126133a357600080fd5b50813567ffffffffffffffff8111156133bb57600080fd5b6020830191508360208260051b85010111156133d657600080fd5b9250929050565b60008060008060008060008060008060c08b8d0312156133fc57600080fd5b8a3567ffffffffffffffff8082111561341457600080fd5b6134208e838f016132fb565b9b5060208d013591508082111561343657600080fd5b6134428e838f016132fb565b9a5060408d013591508082111561345857600080fd5b6134648e838f01613391565b909a50985060608d013591508082111561347d57600080fd5b6134898e838f01613391565b909850965060808d01359150808211156134a257600080fd5b6134ae8e838f01613391565b909650945060a08d01359150808211156134c757600080fd5b506134d48d828e01613391565b915080935050809150509295989b9194979a5092959850565b6001600160e01b031981168114611b4f57600080fd5b60006020828403121561351557600080fd5b8135613520816134ed565b9392505050565b60008060006040848603121561353c57600080fd5b8335613547816131df565b9250602084013567ffffffffffffffff81111561356357600080fd5b61356f86828701613391565b9497909650939450505050565b60006020828403121561358e57600080fd5b5035919050565b6000815180845260005b818110156135bb5760208185018101518683018201520161359f565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006135206020830184613595565b600082825180855260208086019550808260051b84010181860160005b8481101561363957601f19868403018952613627838351613595565b9884019892509083019060010161360b565b5090979650505050505050565b60408152600061365960408301856135ee565b828103602084015261366b81856135ee565b95945050505050565b600082601f83011261368557600080fd5b8135602061369282613263565b60405161369f8282613236565b83815260059390931b85018201928281019150868411156136bf57600080fd5b8286015b8481101561338657803583529183019183016136c3565b600080600080600060a086880312156136f257600080fd5b85356136fd816131df565b9450602086013561370d816131df565b9350604086013567ffffffffffffffff8082111561372a57600080fd5b61373689838a01613674565b9450606088013591508082111561374c57600080fd5b61375889838a01613674565b9350608088013591508082111561376e57600080fd5b5061377b88828901613287565b9150509295509295909350565b6000806040838503121561379b57600080fd5b823567ffffffffffffffff808211156137b357600080fd5b818501915085601f8301126137c757600080fd5b813560206137d482613263565b6040516137e18282613236565b83815260059390931b850182019282810191508984111561380157600080fd5b948201945b83861015613828578535613819816131df565b82529482019490820190613806565b9650508601359250508082111561383e57600080fd5b5061384b85828601613674565b9150509250929050565b600081518084526020808501945080840160005b8381101561388557815187529582019590820190600101613869565b509495945050505050565b6020815260006135206020830184613855565b600080600080608085870312156138b957600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000806000606086880312156138ed57600080fd5b85356138f8816131df565b9450602086013567ffffffffffffffff8082111561391557600080fd5b61392189838a01613391565b9096509450604088013591508082111561393a57600080fd5b5061394788828901613391565b969995985093965092949392505050565b8015158114611b4f57600080fd5b6000806040838503121561397957600080fd5b8235613984816131df565b9150602083013561399481613958565b809150509250929050565b6000602082840312156139b157600080fd5b8135613520816131df565b6000602082840312156139ce57600080fd5b813567ffffffffffffffff8111156139e557600080fd5b6139f184828501613287565b949350505050565b60c081526000613a0c60c0830189613855565b8281036020840152613a1e81896135ee565b90508281036040840152613a3281886135ee565b90508281036060840152613a468187613855565b90508281036080840152613a5a81866135ee565b905082810360a0840152613a6e81856135ee565b9998505050505050505050565b60008060408385031215613a8e57600080fd5b8235613a99816131df565b91506020830135613994816131df565b600080600080600060a08688031215613ac157600080fd5b8535613acc816131df565b94506020860135613adc816131df565b93506040860135925060608601359150608086013567ffffffffffffffff811115613b0657600080fd5b61377b88828901613287565b608081526000613b256080830187613595565b8281036020840152613b378187613595565b90508281036040840152613b4b8186613595565b90508281036060840152613b5f8185613595565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561098857610988613b6a565b808202811582820484141761098857610988613b6a565b600082613bc757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613bde57600080fd5b815161352081613958565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680613c1357607f821691505b602082108103613c3357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115613c7f57600081815260208120601f850160051c81016020861015613c605750805b601f850160051c820191505b8181101561284857828155600101613c6c565b505050565b815167ffffffffffffffff811115613c9e57613c9e613220565b613cb281613cac8454613bff565b84613c39565b602080601f831160018114613ce75760008415613ccf5750858301515b600019600386901b1c1916600185901b178555612848565b600085815260208120601f198616915b82811015613d1657888601518255948401946001909101908401613cf7565b5085821015613d345787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808335601e19843603018112613d5b57600080fd5b83018035915067ffffffffffffffff821115613d7657600080fd5b6020019150368190038213156133d657600080fd5b600060018201613d9d57613d9d613b6a565b5060010190565b8082018082111561098857610988613b6a565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613de957600080fd5b8260051b80836020870137939093016020019392505050565b604081526000613e16604083018688613db7565b8281036020840152613b5f818587613db7565b604081526000613e3c6040830185613855565b828103602084015261366b8185613855565b60006001600160a01b03808816835280871660208401525060a06040830152613e7a60a0830186613855565b8281036060840152613e8c8186613855565b90508281036080840152613ea08185613595565b98975050505050505050565b600060208284031215613ebe57600080fd5b8151613520816134ed565b600060033d11156108df5760046000803e5060005160e01c90565b600060443d1015613ef25790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613f2257505050505090565b8285019150815181811115613f3a5750505050505090565b843d8701016020828501011115613f545750505050505090565b613f6360208286010187613236565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613b5f60a083018461359556fea2646970667358221220241314b4ae18727c07689df335fe66d0e41e3de9c3bc15bb38a417d3beb9d84964736f6c63430008130033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 144,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 146,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1508,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5017,
        "contract": "contracts/Traits.sol:Traits",
        "label": "artwork",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IArtwork)6178"
      },
      {
        "astId": 5019,
        "contract": "contracts/Traits.sol:Traits",
        "label": "platformRevenueClaimer",
        "offset": 0,
        "slot": "6",
        "type": "t_address_payable"
      },
      {
        "astId": 5021,
        "contract": "contracts/Traits.sol:Traits",
        "label": "artistRevenueClaimer",
        "offset": 0,
        "slot": "7",
        "type": "t_address_payable"
      },
      {
        "astId": 5032,
        "contract": "contracts/Traits.sol:Traits",
        "label": "artistClaimableRevenues",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5034,
        "contract": "contracts/Traits.sol:Traits",
        "label": "platformClaimableRevenues",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5036,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionStartTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5038,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionEndTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5040,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionStartPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5042,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionEndPrice",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5046,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_traitTypes",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(TraitType)6189_storage)dyn_storage"
      },
      {
        "astId": 5050,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_traits",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_struct(Trait)6200_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Trait)6200_storage)dyn_storage": {
        "base": "t_struct(Trait)6200_storage",
        "encoding": "dynamic_array",
        "label": "struct ITraits.Trait[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TraitType)6189_storage)dyn_storage": {
        "base": "t_struct(TraitType)6189_storage",
        "encoding": "dynamic_array",
        "label": "struct ITraits.TraitType[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IArtwork)6178": {
        "encoding": "inplace",
        "label": "contract IArtwork",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Trait)6200_storage": {
        "encoding": "inplace",
        "label": "struct ITraits.Trait",
        "members": [
          {
            "astId": 6191,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6193,
            "contract": "contracts/Traits.sol:Traits",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6195,
            "contract": "contracts/Traits.sol:Traits",
            "label": "typeIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6197,
            "contract": "contracts/Traits.sol:Traits",
            "label": "maxRevenue",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6199,
            "contract": "contracts/Traits.sol:Traits",
            "label": "totalRevenue",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(TraitType)6189_storage": {
        "encoding": "inplace",
        "label": "struct ITraits.TraitType",
        "members": [
          {
            "astId": 6186,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6188,
            "contract": "contracts/Traits.sol:Traits",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}