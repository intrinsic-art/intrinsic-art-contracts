{
  "address": "0x9488a5C51bC1B4ddFd853b0e5c76dD0D4BcFBAF8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_royaltyFeeNumerator",
          "type": "uint96"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_artwork",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_primarySalesPayees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_primarySalesShares",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_royaltyPayees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_royaltyShares",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AuctionNotLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEthAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTraits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Locked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRevenue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyArtwork",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyClaimer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TraitsAlreadyCreated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TraitsSaleStartTime",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "traitAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "TraitsBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artwork",
      "outputs": [
        {
          "internalType": "contract IArtwork",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "buyTraits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitMaxSupplys",
          "type": "uint256[]"
        }
      ],
      "name": "createTraitsAndTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "releasable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "releasable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltySplitter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStartPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_traitsSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "scheduleAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "trait",
      "outputs": [
        {
          "internalType": "string",
          "name": "_traitName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitValue",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitTypeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_traitTypeValue",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitTypes",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTotalSupplys",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitMaxSupplys",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitsSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "transferTraitsToCreateArtwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "updateURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb13f85272c88fd01426f1b34834c76d5152bade5b0d4f3983f56a73f7677b3f6",
  "receipt": {
    "to": null,
    "from": "0xAa9D46AE079851116967c6573f961B304095C34a",
    "contractAddress": "0x9488a5C51bC1B4ddFd853b0e5c76dD0D4BcFBAF8",
    "transactionIndex": 4,
    "gasUsed": "5434165",
    "logsBloom": "0x00000000000080000000000000000000000000000000000000800000000000000000008001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000800000000000000000000000020000004000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000020020000000000000000000000000000000000000080000000000000000000000000080000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xacbb0c650cecbcc3ec009f527c6d04dca46fd80452b74230e35869a78908c120",
    "transactionHash": "0xb13f85272c88fd01426f1b34834c76d5152bade5b0d4f3983f56a73f7677b3f6",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 9524639,
        "transactionHash": "0xb13f85272c88fd01426f1b34834c76d5152bade5b0d4f3983f56a73f7677b3f6",
        "address": "0x9488a5C51bC1B4ddFd853b0e5c76dD0D4BcFBAF8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aa9d46ae079851116967c6573f961b304095c34a"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xacbb0c650cecbcc3ec009f527c6d04dca46fd80452b74230e35869a78908c120"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9524639,
        "transactionHash": "0xb13f85272c88fd01426f1b34834c76d5152bade5b0d4f3983f56a73f7677b3f6",
        "address": "0x9488a5C51bC1B4ddFd853b0e5c76dD0D4BcFBAF8",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000aa9d46ae079851116967c6573f961b304095c34a0000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 11,
        "blockHash": "0xacbb0c650cecbcc3ec009f527c6d04dca46fd80452b74230e35869a78908c120"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9524639,
        "transactionHash": "0xb13f85272c88fd01426f1b34834c76d5152bade5b0d4f3983f56a73f7677b3f6",
        "address": "0x9488a5C51bC1B4ddFd853b0e5c76dD0D4BcFBAF8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000aa9d46ae079851116967c6573f961b304095c34a",
          "0x000000000000000000000000aa9d46ae079851116967c6573f961b304095c34a"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xacbb0c650cecbcc3ec009f527c6d04dca46fd80452b74230e35869a78908c120"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9524639,
        "transactionHash": "0xb13f85272c88fd01426f1b34834c76d5152bade5b0d4f3983f56a73f7677b3f6",
        "address": "0xDDF292f98927f5B3bFD9C6DBc6396A7EF2F0A799",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000aa9d46ae079851116967c6573f961b304095c34a0000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 13,
        "blockHash": "0xacbb0c650cecbcc3ec009f527c6d04dca46fd80452b74230e35869a78908c120"
      }
    ],
    "blockNumber": 9524639,
    "cumulativeGasUsed": "6954910",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000",
    "https://api.intrinsic.art/",
    "0x6F5Be53Da5010e21ECf653c03A38D0B4a0FD5b64",
    "0xAa9D46AE079851116967c6573f961B304095C34a",
    [
      "0xAa9D46AE079851116967c6573f961B304095C34a"
    ],
    [
      "100"
    ],
    [
      "0xAa9D46AE079851116967c6573f961B304095C34a"
    ],
    [
      "100"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "bcf53e5fe0334744f9e867372ff4ca8e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_artwork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_primarySalesPayees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_primarySalesShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_royaltyPayees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_royaltyShares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctionNotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEthAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTraits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Locked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRevenue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyArtwork\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyClaimer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TraitsAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TraitsSaleStartTime\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"traitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"TraitsBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artwork\",\"outputs\":[{\"internalType\":\"contract IArtwork\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"buyTraits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitMaxSupplys\",\"type\":\"uint256[]\"}],\"name\":\"createTraitsAndTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltySplitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_traitsSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"scheduleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"trait\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_traitName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitValue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitTypeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_traitTypeValue\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitTypes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTotalSupplys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitMaxSupplys\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitsSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferTraitsToCreateArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"buyTraits(address,uint256[],uint256[])\":{\"params\":{\"_recipient\":\"the address to receive the trait tokens\",\"_traitAmounts\":\"the amounts of each token ID to buy\",\"_traitTokenIds\":\"the trait token IDs to buy\"}},\"createTraitsAndTypes(string[],string[],string[],string[],uint256[],uint256[])\":{\"params\":{\"_traitMaxSupplys\":\"maximum number of mints for each trait\",\"_traitNames\":\"human readable trait names\",\"_traitTypeIndexes\":\"trait type indexes each trait belongs to\",\"_traitTypeNames\":\"human readable trait type names\",\"_traitTypeValues\":\"trait type values used in the generative scripts\",\"_traitValues\":\"trait values used in the generative scripts\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"maxSupply(uint256)\":{\"returns\":{\"_maxSupply\":\"the max supply of the token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"releasable(address)\":{\"details\":\"Getter for the amount of payee's releasable Ether.\"},\"releasable(address,address)\":{\"details\":\"Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an IERC20 contract.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"scheduleAuction(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_auctionEndPrice\":\"trait price the auction ends at\",\"_auctionEndTime\":\"timestamp the auction ends at\",\"_auctionStartPrice\":\"trait price the auction begins at\",\"_auctionStartTime\":\"timestamp the auction begins at\",\"_traitsSaleStartTime\":\"timestamp at which traits can be bought individually\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"the interface ID to check\"},\"returns\":{\"_0\":\"bool True if the interface is supported, otherwise False\"}},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"trait(uint256)\":{\"params\":{\"_tokenId\":\"token ID to get info about\"},\"returns\":{\"_traitName\":\"human readable trait name\",\"_traitTypeName\":\"human readable trait type name\",\"_traitTypeValue\":\"trait type value used in the generative script\",\"_traitValue\":\"trait type value used in the generative script\"}},\"traitPrice()\":{\"returns\":{\"_price\":\"the current trait price in ether\"}},\"traitTypes()\":{\"returns\":{\"_traitTypeNames\":\"human readable trait type names\",\"_traitTypeValues\":\"trait type values used in the generative script\"}},\"traits()\":{\"returns\":{\"_traitMaxSupplys\":\"max supply of each trait\",\"_traitNames\":\"human readable trait names\",\"_traitTokenIds\":\"token IDs of the traits\",\"_traitTotalSupplys\":\"total supply of each trait\",\"_traitTypeIndexes\":\"trait type index each trait belongs to\",\"_traitTypeNames\":\"human readable trait type names\",\"_traitTypeValues\":\"trait type values used in the generative script\",\"_traitValues\":\"trait type values used in the generative script\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferTraitsToCreateArtwork(address,uint256[])\":{\"params\":{\"_caller\":\"the address creating the artwork\",\"_traitTokenIds\":\"the trait token IDs used to create the artwork\"}},\"updateURI(string)\":{\"params\":{\"_uri\":\"the new base URI string\"}},\"uri(uint256)\":{\"params\":{\"_tokenId\":\"the token ID to get the URI for\"},\"returns\":{\"_0\":\"string the token specific URI\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyTraits(address,uint256[],uint256[])\":{\"notice\":\"Allows a user to buy any number of traits and amounts using ether\"},\"createTraitsAndTypes(string[],string[],string[],string[],uint256[],uint256[])\":{\"notice\":\"Sets up the traits and trait types\"},\"maxSupply(uint256)\":{\"notice\":\"Returns the max supply of the specified token ID\"},\"scheduleAuction(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Schedules the dutch auction start and end time, and the prices the traits will start and end the auction at\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether the specified interface ID is supported by the contract\"},\"trait(uint256)\":{\"notice\":\"Returns info about an individual trait\"},\"traitPrice()\":{\"notice\":\"Returns the current trait price\"},\"traitTypes()\":{\"notice\":\"Returns the trait types\"},\"traits()\":{\"notice\":\"Returns info about all traits\"},\"transferTraitsToCreateArtwork(address,uint256[])\":{\"notice\":\"Called by the Artwork contract to transfer traits from the caller to the Artwork contract to create a new Artwork token\"},\"updateURI(string)\":{\"notice\":\"Updates the base URI string used to get full token URIs\"},\"uri(uint256)\":{\"notice\":\"Returns the URI of the specified token ID\"}},\"notice\":\"Implements ERC-1155 standard for trait tokens, and provides Dutch Auction functionality for initial trait sales\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Traits.sol\":\"Traits\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/finance/PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\\n * time of contract deployment and can't be updated thereafter.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable Ether.\\n     */\\n    function releasable(address account) public view returns (uint256) {\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        return _pendingPayment(account, totalReceived, released(account));\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(IERC20 token, address account) public view returns (uint256) {\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        return _pendingPayment(account, totalReceived, released(token, account));\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _totalReleased is the sum of all values in _released.\\n        // If \\\"_totalReleased += payment\\\" does not overflow, then \\\"_released[account] += payment\\\" cannot overflow.\\n        _totalReleased += payment;\\n        unchecked {\\n            _released[account] += payment;\\n        }\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(token, account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\\n        // If \\\"_erc20TotalReleased[token] += payment\\\" does not overflow, then \\\"_erc20Released[token][account] += payment\\\"\\n        // cannot overflow.\\n        _erc20TotalReleased[token] += payment;\\n        unchecked {\\n            _erc20Released[token][account] += payment;\\n        }\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\",\"keccak256\":\"0xba00a079c0def02f9e905ed091f01bcf9caa41ec215862a315e9f3838be61cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\r\\npragma solidity =0.8.19;\\r\\n\\r\\nimport {ITraits} from \\\"./interfaces/ITraits.sol\\\";\\r\\nimport {IArtwork} from \\\"./interfaces/IArtwork.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {ERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\nimport {ERC1155, IERC165} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport {PaymentSplitter} from \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\r\\nimport {ERC1155Supply} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\r\\n\\r\\n/**\\r\\n * Implements ERC-1155 standard for trait tokens,\\r\\n * and provides Dutch Auction functionality for initial trait sales\\r\\n */\\r\\ncontract Traits is\\r\\n    ITraits,\\r\\n    ERC2981,\\r\\n    ERC1155,\\r\\n    ERC1155Supply,\\r\\n    Ownable,\\r\\n    PaymentSplitter\\r\\n{\\r\\n    using Strings for uint256;\\r\\n    using Strings for address;\\r\\n\\r\\n    IArtwork public artwork;\\r\\n    address public royaltySplitter;\\r\\n    string public constant VERSION = \\\"1.0.0\\\";\\r\\n    uint256 public auctionStartTime;\\r\\n    uint256 public auctionEndTime;\\r\\n    uint256 public auctionStartPrice;\\r\\n    uint256 public auctionEndPrice;\\r\\n    uint256 public traitsSaleStartTime;\\r\\n    TraitType[] private _traitTypes;\\r\\n    Trait[] private _traits;\\r\\n\\r\\n    constructor(\\r\\n        uint96 _royaltyFeeNumerator,\\r\\n        string memory _uri,\\r\\n        address _artwork,\\r\\n        address _owner,\\r\\n        address[] memory _primarySalesPayees,\\r\\n        uint256[] memory _primarySalesShares,\\r\\n        address[] memory _royaltyPayees,\\r\\n        uint256[] memory _royaltyShares\\r\\n    ) ERC1155(_uri) PaymentSplitter(_primarySalesPayees, _primarySalesShares) {\\r\\n        artwork = IArtwork(_artwork);\\r\\n        _transferOwnership(_owner);\\r\\n        address _royaltySplitter = address(\\r\\n            new PaymentSplitter(_royaltyPayees, _royaltyShares)\\r\\n        );\\r\\n        _setDefaultRoyalty(_royaltySplitter, _royaltyFeeNumerator);\\r\\n        royaltySplitter = _royaltySplitter;\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function createTraitsAndTypes(\\r\\n        string[] memory _traitTypeNames,\\r\\n        string[] memory _traitTypeValues,\\r\\n        string[] calldata _traitNames,\\r\\n        string[] calldata _traitValues,\\r\\n        uint256[] calldata _traitTypeIndexes,\\r\\n        uint256[] calldata _traitMaxSupplys\\r\\n    ) external onlyOwner {\\r\\n        if (artwork.locked()) revert Locked();\\r\\n        if (_traits.length != 0 || _traitTypes.length != 0)\\r\\n            revert TraitsAlreadyCreated();\\r\\n        if (\\r\\n            _traitTypeNames.length == 0 ||\\r\\n            _traitNames.length == 0 ||\\r\\n            _traitTypeNames.length != _traitTypeValues.length ||\\r\\n            _traitNames.length != _traitValues.length ||\\r\\n            _traitNames.length != _traitTypeIndexes.length ||\\r\\n            _traitNames.length != _traitMaxSupplys.length\\r\\n        ) revert InvalidArrayLengths();\\r\\n\\r\\n        // Push trait types to array\\r\\n        for (uint256 i; i < _traitTypeNames.length; ) {\\r\\n            _traitTypes.push(\\r\\n                TraitType({\\r\\n                    name: _traitTypeNames[i],\\r\\n                    value: _traitTypeValues[i]\\r\\n                })\\r\\n            );\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Push traits to array\\r\\n        for (uint256 i; i < _traitNames.length; ) {\\r\\n            _traits.push(\\r\\n                Trait({\\r\\n                    name: _traitNames[i],\\r\\n                    value: _traitValues[i],\\r\\n                    typeIndex: _traitTypeIndexes[i],\\r\\n                    maxSupply: _traitMaxSupplys[i]\\r\\n                })\\r\\n            );\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function scheduleAuction(\\r\\n        uint256 _auctionStartTime,\\r\\n        uint256 _auctionEndTime,\\r\\n        uint256 _auctionStartPrice,\\r\\n        uint256 _auctionEndPrice,\\r\\n        uint256 _traitsSaleStartTime\\r\\n    ) external onlyOwner {\\r\\n        if (!artwork.locked()) revert NotLocked();\\r\\n        if (\\r\\n            _auctionEndTime < _auctionStartTime ||\\r\\n            _auctionEndPrice > _auctionStartPrice ||\\r\\n            _traitsSaleStartTime < _auctionStartTime\\r\\n        ) revert InvalidAuction();\\r\\n\\r\\n        auctionStartTime = _auctionStartTime;\\r\\n        auctionEndTime = _auctionEndTime;\\r\\n        auctionStartPrice = _auctionStartPrice;\\r\\n        auctionEndPrice = _auctionEndPrice;\\r\\n        traitsSaleStartTime = _traitsSaleStartTime;\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function updateURI(string memory _uri) external onlyOwner {\\r\\n        _setURI(_uri);\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function buyTraits(\\r\\n        address _recipient,\\r\\n        uint256[] calldata _traitTokenIds,\\r\\n        uint256[] calldata _traitAmounts\\r\\n    ) external payable {\\r\\n        if (_traitTokenIds.length != _traitAmounts.length)\\r\\n            revert InvalidArrayLengths();\\r\\n        if (msg.sender != address(artwork) && block.timestamp < traitsSaleStartTime)\\r\\n            revert TraitsSaleStartTime();\\r\\n\\r\\n        uint256 _traitCount;\\r\\n        uint256 _traitPrice = traitPrice();\\r\\n\\r\\n        for (uint256 i; i < _traitAmounts.length; ) {\\r\\n            _traitCount += _traitAmounts[i];\\r\\n            if (\\r\\n                totalSupply(_traitTokenIds[i]) + _traitAmounts[i] >\\r\\n                _traits[_traitTokenIds[i]].maxSupply\\r\\n            ) revert MaxSupply();\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (msg.value < _traitCount * _traitPrice) revert InvalidEthAmount();\\r\\n\\r\\n        _mintBatch(_recipient, _traitTokenIds, _traitAmounts, \\\"\\\");\\r\\n\\r\\n        emit TraitsBought(_recipient, _traitTokenIds, _traitAmounts);\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function transferTraitsToCreateArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external {\\r\\n        if (msg.sender != address(artwork)) revert OnlyArtwork();\\r\\n        if (_traitTokenIds.length != _traitTypes.length)\\r\\n            revert InvalidArrayLengths();\\r\\n\\r\\n        uint256[] memory amounts = new uint256[](_traitTokenIds.length);\\r\\n\\r\\n        for (uint256 i; i < _traitTokenIds.length; ) {\\r\\n            if (_traits[_traitTokenIds[i]].typeIndex != i)\\r\\n                revert InvalidTraits();\\r\\n            amounts[i] = 1;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _safeBatchTransferFrom(\\r\\n            _caller,\\r\\n            address(artwork),\\r\\n            _traitTokenIds,\\r\\n            amounts,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function traitTypes()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        )\\r\\n    {\\r\\n        uint256 traitTypeCount = _traitTypes.length;\\r\\n        _traitTypeNames = new string[](traitTypeCount);\\r\\n        _traitTypeValues = new string[](traitTypeCount);\\r\\n\\r\\n        for (uint256 i; i < traitTypeCount; ) {\\r\\n            _traitTypeNames[i] = _traitTypes[i].name;\\r\\n            _traitTypeValues[i] = _traitTypes[i].value;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function trait(\\r\\n        uint256 _tokenId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory _traitName,\\r\\n            string memory _traitValue,\\r\\n            string memory _traitTypeName,\\r\\n            string memory _traitTypeValue\\r\\n        )\\r\\n    {\\r\\n        if (_tokenId >= _traits.length) revert InvalidTokenId();\\r\\n\\r\\n        _traitName = _traits[_tokenId].name;\\r\\n        _traitValue = _traits[_tokenId].value;\\r\\n        _traitTypeName = _traitTypes[_traits[_tokenId].typeIndex].name;\\r\\n        _traitTypeValue = _traitTypes[_traits[_tokenId].typeIndex].value;\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function traits()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            uint256[] memory _traitTypeIndexes,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues,\\r\\n            uint256[] memory _traitTotalSupplys,\\r\\n            uint256[] memory _traitMaxSupplys\\r\\n        )\\r\\n    {\\r\\n        uint256 traitCount = _traits.length;\\r\\n        _traitTokenIds = new uint256[](traitCount);\\r\\n        _traitNames = new string[](traitCount);\\r\\n        _traitValues = new string[](traitCount);\\r\\n        _traitTypeIndexes = new uint256[](traitCount);\\r\\n        _traitTypeNames = new string[](traitCount);\\r\\n        _traitTypeValues = new string[](traitCount);\\r\\n        _traitTotalSupplys = new uint256[](traitCount);\\r\\n        _traitMaxSupplys = new uint256[](traitCount);\\r\\n        for (uint256 i; i < traitCount; ) {\\r\\n            _traitTokenIds[i] = i;\\r\\n            _traitNames[i] = _traits[i].name;\\r\\n            _traitValues[i] = _traits[i].value;\\r\\n            _traitTypeIndexes[i] = _traits[i].typeIndex;\\r\\n            _traitTypeNames[i] = _traitTypes[_traits[i].typeIndex].name;\\r\\n            _traitTypeValues[i] = _traitTypes[_traits[i].typeIndex].value;\\r\\n            _traitTotalSupplys[i] = totalSupply(i);\\r\\n            _traitMaxSupplys[i] = _traits[i].maxSupply;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function traitPrice() public view returns (uint256 _price) {\\r\\n        if (block.timestamp < auctionStartTime) revert AuctionNotLive();\\r\\n        if (block.timestamp > auctionEndTime) {\\r\\n            // Auction has ended\\r\\n            _price = auctionEndPrice;\\r\\n        } else {\\r\\n            // Auction is active\\r\\n            _price =\\r\\n                auctionStartPrice -\\r\\n                (\\r\\n                    (((block.timestamp - auctionStartTime) *\\r\\n                        (auctionStartPrice - auctionEndPrice)) /\\r\\n                        (auctionEndTime - auctionStartTime))\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ERC1155*/\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal override(ERC1155, ERC1155Supply) {\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function maxSupply(\\r\\n        uint256 _tokenId\\r\\n    ) external view returns (uint256 _maxSupply) {\\r\\n        _maxSupply = _traits[_tokenId].maxSupply;\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function uri(\\r\\n        uint256 _tokenId\\r\\n    ) public view override(ERC1155, ITraits) returns (string memory) {\\r\\n        if (_tokenId >= _traits.length) revert InvalidTokenId();\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    super.uri(_tokenId),\\r\\n                    address(this).toHexString(),\\r\\n                    \\\"/\\\",\\r\\n                    _tokenId.toString()\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /** @inheritdoc ITraits*/\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view override(ITraits, ERC1155, ERC2981) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(ITraits).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x344f7740ee11f6e77d595dfd404c8dcf1d1de1346acdd13ac899706ff56f2603\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/IArtwork.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\r\\npragma solidity =0.8.19;\\r\\n\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IArtwork is IERC721 {\\r\\n    struct ArtworkData {\\r\\n        bytes32 hash;\\r\\n        uint256[] traitTokenIds;\\r\\n    }\\r\\n\\r\\n    error TraitsAlreadySet();\\r\\n    error TraitsNotSet();\\r\\n    error Locked();\\r\\n    error OnlyArtist();\\r\\n    error OnlyArtworkOwner();\\r\\n\\r\\n    event BaseURIUpdated(string baseURI);\\r\\n    event ArtworkCreated(\\r\\n        uint256 indexed artworkTokenId,\\r\\n        uint256[] traitTokenIds,\\r\\n        bytes32 hash,\\r\\n        address indexed creator\\r\\n    );\\r\\n    event TraitsReclaimed(\\r\\n        uint256 indexed artworkTokenId,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * Sets the address of the Traits contract\\r\\n     *\\r\\n     * @param _traits address of the traits contract\\r\\n     */\\r\\n    function setTraits(address _traits) external;\\r\\n\\r\\n    /**\\r\\n     * Updates the script at the specified index in the scripts array\\r\\n     *\\r\\n     * @param _scriptIndex index of the script to update\\r\\n     * @param _script updated generative script\\r\\n     */\\r\\n    function updateScript(\\r\\n        uint256 _scriptIndex,\\r\\n        string calldata _script\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * Updates the URI base string\\r\\n     *\\r\\n     * @param _baseURI the updated base URI string\\r\\n     */\\r\\n    function updateBaseURI(string memory _baseURI) external;\\r\\n\\r\\n    /**\\r\\n     * Locks the project so that project configuration is immutable\\r\\n     * before the trait auction begins\\r\\n     */\\r\\n    function lockProject() external;\\r\\n\\r\\n    /**\\r\\n     * Creates a new artwork with the specified trait token IDs\\r\\n     * The caller must own the specified traits\\r\\n     *\\r\\n     * @param _traitTokenIds the trait token IDs to create the artwork with\\r\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\r\\n     * @return _artworkTokenId the token ID of the newly minted artwork\\r\\n     */\\r\\n    function createArtwork(\\r\\n        uint256[] calldata _traitTokenIds,\\r\\n        uint256 _saltNonce\\r\\n    ) external returns (uint256 _artworkTokenId);\\r\\n\\r\\n    /**\\r\\n     * Reclaims the traits the specified artwork token into the traits its composed of\\r\\n     * The artwork token is burned, and the token ID will never be reused\\r\\n     * The traits are transferred to the caller's address\\r\\n     *\\r\\n     * @param _artworkTokenId the token ID of the artwork being reclaimed\\r\\n     */\\r\\n    function reclaimTraits(uint256 _artworkTokenId) external;\\r\\n\\r\\n    /**\\r\\n     * Buys traits with specified amounts, and create an artwork in a single transaction\\r\\n     *\\r\\n     * @param _traitTokenIdsToBuy token IDs of the traits to buy\\r\\n     * @param _traitAmountsToBuy amounts of each trait to buy\\r\\n     * @param _traitTokenIdsToCreateArtwork token IDs of the traits to use to create the artwork\\r\\n     * @param _saltNonce salt number that is used to generate the artwork hash\\r\\n     */\\r\\n    function buyTraitsCreateArtwork(\\r\\n        uint256[] calldata _traitTokenIdsToBuy,\\r\\n        uint256[] calldata _traitAmountsToBuy,\\r\\n        uint256[] calldata _traitTokenIdsToCreateArtwork,\\r\\n        uint256 _saltNonce\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * Returns the URI of the specified token ID\\r\\n     *\\r\\n     * @param _tokenId token ID to get URI for\\r\\n     * @return string the token URI\\r\\n     */\\r\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * Returns info about the specified artwork token\\r\\n     *\\r\\n     * @param _artworkTokenId token ID of the artwork\\r\\n     * @return _traitTokenIds the token IDs of the traits the artwork contains\\r\\n     * @return _traitNames the human readable trait names contained in the artwork\\r\\n     * @return _traitValues the trait values used by the generative script\\r\\n     * @return _traitTypeNames the human readable trait type names\\r\\n     * @return _traitTypeValues the trait type values used by the generative script\\r\\n     * @return _hash the artwork hash\\r\\n     */\\r\\n    function artwork(\\r\\n        uint256 _artworkTokenId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues,\\r\\n            bytes32 _hash\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * Returns an array of strings to be concatenated together to form the generative script\\r\\n     *\\r\\n     * @return _scripts the array of script strings\\r\\n     */\\r\\n    function projectScripts() external view returns (string[] memory _scripts);\\r\\n\\r\\n    /**\\r\\n     * Returns the number of strings contained in the script array\\r\\n     *\\r\\n     * @return uint256 the number of script strings\\r\\n     */\\r\\n    function projectScriptCount() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * Returns the specified user's nonce, which is used to generate artwork hashes\\r\\n     *\\r\\n     * @param _user the address of the user\\r\\n     * @return uint256 the user's nonce\\r\\n     */\\r\\n    function userNonce(address _user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * Returns whether the project has been locked\\r\\n     *\\r\\n     * @return bool True if the project is locked, otherwise False\\r\\n     */\\r\\n    function locked() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * Returns whether the specified interface ID is supported by the contract\\r\\n     *\\r\\n     * @param interfaceId the interface ID to check\\r\\n     * @return bool True if the interface is supported, otherwise False\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x57d6fafe162b83fee6bf22c0776f36913ce0453b377da2b18411fa7916fd19b6\",\"license\":\"GNU GPLv3\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\r\\npragma solidity =0.8.19;\\r\\n\\r\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\ninterface ITraits is IERC1155 {\\r\\n    struct TraitType {\\r\\n        string name;\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    struct Trait {\\r\\n        string name;\\r\\n        string value;\\r\\n        uint256 typeIndex;\\r\\n        uint256 maxSupply;\\r\\n    }\\r\\n\\r\\n    event TraitsBought(\\r\\n        address indexed recipient,\\r\\n        uint256[] traitTokenIds,\\r\\n        uint256[] traitAmounts\\r\\n    );\\r\\n\\r\\n    error OnlyArtwork();\\r\\n    error Locked();\\r\\n    error InvalidArrayLengths();\\r\\n    error NotLocked();\\r\\n    error InvalidAuction();\\r\\n    error OnlyClaimer();\\r\\n    error MaxSupply();\\r\\n    error InvalidEthAmount();\\r\\n    error InvalidTraits();\\r\\n    error NoRevenue();\\r\\n    error AuctionNotLive();\\r\\n    error TraitsAlreadyCreated();\\r\\n    error InvalidTokenId();\\r\\n    error TraitsSaleStartTime();\\r\\n\\r\\n    /**\\r\\n     * Sets up the traits and trait types\\r\\n     *\\r\\n     * @param _traitTypeNames human readable trait type names\\r\\n     * @param _traitTypeValues trait type values used in the generative scripts\\r\\n     * @param _traitNames human readable trait names\\r\\n     * @param _traitValues trait values used in the generative scripts\\r\\n     * @param _traitTypeIndexes trait type indexes each trait belongs to\\r\\n     * @param _traitMaxSupplys maximum number of mints for each trait\\r\\n     */\\r\\n    function createTraitsAndTypes(\\r\\n        string[] memory _traitTypeNames,\\r\\n        string[] memory _traitTypeValues,\\r\\n        string[] calldata _traitNames,\\r\\n        string[] calldata _traitValues,\\r\\n        uint256[] calldata _traitTypeIndexes,\\r\\n        uint256[] calldata _traitMaxSupplys\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * Schedules the dutch auction start and end time, and the prices\\r\\n     * the traits will start and end the auction at\\r\\n     *\\r\\n     * @param _auctionStartTime timestamp the auction begins at\\r\\n     * @param _auctionEndTime timestamp the auction ends at\\r\\n     * @param _auctionStartPrice trait price the auction begins at\\r\\n     * @param _auctionEndPrice trait price the auction ends at\\r\\n     * @param _traitsSaleStartTime timestamp at which traits can be bought individually\\r\\n     */\\r\\n    function scheduleAuction(\\r\\n        uint256 _auctionStartTime,\\r\\n        uint256 _auctionEndTime,\\r\\n        uint256 _auctionStartPrice,\\r\\n        uint256 _auctionEndPrice,\\r\\n        uint256 _traitsSaleStartTime\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * Updates the base URI string used to get full token URIs\\r\\n     *\\r\\n     * @param _uri the new base URI string\\r\\n     */\\r\\n    function updateURI(string memory _uri) external;\\r\\n\\r\\n    /**\\r\\n     * Allows a user to buy any number of traits and amounts using ether\\r\\n     *\\r\\n     * @param _recipient the address to receive the trait tokens\\r\\n     * @param _traitTokenIds the trait token IDs to buy\\r\\n     * @param _traitAmounts the amounts of each token ID to buy\\r\\n     */\\r\\n    function buyTraits(\\r\\n        address _recipient,\\r\\n        uint256[] calldata _traitTokenIds,\\r\\n        uint256[] calldata _traitAmounts\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * Called by the Artwork contract to transfer traits from the caller to the Artwork\\r\\n     * contract to create a new Artwork token\\r\\n     *\\r\\n     * @param _caller the address creating the artwork\\r\\n     * @param _traitTokenIds the trait token IDs used to create the artwork\\r\\n     */\\r\\n    function transferTraitsToCreateArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * Returns the trait types\\r\\n     *\\r\\n     * @return _traitTypeNames human readable trait type names\\r\\n     * @return _traitTypeValues trait type values used in the generative script\\r\\n     */\\r\\n    function traitTypes()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * Returns info about an individual trait\\r\\n     *\\r\\n     * @param _tokenId token ID to get info about\\r\\n     * @return _traitName human readable trait name\\r\\n     * @return _traitValue trait type value used in the generative script\\r\\n     * @return _traitTypeName human readable trait type name\\r\\n     * @return _traitTypeValue trait type value used in the generative script\\r\\n     */\\r\\n    function trait(\\r\\n        uint256 _tokenId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory _traitName,\\r\\n            string memory _traitValue,\\r\\n            string memory _traitTypeName,\\r\\n            string memory _traitTypeValue\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * Returns info about all traits\\r\\n     *\\r\\n     * @return _traitTokenIds token IDs of the traits\\r\\n     * @return _traitNames human readable trait names\\r\\n     * @return _traitValues trait type values used in the generative script\\r\\n     * @return _traitTypeIndexes trait type index each trait belongs to\\r\\n     * @return _traitTypeNames human readable trait type names\\r\\n     * @return _traitTypeValues trait type values used in the generative script\\r\\n     * @return _traitTotalSupplys total supply of each trait\\r\\n     * @return _traitMaxSupplys max supply of each trait\\r\\n     */\\r\\n    function traits()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            uint256[] memory _traitTypeIndexes,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues,\\r\\n            uint256[] memory _traitTotalSupplys,\\r\\n            uint256[] memory _traitMaxSupplys\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * Returns the current trait price\\r\\n     *\\r\\n     * @return _price the current trait price in ether\\r\\n     */\\r\\n    function traitPrice() external view returns (uint256 _price);\\r\\n\\r\\n    /**\\r\\n     * Returns the max supply of the specified token ID\\r\\n     *\\r\\n     * @return _maxSupply the max supply of the token\\r\\n     */\\r\\n    function maxSupply(\\r\\n        uint256 _tokenId\\r\\n    ) external view returns (uint256 _maxSupply);\\r\\n\\r\\n    /**\\r\\n     * Returns the URI of the specified token ID\\r\\n     *\\r\\n     * @param _tokenId the token ID to get the URI for\\r\\n     * @return string the token specific URI\\r\\n     */\\r\\n    function uri(uint256 _tokenId) external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * Returns whether the specified interface ID is supported by the contract\\r\\n     *\\r\\n     * @param interfaceId the interface ID to check\\r\\n     * @return bool True if the interface is supported, otherwise False\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x868e15d152c1f95271f71205774c256ac0cc53e90995e9f8150141ec8b9ab913\",\"license\":\"GNU GPLv3\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162006ac538038062006ac5833981016040819052620000349162000792565b838388620000428162000222565b506200004e3362000234565b8051825114620000c05760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084015b60405180910390fd5b6000825111620001135760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f207061796565730000000000006044820152606401620000b7565b60005b82518110156200017f576200016a838281518110620001395762000139620008ac565b6020026020010151838381518110620001565762000156620008ac565b60200260200101516200028660201b60201c565b806200017681620008d8565b91505062000116565b5050600e80546001600160a01b0319166001600160a01b03891617905550620001a88562000234565b60008282604051620001ba9062000575565b620001c7929190620008f4565b604051809103906000f080158015620001e4573d6000803e3d6000fd5b509050620001f3818a62000474565b600f80546001600160a01b0319166001600160a01b03929092169190911790555062000af39650505050505050565b600462000230828262000a0b565b5050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216620002f35760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401620000b7565b60008111620003455760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a207368617265732061726520300000006044820152606401620000b7565b6001600160a01b03821660009081526009602052604090205415620003c15760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b6064820152608401620000b7565b600b8054600181019091557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b03841690811790915560009081526009602052604090208190556007546200042b90829062000ad7565b600755604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b6127106001600160601b0382161115620004e45760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401620000b7565b6001600160a01b0382166200053c5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401620000b7565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b611281806200584483390190565b80516001600160601b03811681146200059b57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620005e157620005e1620005a0565b604052919050565b600082601f830112620005fb57600080fd5b81516001600160401b03811115620006175762000617620005a0565b60206200062d601f8301601f19168201620005b6565b82815285828487010111156200064257600080fd5b60005b838110156200066257858101830151828201840152820162000645565b506000928101909101919091529392505050565b80516001600160a01b03811681146200059b57600080fd5b60006001600160401b03821115620006aa57620006aa620005a0565b5060051b60200190565b600082601f830112620006c657600080fd5b81516020620006df620006d9836200068e565b620005b6565b82815260059290921b84018101918181019086841115620006ff57600080fd5b8286015b848110156200072557620007178162000676565b835291830191830162000703565b509695505050505050565b600082601f8301126200074257600080fd5b8151602062000755620006d9836200068e565b82815260059290921b840181019181810190868411156200077557600080fd5b8286015b8481101562000725578051835291830191830162000779565b600080600080600080600080610100898b031215620007b057600080fd5b620007bb8962000583565b60208a01519098506001600160401b0380821115620007d957600080fd5b620007e78c838d01620005e9565b9850620007f760408c0162000676565b97506200080760608c0162000676565b965060808b01519150808211156200081e57600080fd5b6200082c8c838d01620006b4565b955060a08b01519150808211156200084357600080fd5b620008518c838d0162000730565b945060c08b01519150808211156200086857600080fd5b620008768c838d01620006b4565b935060e08b01519150808211156200088d57600080fd5b506200089c8b828c0162000730565b9150509295985092959890939650565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620008ed57620008ed620008c2565b5060010190565b604080825283519082018190526000906020906060840190828701845b82811015620009385781516001600160a01b03168452928401929084019060010162000911565b5050508381038285015284518082528583019183019060005b818110156200096f5783518352928401929184019160010162000951565b5090979650505050505050565b600181811c908216806200099157607f821691505b602082108103620009b257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000a0657600081815260208120601f850160051c81016020861015620009e15750805b601f850160051c820191505b8181101562000a0257828155600101620009ed565b5050505b505050565b81516001600160401b0381111562000a275762000a27620005a0565b62000a3f8162000a3884546200097c565b84620009b8565b602080601f83116001811462000a77576000841562000a5e5750858301515b600019600386901b1c1916600185901b17855562000a02565b600085815260208120601f198616915b8281101562000aa85788860151825594840194600190910190840162000a87565b508582101562000ac75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111562000aed5762000aed620008c2565b92915050565b614d418062000b036000396000f3fe6080604052600436106102de5760003560e01c806388392b5d11610184578063d756985b116100d6578063eb54f9ec1161008a578063f3457fdf11610064578063f3457fdf146108ee578063f8acb75d1461091e578063ffa1ad741461093e57600080fd5b8063eb54f9ec14610898578063f242432a146108ae578063f2fde38b146108ce57600080fd5b8063e1fc334f116100bb578063e1fc334f14610811578063e33b7de31461083a578063e985e9c51461084f57600080fd5b8063d756985b146107c5578063d79779b2146107db57600080fd5b8063a22cb46511610138578063c30f4a5a11610112578063c30f4a5a1461074f578063c45ac0501461076f578063ce7c2ac21461078f57600080fd5b8063a22cb465146106e2578063a3f8eace14610702578063bd85b0391461072257600080fd5b80638da5cb5b116101695780638da5cb5b146106785780639852595c14610696578063a04a6ac8146106cc57600080fd5b806388392b5d146106425780638b83209b1461065857600080fd5b80632eb2c2d61161023d5780634b449cba116101f1578063715018a6116101cb578063715018a6146105fa5780637bedfac01461060f578063869f75941461062257600080fd5b80634b449cba146105885780634e1273f41461059e5780634f558e79146105cb57600080fd5b8063406072a911610222578063406072a914610502578063411d8f2f1461054857806348b750441461056857600080fd5b80632eb2c2d6146104cd5780633a98ef39146104ed57600080fd5b80630e89341c116102945780631f0a595b116102795780631f0a595b1461043357806326cc133e146104565780632a55205a1461048e57600080fd5b80630e89341c146103e6578063191655871461041357600080fd5b806301c8aa4b116102c557806301c8aa4b1461037457806301ffc9a71461039657806302afd1a1146103c657600080fd5b8062a9bb011461032c578062fdd58e1461035457600080fd5b36610327577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561033857600080fd5b50610341610987565b6040519081526020015b60405180910390f35b34801561036057600080fd5b5061034161036f366004613e65565b610a2a565b34801561038057600080fd5b5061039461038f366004614047565b610ad8565b005b3480156103a257600080fd5b506103b66103b136600461416d565b610e46565b604051901515815260200161034b565b3480156103d257600080fd5b506103946103e136600461418a565b610e84565b3480156103f257600080fd5b506104066104013660046141df565b611042565b60405161034b9190614248565b34801561041f57600080fd5b5061039461042e36600461425b565b6110aa565b34801561043f57600080fd5b50610448611214565b60405161034b9291906142d0565b34801561046257600080fd5b50600e54610476906001600160a01b031681565b6040516001600160a01b03909116815260200161034b565b34801561049a57600080fd5b506104ae6104a93660046142fe565b611467565b604080516001600160a01b03909316835260208301919091520161034b565b3480156104d957600080fd5b506103946104e8366004614386565b611524565b3480156104f957600080fd5b50600754610341565b34801561050e57600080fd5b5061034161051d366004614434565b6001600160a01b039182166000908152600d6020908152604080832093909416825291909152205490565b34801561055457600080fd5b50600f54610476906001600160a01b031681565b34801561057457600080fd5b50610394610583366004614434565b6115c6565b34801561059457600080fd5b5061034160115481565b3480156105aa57600080fd5b506105be6105b936600461446d565b61175a565b60405161034b9190614575565b3480156105d757600080fd5b506103b66105e63660046141df565b600090815260056020526040902054151590565b34801561060657600080fd5b50610394611898565b61039461061d366004614588565b6118ac565b34801561062e57600080fd5b5061034161063d3660046141df565b611b3b565b34801561064e57600080fd5b5061034160145481565b34801561066457600080fd5b506104766106733660046141df565b611b69565b34801561068457600080fd5b506006546001600160a01b0316610476565b3480156106a257600080fd5b506103416106b136600461425b565b6001600160a01b03166000908152600a602052604090205490565b3480156106d857600080fd5b5061034160135481565b3480156106ee57600080fd5b506103946106fd366004614619565b611b99565b34801561070e57600080fd5b5061034161071d36600461425b565b611ba8565b34801561072e57600080fd5b5061034161073d3660046141df565b60009081526005602052604090205490565b34801561075b57600080fd5b5061039461076a366004614647565b611bf0565b34801561077b57600080fd5b5061034161078a366004614434565b611c04565b34801561079b57600080fd5b506103416107aa36600461425b565b6001600160a01b031660009081526009602052604090205490565b3480156107d157600080fd5b5061034160125481565b3480156107e757600080fd5b506103416107f636600461425b565b6001600160a01b03166000908152600c602052604090205490565b34801561081d57600080fd5b50610826611ce8565b60405161034b98979695949392919061467c565b34801561084657600080fd5b50600854610341565b34801561085b57600080fd5b506103b661086a366004614434565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b3480156108a457600080fd5b5061034160105481565b3480156108ba57600080fd5b506103946108c936600461472b565b6123b5565b3480156108da57600080fd5b506103946108e936600461425b565b612450565b3480156108fa57600080fd5b5061090e6109093660046141df565b6124dd565b60405161034b9493929190614794565b34801561092a57600080fd5b506103946109393660046147e1565b612813565b34801561094a57600080fd5b506104066040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b60006010544210156109c5576040517f58fd8d1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6011544211156109d6575060135490565b6010546011546109e69190614832565b6013546012546109f69190614832565b601054610a039042614832565b610a0d9190614845565b610a17919061485c565b601254610a249190614832565b90505b90565b60006001600160a01b038316610aad5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b610ae061292d565b600e60009054906101000a90046001600160a01b03166001600160a01b031663cf3090126040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b57919061487e565b15610b8e576040517f0f2e5b6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601654151580610b9f575060155415155b15610bd6576040517f8c6dac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b89511580610be2575086155b80610bef575088518a5114155b80610bfa5750868514155b80610c055750868314155b80610c105750868114155b15610c2e5760405163a9854bc960e01b815260040160405180910390fd5b60005b8a51811015610cce57601560405180604001604052808d8481518110610c5957610c5961489b565b602002602001015181526020018c8481518110610c7857610c7861489b565b6020908102919091018101519091528254600181018455600093845292208151919260020201908190610cab9082614931565b5060208201516001820190610cc09082614931565b505050806001019050610c31565b5060005b87811015610e3957601660405180608001604052808b8b85818110610cf957610cf961489b565b9050602002810190610d0b91906149f1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001898985818110610d5757610d5761489b565b9050602002810190610d6991906149f1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001878785818110610db557610db561489b565b905060200201358152602001858585818110610dd357610dd361489b565b60209081029290920135909252835460018101855560009485529320825192936004020191829150610e059082614931565b5060208201516001820190610e1a9082614931565b5060408201516002820155606090910151600390910155600101610cd2565b5050505050505050505050565b60006001600160e01b031982167fc7da5ac8000000000000000000000000000000000000000000000000000000001480610ad25750610ad282612987565b600e546001600160a01b03163314610ec8576040517f6447134900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6015548114610eea5760405163a9854bc960e01b815260040160405180910390fd5b60008167ffffffffffffffff811115610f0557610f05613e91565b604051908082528060200260200182016040528015610f2e578160200160208202803683370190505b50905060005b82811015610fd857806016858584818110610f5157610f5161489b565b9050602002013581548110610f6857610f6861489b565b90600052602060002090600402016002015414610fb1576040517fc886447400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001828281518110610fc557610fc561489b565b6020908102919091010152600101610f34565b5061103c84600e60009054906101000a90046001600160a01b03168585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250604080516020810190915290815288935091506129f99050565b50505050565b6016546060908210611067576040516307ed98ed60e31b815260040160405180910390fd5b61107082612c68565b61107930612cfc565b61108284612d12565b60405160200161109493929190614a38565b6040516020818303038152906040529050919050565b6001600160a01b03811660009081526009602052604090205461111e5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610aa4565b600061112982611ba8565b90508060000361118f5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610aa4565b80600860008282546111a19190614aa4565b90915550506001600160a01b0382166000908152600a602052604090208054820190556111ce8282612db2565b604080516001600160a01b0384168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a15050565b60155460609081908067ffffffffffffffff81111561123557611235613e91565b60405190808252806020026020018201604052801561126857816020015b60608152602001906001900390816112535790505b5092508067ffffffffffffffff81111561128457611284613e91565b6040519080825280602002602001820160405280156112b757816020015b60608152602001906001900390816112a25790505b50915060005b8181101561146157601581815481106112d8576112d861489b565b906000526020600020906002020160000180546112f4906148b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611320906148b1565b801561136d5780601f106113425761010080835404028352916020019161136d565b820191906000526020600020905b81548152906001019060200180831161135057829003601f168201915b50505050508482815181106113845761138461489b565b6020026020010181905250601581815481106113a2576113a261489b565b906000526020600020906002020160010180546113be906148b1565b80601f01602080910402602001604051908101604052809291908181526020018280546113ea906148b1565b80156114375780601f1061140c57610100808354040283529160200191611437565b820191906000526020600020905b81548152906001019060200180831161141a57829003601f168201915b505050505083828151811061144e5761144e61489b565b60209081029190910101526001016112bd565b50509091565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046bffffffffffffffffffffffff169282019290925282916114e65750604080518082019091526000546001600160a01b0381168252600160a01b90046bffffffffffffffffffffffff1660208201525b60208101516000906127109061150a906bffffffffffffffffffffffff1687614845565b611514919061485c565b91519350909150505b9250929050565b6001600160a01b0385163314806115405750611540853361086a565b6115b25760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610aa4565b6115bf85858585856129f9565b5050505050565b6001600160a01b03811660009081526009602052604090205461163a5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610aa4565b60006116468383611c04565b9050806000036116ac5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610aa4565b6001600160a01b0383166000908152600c6020526040812080548392906116d4908490614aa4565b90915550506001600160a01b038084166000908152600d6020908152604080832093861683529290522080548201905561170f838383612ed0565b604080516001600160a01b038481168252602082018490528516917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a2505050565b606081518351146117d35760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610aa4565b6000835167ffffffffffffffff8111156117ef576117ef613e91565b604051908082528060200260200182016040528015611818578160200160208202803683370190505b50905060005b84518110156118905761186385828151811061183c5761183c61489b565b60200260200101518583815181106118565761185661489b565b6020026020010151610a2a565b8282815181106118755761187561489b565b602090810291909101015261188981614ab7565b905061181e565b509392505050565b6118a061292d565b6118aa6000612f50565b565b8281146118cc5760405163a9854bc960e01b815260040160405180910390fd5b600e546001600160a01b031633148015906118e8575060145442105b1561191f576040517fac3d4d3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061192a610987565b905060005b83811015611a2b578484828181106119495761194961489b565b905060200201358361195b9190614aa4565b925060168787838181106119715761197161489b565b90506020020135815481106119885761198861489b565b9060005260206000209060040201600301548585838181106119ac576119ac61489b565b905060200201356119e18989858181106119c8576119c861489b565b9050602002013560009081526005602052604090205490565b6119eb9190614aa4565b1115611a23576040517fb36c128400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60010161192f565b50611a368183614845565b341015611a6f576040517f0772327b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611aeb8787878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a925089918291850190849080828437600092018290525060408051602081019091529081529250612fba915050565b866001600160a01b03167f5e69dace42908bf940c680c4fd1884a926e1e39b2c2a350d9a0b96eeed5d32a687878787604051611b2a9493929190614b1b565b60405180910390a250505050505050565b600060168281548110611b5057611b5061489b565b9060005260206000209060040201600301549050919050565b6000600b8281548110611b7e57611b7e61489b565b6000918252602090912001546001600160a01b031692915050565b611ba43383836131ac565b5050565b600080611bb460085490565b611bbe9047614aa4565b9050611be98382611be4866001600160a01b03166000908152600a602052604090205490565b6132a0565b9392505050565b611bf861292d565b611c01816132de565b50565b6001600160a01b0382166000908152600c602052604081205481906040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca09190614b42565b611caa9190614aa4565b6001600160a01b038086166000908152600d6020908152604080832093881683529290522054909150611ce090849083906132a0565b949350505050565b606080606080606080606080600060168054905090508067ffffffffffffffff811115611d1757611d17613e91565b604051908082528060200260200182016040528015611d40578160200160208202803683370190505b5098508067ffffffffffffffff811115611d5c57611d5c613e91565b604051908082528060200260200182016040528015611d8f57816020015b6060815260200190600190039081611d7a5790505b5097508067ffffffffffffffff811115611dab57611dab613e91565b604051908082528060200260200182016040528015611dde57816020015b6060815260200190600190039081611dc95790505b5096508067ffffffffffffffff811115611dfa57611dfa613e91565b604051908082528060200260200182016040528015611e23578160200160208202803683370190505b5095508067ffffffffffffffff811115611e3f57611e3f613e91565b604051908082528060200260200182016040528015611e7257816020015b6060815260200190600190039081611e5d5790505b5094508067ffffffffffffffff811115611e8e57611e8e613e91565b604051908082528060200260200182016040528015611ec157816020015b6060815260200190600190039081611eac5790505b5093508067ffffffffffffffff811115611edd57611edd613e91565b604051908082528060200260200182016040528015611f06578160200160208202803683370190505b5092508067ffffffffffffffff811115611f2257611f22613e91565b604051908082528060200260200182016040528015611f4b578160200160208202803683370190505b50915060005b818110156123a957808a8281518110611f6c57611f6c61489b565b60200260200101818152505060168181548110611f8b57611f8b61489b565b90600052602060002090600402016000018054611fa7906148b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd3906148b1565b80156120205780601f10611ff557610100808354040283529160200191612020565b820191906000526020600020905b81548152906001019060200180831161200357829003601f168201915b50505050508982815181106120375761203761489b565b6020026020010181905250601681815481106120555761205561489b565b90600052602060002090600402016001018054612071906148b1565b80601f016020809104026020016040519081016040528092919081815260200182805461209d906148b1565b80156120ea5780601f106120bf576101008083540402835291602001916120ea565b820191906000526020600020905b8154815290600101906020018083116120cd57829003601f168201915b50505050508882815181106121015761210161489b565b60200260200101819052506016818154811061211f5761211f61489b565b9060005260206000209060040201600201548782815181106121435761214361489b565b6020026020010181815250506015601682815481106121645761216461489b565b906000526020600020906004020160020154815481106121865761218661489b565b906000526020600020906002020160000180546121a2906148b1565b80601f01602080910402602001604051908101604052809291908181526020018280546121ce906148b1565b801561221b5780601f106121f05761010080835404028352916020019161221b565b820191906000526020600020905b8154815290600101906020018083116121fe57829003601f168201915b50505050508682815181106122325761223261489b565b60200260200101819052506015601682815481106122525761225261489b565b906000526020600020906004020160020154815481106122745761227461489b565b90600052602060002090600202016001018054612290906148b1565b80601f01602080910402602001604051908101604052809291908181526020018280546122bc906148b1565b80156123095780601f106122de57610100808354040283529160200191612309565b820191906000526020600020905b8154815290600101906020018083116122ec57829003601f168201915b50505050508582815181106123205761232061489b565b60200260200101819052506123418160009081526005602052604090205490565b8482815181106123535761235361489b565b602002602001018181525050601681815481106123725761237261489b565b9060005260206000209060040201600301548382815181106123965761239661489b565b6020908102919091010152600101611f51565b50509091929394959697565b6001600160a01b0385163314806123d157506123d1853361086a565b6124435760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610aa4565b6115bf85858585856132ea565b61245861292d565b6001600160a01b0381166124d45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610aa4565b611c0181612f50565b6060806060806016805490508510612508576040516307ed98ed60e31b815260040160405180910390fd5b6016858154811061251b5761251b61489b565b90600052602060002090600402016000018054612537906148b1565b80601f0160208091040260200160405190810160405280929190818152602001828054612563906148b1565b80156125b05780601f10612585576101008083540402835291602001916125b0565b820191906000526020600020905b81548152906001019060200180831161259357829003601f168201915b50505050509350601685815481106125ca576125ca61489b565b906000526020600020906004020160010180546125e6906148b1565b80601f0160208091040260200160405190810160405280929190818152602001828054612612906148b1565b801561265f5780601f106126345761010080835404028352916020019161265f565b820191906000526020600020905b81548152906001019060200180831161264257829003601f168201915b5050505050925060156016868154811061267b5761267b61489b565b9060005260206000209060040201600201548154811061269d5761269d61489b565b906000526020600020906002020160000180546126b9906148b1565b80601f01602080910402602001604051908101604052809291908181526020018280546126e5906148b1565b80156127325780601f1061270757610100808354040283529160200191612732565b820191906000526020600020905b81548152906001019060200180831161271557829003601f168201915b5050505050915060156016868154811061274e5761274e61489b565b906000526020600020906004020160020154815481106127705761277061489b565b9060005260206000209060020201600101805461278c906148b1565b80601f01602080910402602001604051908101604052809291908181526020018280546127b8906148b1565b80156128055780601f106127da57610100808354040283529160200191612805565b820191906000526020600020905b8154815290600101906020018083116127e857829003601f168201915b505050505090509193509193565b61281b61292d565b600e60009054906101000a90046001600160a01b03166001600160a01b031663cf3090126040518163ffffffff1660e01b8152600401602060405180830381865afa15801561286e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612892919061487e565b6128c8576040517f1834e26500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848410806128d557508282115b806128df57508481105b15612916576040517f2156216000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601094909455601192909255601255601355601455565b6006546001600160a01b031633146118aa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa4565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806129ea57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b80610ad25750610ad2826134a7565b8151835114612a5b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610aa4565b6001600160a01b038416612abf5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610aa4565b33612ace81878787878761350e565b60005b8451811015612bfa576000858281518110612aee57612aee61489b565b602002602001015190506000858381518110612b0c57612b0c61489b565b60209081029190910181015160008481526002835260408082206001600160a01b038e168352909352919091205490915081811015612ba05760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610aa4565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612bdf908490614aa4565b9250508190555050505080612bf390614ab7565b9050612ad1565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612c4a929190614b5b565b60405180910390a4612c6081878787878761351c565b505050505050565b606060048054612c77906148b1565b80601f0160208091040260200160405190810160405280929190818152602001828054612ca3906148b1565b8015612cf05780601f10612cc557610100808354040283529160200191612cf0565b820191906000526020600020905b815481529060010190602001808311612cd357829003601f168201915b50505050509050919050565b6060610ad26001600160a01b03831660146136ca565b60606000612d1f836138ab565b600101905060008167ffffffffffffffff811115612d3f57612d3f613e91565b6040519080825280601f01601f191660200182016040528015612d69576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084612d7357509392505050565b80471015612e025760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610aa4565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e4f576040519150601f19603f3d011682016040523d82523d6000602084013e612e54565b606091505b5050905080612ecb5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610aa4565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612ecb90849061398d565b600680546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166130365760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610aa4565b81518351146130985760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610aa4565b336130a88160008787878761350e565b60005b8451811015613144578381815181106130c6576130c661489b565b6020026020010151600260008784815181106130e4576130e461489b565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461312c9190614aa4565b9091555081905061313c81614ab7565b9150506130ab565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051613195929190614b5b565b60405180910390a46115bf8160008787878761351c565b816001600160a01b0316836001600160a01b0316036132335760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610aa4565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6007546001600160a01b038416600090815260096020526040812054909183916132ca9086614845565b6132d4919061485c565b611ce09190614832565b6004611ba48282614931565b6001600160a01b03841661334e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610aa4565b33600061335a85613a72565b9050600061336785613a72565b905061337783898985858961350e565b60008681526002602090815260408083206001600160a01b038c168452909152902054858110156133fd5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610aa4565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061343c908490614aa4565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461349c848a8a8a8a8a613abd565b505050505050505050565b60006001600160e01b031982167f2a55205a000000000000000000000000000000000000000000000000000000001480610ad257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610ad2565b612c60868686868686613bb9565b6001600160a01b0384163b15612c605760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906135609089908990889088908890600401614b80565b6020604051808303816000875af192505050801561359b575060408051601f3d908101601f1916820190925261359891810190614bde565b60015b613650576135a7614bfb565b806308c379a0036135e057506135bb614c16565b806135c657506135e2565b8060405162461bcd60e51b8152600401610aa49190614248565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610aa4565b6001600160e01b0319811663bc197c8160e01b146136c15760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610aa4565b50505050505050565b606060006136d9836002614845565b6136e4906002614aa4565b67ffffffffffffffff8111156136fc576136fc613e91565b6040519080825280601f01601f191660200182016040528015613726576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061375d5761375d61489b565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106137a8576137a861489b565b60200101906001600160f81b031916908160001a90535060006137cc846002614845565b6137d7906001614aa4565b90505b600181111561385c577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106138185761381861489b565b1a60f81b82828151811061382e5761382e61489b565b60200101906001600160f81b031916908160001a90535060049490941c9361385581614ca0565b90506137da565b508315611be95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610aa4565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106138f4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310613920576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061393e57662386f26fc10000830492506010015b6305f5e1008310613956576305f5e100830492506008015b612710831061396a57612710830492506004015b6064831061397c576064830492506002015b600a8310610ad25760010192915050565b60006139e2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d479092919063ffffffff16565b805190915015612ecb5780806020019051810190613a00919061487e565b612ecb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610aa4565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110613aac57613aac61489b565b602090810291909101015292915050565b6001600160a01b0384163b15612c605760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190613b019089908990889088908890600401614cb7565b6020604051808303816000875af1925050508015613b3c575060408051601f3d908101601f19168201909252613b3991810190614bde565b60015b613b48576135a7614bfb565b6001600160e01b0319811663f23a6e6160e01b146136c15760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610aa4565b6001600160a01b038516613c405760005b8351811015613c3e57828181518110613be557613be561489b565b602002602001015160056000868481518110613c0357613c0361489b565b602002602001015181526020019081526020016000206000828254613c289190614aa4565b90915550613c37905081614ab7565b9050613bca565b505b6001600160a01b038416612c605760005b83518110156136c1576000848281518110613c6e57613c6e61489b565b602002602001015190506000848381518110613c8c57613c8c61489b565b6020026020010151905060006005600084815260200190815260200160002054905081811015613d245760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610aa4565b60009283526005602052604090922091039055613d4081614ab7565b9050613c51565b6060611ce0848460008585600080866001600160a01b03168587604051613d6e9190614cef565b60006040518083038185875af1925050503d8060008114613dab576040519150601f19603f3d011682016040523d82523d6000602084013e613db0565b606091505b5091509150613dc187838387613dcc565b979650505050505050565b60608315613e3b578251600003613e34576001600160a01b0385163b613e345760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aa4565b5081611ce0565b611ce083838151156135c65781518083602001fd5b6001600160a01b0381168114611c0157600080fd5b60008060408385031215613e7857600080fd5b8235613e8381613e50565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715613ecd57613ecd613e91565b6040525050565b600067ffffffffffffffff821115613eee57613eee613e91565b5060051b60200190565b600082601f830112613f0957600080fd5b813567ffffffffffffffff811115613f2357613f23613e91565b604051613f3a601f8301601f191660200182613ea7565b818152846020838601011115613f4f57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613f7d57600080fd5b81356020613f8a82613ed4565b604051613f978282613ea7565b83815260059390931b8501820192828101915086841115613fb757600080fd5b8286015b84811015613ff757803567ffffffffffffffff811115613fdb5760008081fd5b613fe98986838b0101613ef8565b845250918301918301613fbb565b509695505050505050565b60008083601f84011261401457600080fd5b50813567ffffffffffffffff81111561402c57600080fd5b6020830191508360208260051b850101111561151d57600080fd5b60008060008060008060008060008060c08b8d03121561406657600080fd5b8a3567ffffffffffffffff8082111561407e57600080fd5b61408a8e838f01613f6c565b9b5060208d01359150808211156140a057600080fd5b6140ac8e838f01613f6c565b9a5060408d01359150808211156140c257600080fd5b6140ce8e838f01614002565b909a50985060608d01359150808211156140e757600080fd5b6140f38e838f01614002565b909850965060808d013591508082111561410c57600080fd5b6141188e838f01614002565b909650945060a08d013591508082111561413157600080fd5b5061413e8d828e01614002565b915080935050809150509295989b9194979a5092959850565b6001600160e01b031981168114611c0157600080fd5b60006020828403121561417f57600080fd5b8135611be981614157565b60008060006040848603121561419f57600080fd5b83356141aa81613e50565b9250602084013567ffffffffffffffff8111156141c657600080fd5b6141d286828701614002565b9497909650939450505050565b6000602082840312156141f157600080fd5b5035919050565b60005b838110156142135781810151838201526020016141fb565b50506000910152565b600081518084526142348160208601602086016141f8565b601f01601f19169290920160200192915050565b602081526000611be9602083018461421c565b60006020828403121561426d57600080fd5b8135611be981613e50565b600082825180855260208086019550808260051b84010181860160005b848110156142c357601f198684030189526142b183835161421c565b98840198925090830190600101614295565b5090979650505050505050565b6040815260006142e36040830185614278565b82810360208401526142f58185614278565b95945050505050565b6000806040838503121561431157600080fd5b50508035926020909101359150565b600082601f83011261433157600080fd5b8135602061433e82613ed4565b60405161434b8282613ea7565b83815260059390931b850182019282810191508684111561436b57600080fd5b8286015b84811015613ff7578035835291830191830161436f565b600080600080600060a0868803121561439e57600080fd5b85356143a981613e50565b945060208601356143b981613e50565b9350604086013567ffffffffffffffff808211156143d657600080fd5b6143e289838a01614320565b945060608801359150808211156143f857600080fd5b61440489838a01614320565b9350608088013591508082111561441a57600080fd5b5061442788828901613ef8565b9150509295509295909350565b6000806040838503121561444757600080fd5b823561445281613e50565b9150602083013561446281613e50565b809150509250929050565b6000806040838503121561448057600080fd5b823567ffffffffffffffff8082111561449857600080fd5b818501915085601f8301126144ac57600080fd5b813560206144b982613ed4565b6040516144c68282613ea7565b83815260059390931b85018201928281019150898411156144e657600080fd5b948201945b8386101561450d5785356144fe81613e50565b825294820194908201906144eb565b9650508601359250508082111561452357600080fd5b5061453085828601614320565b9150509250929050565b600081518084526020808501945080840160005b8381101561456a5781518752958201959082019060010161454e565b509495945050505050565b602081526000611be9602083018461453a565b6000806000806000606086880312156145a057600080fd5b85356145ab81613e50565b9450602086013567ffffffffffffffff808211156145c857600080fd5b6145d489838a01614002565b909650945060408801359150808211156145ed57600080fd5b506145fa88828901614002565b969995985093965092949392505050565b8015158114611c0157600080fd5b6000806040838503121561462c57600080fd5b823561463781613e50565b915060208301356144628161460b565b60006020828403121561465957600080fd5b813567ffffffffffffffff81111561467057600080fd5b611ce084828501613ef8565b60006101008083526146908184018c61453a565b905082810360208401526146a4818b614278565b905082810360408401526146b8818a614278565b905082810360608401526146cc818961453a565b905082810360808401526146e08188614278565b905082810360a08401526146f48187614278565b905082810360c0840152614708818661453a565b905082810360e084015261471c818561453a565b9b9a5050505050505050505050565b600080600080600060a0868803121561474357600080fd5b853561474e81613e50565b9450602086013561475e81613e50565b93506040860135925060608601359150608086013567ffffffffffffffff81111561478857600080fd5b61442788828901613ef8565b6080815260006147a7608083018761421c565b82810360208401526147b9818761421c565b905082810360408401526147cd818661421c565b90508281036060840152613dc1818561421c565b600080600080600060a086880312156147f957600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ad257610ad261481c565b8082028115828204841417610ad257610ad261481c565b60008261487957634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561489057600080fd5b8151611be98161460b565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806148c557607f821691505b6020821081036148e557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115612ecb57600081815260208120601f850160051c810160208610156149125750805b601f850160051c820191505b81811015612c605782815560010161491e565b815167ffffffffffffffff81111561494b5761494b613e91565b61495f8161495984546148b1565b846148eb565b602080601f831160018114614994576000841561497c5750858301515b600019600386901b1c1916600185901b178555612c60565b600085815260208120601f198616915b828110156149c3578886015182559484019460019091019084016149a4565b50858210156149e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808335601e19843603018112614a0857600080fd5b83018035915067ffffffffffffffff821115614a2357600080fd5b60200191503681900382131561151d57600080fd5b60008451614a4a8184602089016141f8565b845190830190614a5e8183602089016141f8565b7f2f0000000000000000000000000000000000000000000000000000000000000091019081528351614a978160018401602088016141f8565b0160010195945050505050565b80820180821115610ad257610ad261481c565b600060018201614ac957614ac961481c565b5060010190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614b0257600080fd5b8260051b80836020870137939093016020019392505050565b604081526000614b2f604083018688614ad0565b8281036020840152613dc1818587614ad0565b600060208284031215614b5457600080fd5b5051919050565b604081526000614b6e604083018561453a565b82810360208401526142f5818561453a565b60006001600160a01b03808816835280871660208401525060a06040830152614bac60a083018661453a565b8281036060840152614bbe818661453a565b90508281036080840152614bd2818561421c565b98975050505050505050565b600060208284031215614bf057600080fd5b8151611be981614157565b600060033d1115610a275760046000803e5060005160e01c90565b600060443d1015614c245790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715614c5457505050505090565b8285019150815181811115614c6c5750505050505090565b843d8701016020828501011115614c865750505050505090565b614c9560208286010187613ea7565b509095945050505050565b600081614caf57614caf61481c565b506000190190565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613dc160a083018461421c565b60008251614d018184602087016141f8565b919091019291505056fea2646970667358221220d0910c425fb5e828511c20df45aeb876d0991efc057e999db60f5d11338aff8964736f6c634300081300336080604052604051620012813803806200128183398101604081905262000026916200042e565b8051825114620000985760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084015b60405180910390fd5b6000825111620000eb5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f2070617965657300000000000060448201526064016200008f565b60005b82518110156200015757620001428382815181106200011157620001116200050c565b60200260200101518383815181106200012e576200012e6200050c565b60200260200101516200016060201b60201c565b806200014e8162000538565b915050620000ee565b50505062000570565b6001600160a01b038216620001cd5760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b60648201526084016200008f565b600081116200021f5760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a2073686172657320617265203000000060448201526064016200008f565b6001600160a01b038216600090815260026020526040902054156200029b5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b60648201526084016200008f565b60048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0384169081179091556000908152600260205260408120829055546200030390829062000554565b600055604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200038d576200038d6200034c565b604052919050565b60006001600160401b03821115620003b157620003b16200034c565b5060051b60200190565b600082601f830112620003cd57600080fd5b81516020620003e6620003e08362000395565b62000362565b82815260059290921b840181019181810190868411156200040657600080fd5b8286015b848110156200042357805183529183019183016200040a565b509695505050505050565b600080604083850312156200044257600080fd5b82516001600160401b03808211156200045a57600080fd5b818501915085601f8301126200046f57600080fd5b8151602062000482620003e08362000395565b82815260059290921b84018101918181019089841115620004a257600080fd5b948201945b83861015620004d95785516001600160a01b0381168114620004c95760008081fd5b82529482019490820190620004a7565b91880151919650909350505080821115620004f357600080fd5b506200050285828601620003bb565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016200054d576200054d62000522565b5060010190565b808201808211156200056a576200056a62000522565b92915050565b610d0180620005806000396000f3fe6080604052600436106100c05760003560e01c80639852595c11610074578063ce7c2ac21161004e578063ce7c2ac214610242578063d79779b214610278578063e33b7de3146102ae57600080fd5b80639852595c146101cc578063a3f8eace14610202578063c45ac0501461022257600080fd5b8063406072a9116100a5578063406072a91461015457806348b75044146101745780638b83209b1461019457600080fd5b8063191655871461010e5780633a98ef391461013057600080fd5b36610109577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561011a57600080fd5b5061012e610129366004610b23565b6102c3565b005b34801561013c57600080fd5b506000545b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061014161016f366004610b40565b610432565b34801561018057600080fd5b5061012e61018f366004610b40565b61045f565b3480156101a057600080fd5b506101b46101af366004610b79565b6105f3565b6040516001600160a01b03909116815260200161014b565b3480156101d857600080fd5b506101416101e7366004610b23565b6001600160a01b031660009081526003602052604090205490565b34801561020e57600080fd5b5061014161021d366004610b23565b610623565b34801561022e57600080fd5b5061014161023d366004610b40565b61066b565b34801561024e57600080fd5b5061014161025d366004610b23565b6001600160a01b031660009081526002602052604090205490565b34801561028457600080fd5b50610141610293366004610b23565b6001600160a01b031660009081526005602052604090205490565b3480156102ba57600080fd5b50600154610141565b6001600160a01b03811660009081526002602052604090205461033c5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b60648201526084015b60405180910390fd5b600061034782610623565b9050806000036103ad5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610333565b80600160008282546103bf9190610ba8565b90915550506001600160a01b03821660009081526003602052604090208054820190556103ec828261072a565b604080516001600160a01b0384168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a15050565b6001600160a01b038083166000908152600660209081526040808320938516835292905220545b92915050565b6001600160a01b0381166000908152600260205260409020546104d35760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610333565b60006104df838361066b565b9050806000036105455760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610333565b6001600160a01b0383166000908152600560205260408120805483929061056d908490610ba8565b90915550506001600160a01b0380841660009081526006602090815260408083209386168352929052208054820190556105a8838383610848565b604080516001600160a01b038481168252602082018490528516917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a2505050565b60006004828154811061060857610608610bbb565b6000918252602090912001546001600160a01b031692915050565b60008061062f60015490565b6106399047610ba8565b9050610664838261065f866001600160a01b031660009081526003602052604090205490565b6108c8565b9392505050565b6001600160a01b03821660009081526005602052604081205481906040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107079190610bd1565b6107119190610ba8565b9050610722838261065f8787610432565b949350505050565b8047101561077a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610333565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146107c7576040519150601f19603f3d011682016040523d82523d6000602084013e6107cc565b606091505b50509050806108435760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610333565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610843908490610903565b600080546001600160a01b0385168252600260205260408220548391906108ef9086610bea565b6108f99190610c01565b6107229190610c23565b6000610958826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109e89092919063ffffffff16565b80519091501561084357808060200190518101906109769190610c36565b6108435760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610333565b6060610722848460008585600080866001600160a01b03168587604051610a0f9190610c7c565b60006040518083038185875af1925050503d8060008114610a4c576040519150601f19603f3d011682016040523d82523d6000602084013e610a51565b606091505b5091509150610a6287838387610a6d565b979650505050505050565b60608315610adc578251600003610ad5576001600160a01b0385163b610ad55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610333565b5081610722565b6107228383815115610af15781518083602001fd5b8060405162461bcd60e51b81526004016103339190610c98565b6001600160a01b0381168114610b2057600080fd5b50565b600060208284031215610b3557600080fd5b813561066481610b0b565b60008060408385031215610b5357600080fd5b8235610b5e81610b0b565b91506020830135610b6e81610b0b565b809150509250929050565b600060208284031215610b8b57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561045957610459610b92565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610be357600080fd5b5051919050565b808202811582820484141761045957610459610b92565b600082610c1e57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561045957610459610b92565b600060208284031215610c4857600080fd5b8151801515811461066457600080fd5b60005b83811015610c73578181015183820152602001610c5b565b50506000910152565b60008251610c8e818460208701610c58565b9190910192915050565b6020815260008251806020840152610cb7816040850160208701610c58565b601f01601f1916919091016040019291505056fea2646970667358221220ce9a6bcd2b43e1c2ba849e49a590b0148fe0d414edba637b9113e5c3ad3c78c364736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102de5760003560e01c806388392b5d11610184578063d756985b116100d6578063eb54f9ec1161008a578063f3457fdf11610064578063f3457fdf146108ee578063f8acb75d1461091e578063ffa1ad741461093e57600080fd5b8063eb54f9ec14610898578063f242432a146108ae578063f2fde38b146108ce57600080fd5b8063e1fc334f116100bb578063e1fc334f14610811578063e33b7de31461083a578063e985e9c51461084f57600080fd5b8063d756985b146107c5578063d79779b2146107db57600080fd5b8063a22cb46511610138578063c30f4a5a11610112578063c30f4a5a1461074f578063c45ac0501461076f578063ce7c2ac21461078f57600080fd5b8063a22cb465146106e2578063a3f8eace14610702578063bd85b0391461072257600080fd5b80638da5cb5b116101695780638da5cb5b146106785780639852595c14610696578063a04a6ac8146106cc57600080fd5b806388392b5d146106425780638b83209b1461065857600080fd5b80632eb2c2d61161023d5780634b449cba116101f1578063715018a6116101cb578063715018a6146105fa5780637bedfac01461060f578063869f75941461062257600080fd5b80634b449cba146105885780634e1273f41461059e5780634f558e79146105cb57600080fd5b8063406072a911610222578063406072a914610502578063411d8f2f1461054857806348b750441461056857600080fd5b80632eb2c2d6146104cd5780633a98ef39146104ed57600080fd5b80630e89341c116102945780631f0a595b116102795780631f0a595b1461043357806326cc133e146104565780632a55205a1461048e57600080fd5b80630e89341c146103e6578063191655871461041357600080fd5b806301c8aa4b116102c557806301c8aa4b1461037457806301ffc9a71461039657806302afd1a1146103c657600080fd5b8062a9bb011461032c578062fdd58e1461035457600080fd5b36610327577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561033857600080fd5b50610341610987565b6040519081526020015b60405180910390f35b34801561036057600080fd5b5061034161036f366004613e65565b610a2a565b34801561038057600080fd5b5061039461038f366004614047565b610ad8565b005b3480156103a257600080fd5b506103b66103b136600461416d565b610e46565b604051901515815260200161034b565b3480156103d257600080fd5b506103946103e136600461418a565b610e84565b3480156103f257600080fd5b506104066104013660046141df565b611042565b60405161034b9190614248565b34801561041f57600080fd5b5061039461042e36600461425b565b6110aa565b34801561043f57600080fd5b50610448611214565b60405161034b9291906142d0565b34801561046257600080fd5b50600e54610476906001600160a01b031681565b6040516001600160a01b03909116815260200161034b565b34801561049a57600080fd5b506104ae6104a93660046142fe565b611467565b604080516001600160a01b03909316835260208301919091520161034b565b3480156104d957600080fd5b506103946104e8366004614386565b611524565b3480156104f957600080fd5b50600754610341565b34801561050e57600080fd5b5061034161051d366004614434565b6001600160a01b039182166000908152600d6020908152604080832093909416825291909152205490565b34801561055457600080fd5b50600f54610476906001600160a01b031681565b34801561057457600080fd5b50610394610583366004614434565b6115c6565b34801561059457600080fd5b5061034160115481565b3480156105aa57600080fd5b506105be6105b936600461446d565b61175a565b60405161034b9190614575565b3480156105d757600080fd5b506103b66105e63660046141df565b600090815260056020526040902054151590565b34801561060657600080fd5b50610394611898565b61039461061d366004614588565b6118ac565b34801561062e57600080fd5b5061034161063d3660046141df565b611b3b565b34801561064e57600080fd5b5061034160145481565b34801561066457600080fd5b506104766106733660046141df565b611b69565b34801561068457600080fd5b506006546001600160a01b0316610476565b3480156106a257600080fd5b506103416106b136600461425b565b6001600160a01b03166000908152600a602052604090205490565b3480156106d857600080fd5b5061034160135481565b3480156106ee57600080fd5b506103946106fd366004614619565b611b99565b34801561070e57600080fd5b5061034161071d36600461425b565b611ba8565b34801561072e57600080fd5b5061034161073d3660046141df565b60009081526005602052604090205490565b34801561075b57600080fd5b5061039461076a366004614647565b611bf0565b34801561077b57600080fd5b5061034161078a366004614434565b611c04565b34801561079b57600080fd5b506103416107aa36600461425b565b6001600160a01b031660009081526009602052604090205490565b3480156107d157600080fd5b5061034160125481565b3480156107e757600080fd5b506103416107f636600461425b565b6001600160a01b03166000908152600c602052604090205490565b34801561081d57600080fd5b50610826611ce8565b60405161034b98979695949392919061467c565b34801561084657600080fd5b50600854610341565b34801561085b57600080fd5b506103b661086a366004614434565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b3480156108a457600080fd5b5061034160105481565b3480156108ba57600080fd5b506103946108c936600461472b565b6123b5565b3480156108da57600080fd5b506103946108e936600461425b565b612450565b3480156108fa57600080fd5b5061090e6109093660046141df565b6124dd565b60405161034b9493929190614794565b34801561092a57600080fd5b506103946109393660046147e1565b612813565b34801561094a57600080fd5b506104066040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b60006010544210156109c5576040517f58fd8d1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6011544211156109d6575060135490565b6010546011546109e69190614832565b6013546012546109f69190614832565b601054610a039042614832565b610a0d9190614845565b610a17919061485c565b601254610a249190614832565b90505b90565b60006001600160a01b038316610aad5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b610ae061292d565b600e60009054906101000a90046001600160a01b03166001600160a01b031663cf3090126040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b57919061487e565b15610b8e576040517f0f2e5b6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601654151580610b9f575060155415155b15610bd6576040517f8c6dac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b89511580610be2575086155b80610bef575088518a5114155b80610bfa5750868514155b80610c055750868314155b80610c105750868114155b15610c2e5760405163a9854bc960e01b815260040160405180910390fd5b60005b8a51811015610cce57601560405180604001604052808d8481518110610c5957610c5961489b565b602002602001015181526020018c8481518110610c7857610c7861489b565b6020908102919091018101519091528254600181018455600093845292208151919260020201908190610cab9082614931565b5060208201516001820190610cc09082614931565b505050806001019050610c31565b5060005b87811015610e3957601660405180608001604052808b8b85818110610cf957610cf961489b565b9050602002810190610d0b91906149f1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001898985818110610d5757610d5761489b565b9050602002810190610d6991906149f1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001878785818110610db557610db561489b565b905060200201358152602001858585818110610dd357610dd361489b565b60209081029290920135909252835460018101855560009485529320825192936004020191829150610e059082614931565b5060208201516001820190610e1a9082614931565b5060408201516002820155606090910151600390910155600101610cd2565b5050505050505050505050565b60006001600160e01b031982167fc7da5ac8000000000000000000000000000000000000000000000000000000001480610ad25750610ad282612987565b600e546001600160a01b03163314610ec8576040517f6447134900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6015548114610eea5760405163a9854bc960e01b815260040160405180910390fd5b60008167ffffffffffffffff811115610f0557610f05613e91565b604051908082528060200260200182016040528015610f2e578160200160208202803683370190505b50905060005b82811015610fd857806016858584818110610f5157610f5161489b565b9050602002013581548110610f6857610f6861489b565b90600052602060002090600402016002015414610fb1576040517fc886447400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001828281518110610fc557610fc561489b565b6020908102919091010152600101610f34565b5061103c84600e60009054906101000a90046001600160a01b03168585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250604080516020810190915290815288935091506129f99050565b50505050565b6016546060908210611067576040516307ed98ed60e31b815260040160405180910390fd5b61107082612c68565b61107930612cfc565b61108284612d12565b60405160200161109493929190614a38565b6040516020818303038152906040529050919050565b6001600160a01b03811660009081526009602052604090205461111e5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610aa4565b600061112982611ba8565b90508060000361118f5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610aa4565b80600860008282546111a19190614aa4565b90915550506001600160a01b0382166000908152600a602052604090208054820190556111ce8282612db2565b604080516001600160a01b0384168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a15050565b60155460609081908067ffffffffffffffff81111561123557611235613e91565b60405190808252806020026020018201604052801561126857816020015b60608152602001906001900390816112535790505b5092508067ffffffffffffffff81111561128457611284613e91565b6040519080825280602002602001820160405280156112b757816020015b60608152602001906001900390816112a25790505b50915060005b8181101561146157601581815481106112d8576112d861489b565b906000526020600020906002020160000180546112f4906148b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611320906148b1565b801561136d5780601f106113425761010080835404028352916020019161136d565b820191906000526020600020905b81548152906001019060200180831161135057829003601f168201915b50505050508482815181106113845761138461489b565b6020026020010181905250601581815481106113a2576113a261489b565b906000526020600020906002020160010180546113be906148b1565b80601f01602080910402602001604051908101604052809291908181526020018280546113ea906148b1565b80156114375780601f1061140c57610100808354040283529160200191611437565b820191906000526020600020905b81548152906001019060200180831161141a57829003601f168201915b505050505083828151811061144e5761144e61489b565b60209081029190910101526001016112bd565b50509091565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046bffffffffffffffffffffffff169282019290925282916114e65750604080518082019091526000546001600160a01b0381168252600160a01b90046bffffffffffffffffffffffff1660208201525b60208101516000906127109061150a906bffffffffffffffffffffffff1687614845565b611514919061485c565b91519350909150505b9250929050565b6001600160a01b0385163314806115405750611540853361086a565b6115b25760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610aa4565b6115bf85858585856129f9565b5050505050565b6001600160a01b03811660009081526009602052604090205461163a5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610aa4565b60006116468383611c04565b9050806000036116ac5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610aa4565b6001600160a01b0383166000908152600c6020526040812080548392906116d4908490614aa4565b90915550506001600160a01b038084166000908152600d6020908152604080832093861683529290522080548201905561170f838383612ed0565b604080516001600160a01b038481168252602082018490528516917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a2505050565b606081518351146117d35760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610aa4565b6000835167ffffffffffffffff8111156117ef576117ef613e91565b604051908082528060200260200182016040528015611818578160200160208202803683370190505b50905060005b84518110156118905761186385828151811061183c5761183c61489b565b60200260200101518583815181106118565761185661489b565b6020026020010151610a2a565b8282815181106118755761187561489b565b602090810291909101015261188981614ab7565b905061181e565b509392505050565b6118a061292d565b6118aa6000612f50565b565b8281146118cc5760405163a9854bc960e01b815260040160405180910390fd5b600e546001600160a01b031633148015906118e8575060145442105b1561191f576040517fac3d4d3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061192a610987565b905060005b83811015611a2b578484828181106119495761194961489b565b905060200201358361195b9190614aa4565b925060168787838181106119715761197161489b565b90506020020135815481106119885761198861489b565b9060005260206000209060040201600301548585838181106119ac576119ac61489b565b905060200201356119e18989858181106119c8576119c861489b565b9050602002013560009081526005602052604090205490565b6119eb9190614aa4565b1115611a23576040517fb36c128400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60010161192f565b50611a368183614845565b341015611a6f576040517f0772327b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611aeb8787878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a925089918291850190849080828437600092018290525060408051602081019091529081529250612fba915050565b866001600160a01b03167f5e69dace42908bf940c680c4fd1884a926e1e39b2c2a350d9a0b96eeed5d32a687878787604051611b2a9493929190614b1b565b60405180910390a250505050505050565b600060168281548110611b5057611b5061489b565b9060005260206000209060040201600301549050919050565b6000600b8281548110611b7e57611b7e61489b565b6000918252602090912001546001600160a01b031692915050565b611ba43383836131ac565b5050565b600080611bb460085490565b611bbe9047614aa4565b9050611be98382611be4866001600160a01b03166000908152600a602052604090205490565b6132a0565b9392505050565b611bf861292d565b611c01816132de565b50565b6001600160a01b0382166000908152600c602052604081205481906040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca09190614b42565b611caa9190614aa4565b6001600160a01b038086166000908152600d6020908152604080832093881683529290522054909150611ce090849083906132a0565b949350505050565b606080606080606080606080600060168054905090508067ffffffffffffffff811115611d1757611d17613e91565b604051908082528060200260200182016040528015611d40578160200160208202803683370190505b5098508067ffffffffffffffff811115611d5c57611d5c613e91565b604051908082528060200260200182016040528015611d8f57816020015b6060815260200190600190039081611d7a5790505b5097508067ffffffffffffffff811115611dab57611dab613e91565b604051908082528060200260200182016040528015611dde57816020015b6060815260200190600190039081611dc95790505b5096508067ffffffffffffffff811115611dfa57611dfa613e91565b604051908082528060200260200182016040528015611e23578160200160208202803683370190505b5095508067ffffffffffffffff811115611e3f57611e3f613e91565b604051908082528060200260200182016040528015611e7257816020015b6060815260200190600190039081611e5d5790505b5094508067ffffffffffffffff811115611e8e57611e8e613e91565b604051908082528060200260200182016040528015611ec157816020015b6060815260200190600190039081611eac5790505b5093508067ffffffffffffffff811115611edd57611edd613e91565b604051908082528060200260200182016040528015611f06578160200160208202803683370190505b5092508067ffffffffffffffff811115611f2257611f22613e91565b604051908082528060200260200182016040528015611f4b578160200160208202803683370190505b50915060005b818110156123a957808a8281518110611f6c57611f6c61489b565b60200260200101818152505060168181548110611f8b57611f8b61489b565b90600052602060002090600402016000018054611fa7906148b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd3906148b1565b80156120205780601f10611ff557610100808354040283529160200191612020565b820191906000526020600020905b81548152906001019060200180831161200357829003601f168201915b50505050508982815181106120375761203761489b565b6020026020010181905250601681815481106120555761205561489b565b90600052602060002090600402016001018054612071906148b1565b80601f016020809104026020016040519081016040528092919081815260200182805461209d906148b1565b80156120ea5780601f106120bf576101008083540402835291602001916120ea565b820191906000526020600020905b8154815290600101906020018083116120cd57829003601f168201915b50505050508882815181106121015761210161489b565b60200260200101819052506016818154811061211f5761211f61489b565b9060005260206000209060040201600201548782815181106121435761214361489b565b6020026020010181815250506015601682815481106121645761216461489b565b906000526020600020906004020160020154815481106121865761218661489b565b906000526020600020906002020160000180546121a2906148b1565b80601f01602080910402602001604051908101604052809291908181526020018280546121ce906148b1565b801561221b5780601f106121f05761010080835404028352916020019161221b565b820191906000526020600020905b8154815290600101906020018083116121fe57829003601f168201915b50505050508682815181106122325761223261489b565b60200260200101819052506015601682815481106122525761225261489b565b906000526020600020906004020160020154815481106122745761227461489b565b90600052602060002090600202016001018054612290906148b1565b80601f01602080910402602001604051908101604052809291908181526020018280546122bc906148b1565b80156123095780601f106122de57610100808354040283529160200191612309565b820191906000526020600020905b8154815290600101906020018083116122ec57829003601f168201915b50505050508582815181106123205761232061489b565b60200260200101819052506123418160009081526005602052604090205490565b8482815181106123535761235361489b565b602002602001018181525050601681815481106123725761237261489b565b9060005260206000209060040201600301548382815181106123965761239661489b565b6020908102919091010152600101611f51565b50509091929394959697565b6001600160a01b0385163314806123d157506123d1853361086a565b6124435760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610aa4565b6115bf85858585856132ea565b61245861292d565b6001600160a01b0381166124d45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610aa4565b611c0181612f50565b6060806060806016805490508510612508576040516307ed98ed60e31b815260040160405180910390fd5b6016858154811061251b5761251b61489b565b90600052602060002090600402016000018054612537906148b1565b80601f0160208091040260200160405190810160405280929190818152602001828054612563906148b1565b80156125b05780601f10612585576101008083540402835291602001916125b0565b820191906000526020600020905b81548152906001019060200180831161259357829003601f168201915b50505050509350601685815481106125ca576125ca61489b565b906000526020600020906004020160010180546125e6906148b1565b80601f0160208091040260200160405190810160405280929190818152602001828054612612906148b1565b801561265f5780601f106126345761010080835404028352916020019161265f565b820191906000526020600020905b81548152906001019060200180831161264257829003601f168201915b5050505050925060156016868154811061267b5761267b61489b565b9060005260206000209060040201600201548154811061269d5761269d61489b565b906000526020600020906002020160000180546126b9906148b1565b80601f01602080910402602001604051908101604052809291908181526020018280546126e5906148b1565b80156127325780601f1061270757610100808354040283529160200191612732565b820191906000526020600020905b81548152906001019060200180831161271557829003601f168201915b5050505050915060156016868154811061274e5761274e61489b565b906000526020600020906004020160020154815481106127705761277061489b565b9060005260206000209060020201600101805461278c906148b1565b80601f01602080910402602001604051908101604052809291908181526020018280546127b8906148b1565b80156128055780601f106127da57610100808354040283529160200191612805565b820191906000526020600020905b8154815290600101906020018083116127e857829003601f168201915b505050505090509193509193565b61281b61292d565b600e60009054906101000a90046001600160a01b03166001600160a01b031663cf3090126040518163ffffffff1660e01b8152600401602060405180830381865afa15801561286e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612892919061487e565b6128c8576040517f1834e26500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848410806128d557508282115b806128df57508481105b15612916576040517f2156216000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601094909455601192909255601255601355601455565b6006546001600160a01b031633146118aa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa4565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806129ea57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b80610ad25750610ad2826134a7565b8151835114612a5b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610aa4565b6001600160a01b038416612abf5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610aa4565b33612ace81878787878761350e565b60005b8451811015612bfa576000858281518110612aee57612aee61489b565b602002602001015190506000858381518110612b0c57612b0c61489b565b60209081029190910181015160008481526002835260408082206001600160a01b038e168352909352919091205490915081811015612ba05760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610aa4565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612bdf908490614aa4565b9250508190555050505080612bf390614ab7565b9050612ad1565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612c4a929190614b5b565b60405180910390a4612c6081878787878761351c565b505050505050565b606060048054612c77906148b1565b80601f0160208091040260200160405190810160405280929190818152602001828054612ca3906148b1565b8015612cf05780601f10612cc557610100808354040283529160200191612cf0565b820191906000526020600020905b815481529060010190602001808311612cd357829003601f168201915b50505050509050919050565b6060610ad26001600160a01b03831660146136ca565b60606000612d1f836138ab565b600101905060008167ffffffffffffffff811115612d3f57612d3f613e91565b6040519080825280601f01601f191660200182016040528015612d69576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084612d7357509392505050565b80471015612e025760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610aa4565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e4f576040519150601f19603f3d011682016040523d82523d6000602084013e612e54565b606091505b5050905080612ecb5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610aa4565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612ecb90849061398d565b600680546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166130365760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610aa4565b81518351146130985760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610aa4565b336130a88160008787878761350e565b60005b8451811015613144578381815181106130c6576130c661489b565b6020026020010151600260008784815181106130e4576130e461489b565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461312c9190614aa4565b9091555081905061313c81614ab7565b9150506130ab565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051613195929190614b5b565b60405180910390a46115bf8160008787878761351c565b816001600160a01b0316836001600160a01b0316036132335760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610aa4565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6007546001600160a01b038416600090815260096020526040812054909183916132ca9086614845565b6132d4919061485c565b611ce09190614832565b6004611ba48282614931565b6001600160a01b03841661334e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610aa4565b33600061335a85613a72565b9050600061336785613a72565b905061337783898985858961350e565b60008681526002602090815260408083206001600160a01b038c168452909152902054858110156133fd5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610aa4565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061343c908490614aa4565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461349c848a8a8a8a8a613abd565b505050505050505050565b60006001600160e01b031982167f2a55205a000000000000000000000000000000000000000000000000000000001480610ad257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610ad2565b612c60868686868686613bb9565b6001600160a01b0384163b15612c605760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906135609089908990889088908890600401614b80565b6020604051808303816000875af192505050801561359b575060408051601f3d908101601f1916820190925261359891810190614bde565b60015b613650576135a7614bfb565b806308c379a0036135e057506135bb614c16565b806135c657506135e2565b8060405162461bcd60e51b8152600401610aa49190614248565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610aa4565b6001600160e01b0319811663bc197c8160e01b146136c15760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610aa4565b50505050505050565b606060006136d9836002614845565b6136e4906002614aa4565b67ffffffffffffffff8111156136fc576136fc613e91565b6040519080825280601f01601f191660200182016040528015613726576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061375d5761375d61489b565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106137a8576137a861489b565b60200101906001600160f81b031916908160001a90535060006137cc846002614845565b6137d7906001614aa4565b90505b600181111561385c577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106138185761381861489b565b1a60f81b82828151811061382e5761382e61489b565b60200101906001600160f81b031916908160001a90535060049490941c9361385581614ca0565b90506137da565b508315611be95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610aa4565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106138f4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310613920576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061393e57662386f26fc10000830492506010015b6305f5e1008310613956576305f5e100830492506008015b612710831061396a57612710830492506004015b6064831061397c576064830492506002015b600a8310610ad25760010192915050565b60006139e2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d479092919063ffffffff16565b805190915015612ecb5780806020019051810190613a00919061487e565b612ecb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610aa4565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110613aac57613aac61489b565b602090810291909101015292915050565b6001600160a01b0384163b15612c605760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190613b019089908990889088908890600401614cb7565b6020604051808303816000875af1925050508015613b3c575060408051601f3d908101601f19168201909252613b3991810190614bde565b60015b613b48576135a7614bfb565b6001600160e01b0319811663f23a6e6160e01b146136c15760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610aa4565b6001600160a01b038516613c405760005b8351811015613c3e57828181518110613be557613be561489b565b602002602001015160056000868481518110613c0357613c0361489b565b602002602001015181526020019081526020016000206000828254613c289190614aa4565b90915550613c37905081614ab7565b9050613bca565b505b6001600160a01b038416612c605760005b83518110156136c1576000848281518110613c6e57613c6e61489b565b602002602001015190506000848381518110613c8c57613c8c61489b565b6020026020010151905060006005600084815260200190815260200160002054905081811015613d245760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610aa4565b60009283526005602052604090922091039055613d4081614ab7565b9050613c51565b6060611ce0848460008585600080866001600160a01b03168587604051613d6e9190614cef565b60006040518083038185875af1925050503d8060008114613dab576040519150601f19603f3d011682016040523d82523d6000602084013e613db0565b606091505b5091509150613dc187838387613dcc565b979650505050505050565b60608315613e3b578251600003613e34576001600160a01b0385163b613e345760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aa4565b5081611ce0565b611ce083838151156135c65781518083602001fd5b6001600160a01b0381168114611c0157600080fd5b60008060408385031215613e7857600080fd5b8235613e8381613e50565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715613ecd57613ecd613e91565b6040525050565b600067ffffffffffffffff821115613eee57613eee613e91565b5060051b60200190565b600082601f830112613f0957600080fd5b813567ffffffffffffffff811115613f2357613f23613e91565b604051613f3a601f8301601f191660200182613ea7565b818152846020838601011115613f4f57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613f7d57600080fd5b81356020613f8a82613ed4565b604051613f978282613ea7565b83815260059390931b8501820192828101915086841115613fb757600080fd5b8286015b84811015613ff757803567ffffffffffffffff811115613fdb5760008081fd5b613fe98986838b0101613ef8565b845250918301918301613fbb565b509695505050505050565b60008083601f84011261401457600080fd5b50813567ffffffffffffffff81111561402c57600080fd5b6020830191508360208260051b850101111561151d57600080fd5b60008060008060008060008060008060c08b8d03121561406657600080fd5b8a3567ffffffffffffffff8082111561407e57600080fd5b61408a8e838f01613f6c565b9b5060208d01359150808211156140a057600080fd5b6140ac8e838f01613f6c565b9a5060408d01359150808211156140c257600080fd5b6140ce8e838f01614002565b909a50985060608d01359150808211156140e757600080fd5b6140f38e838f01614002565b909850965060808d013591508082111561410c57600080fd5b6141188e838f01614002565b909650945060a08d013591508082111561413157600080fd5b5061413e8d828e01614002565b915080935050809150509295989b9194979a5092959850565b6001600160e01b031981168114611c0157600080fd5b60006020828403121561417f57600080fd5b8135611be981614157565b60008060006040848603121561419f57600080fd5b83356141aa81613e50565b9250602084013567ffffffffffffffff8111156141c657600080fd5b6141d286828701614002565b9497909650939450505050565b6000602082840312156141f157600080fd5b5035919050565b60005b838110156142135781810151838201526020016141fb565b50506000910152565b600081518084526142348160208601602086016141f8565b601f01601f19169290920160200192915050565b602081526000611be9602083018461421c565b60006020828403121561426d57600080fd5b8135611be981613e50565b600082825180855260208086019550808260051b84010181860160005b848110156142c357601f198684030189526142b183835161421c565b98840198925090830190600101614295565b5090979650505050505050565b6040815260006142e36040830185614278565b82810360208401526142f58185614278565b95945050505050565b6000806040838503121561431157600080fd5b50508035926020909101359150565b600082601f83011261433157600080fd5b8135602061433e82613ed4565b60405161434b8282613ea7565b83815260059390931b850182019282810191508684111561436b57600080fd5b8286015b84811015613ff7578035835291830191830161436f565b600080600080600060a0868803121561439e57600080fd5b85356143a981613e50565b945060208601356143b981613e50565b9350604086013567ffffffffffffffff808211156143d657600080fd5b6143e289838a01614320565b945060608801359150808211156143f857600080fd5b61440489838a01614320565b9350608088013591508082111561441a57600080fd5b5061442788828901613ef8565b9150509295509295909350565b6000806040838503121561444757600080fd5b823561445281613e50565b9150602083013561446281613e50565b809150509250929050565b6000806040838503121561448057600080fd5b823567ffffffffffffffff8082111561449857600080fd5b818501915085601f8301126144ac57600080fd5b813560206144b982613ed4565b6040516144c68282613ea7565b83815260059390931b85018201928281019150898411156144e657600080fd5b948201945b8386101561450d5785356144fe81613e50565b825294820194908201906144eb565b9650508601359250508082111561452357600080fd5b5061453085828601614320565b9150509250929050565b600081518084526020808501945080840160005b8381101561456a5781518752958201959082019060010161454e565b509495945050505050565b602081526000611be9602083018461453a565b6000806000806000606086880312156145a057600080fd5b85356145ab81613e50565b9450602086013567ffffffffffffffff808211156145c857600080fd5b6145d489838a01614002565b909650945060408801359150808211156145ed57600080fd5b506145fa88828901614002565b969995985093965092949392505050565b8015158114611c0157600080fd5b6000806040838503121561462c57600080fd5b823561463781613e50565b915060208301356144628161460b565b60006020828403121561465957600080fd5b813567ffffffffffffffff81111561467057600080fd5b611ce084828501613ef8565b60006101008083526146908184018c61453a565b905082810360208401526146a4818b614278565b905082810360408401526146b8818a614278565b905082810360608401526146cc818961453a565b905082810360808401526146e08188614278565b905082810360a08401526146f48187614278565b905082810360c0840152614708818661453a565b905082810360e084015261471c818561453a565b9b9a5050505050505050505050565b600080600080600060a0868803121561474357600080fd5b853561474e81613e50565b9450602086013561475e81613e50565b93506040860135925060608601359150608086013567ffffffffffffffff81111561478857600080fd5b61442788828901613ef8565b6080815260006147a7608083018761421c565b82810360208401526147b9818761421c565b905082810360408401526147cd818661421c565b90508281036060840152613dc1818561421c565b600080600080600060a086880312156147f957600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ad257610ad261481c565b8082028115828204841417610ad257610ad261481c565b60008261487957634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561489057600080fd5b8151611be98161460b565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806148c557607f821691505b6020821081036148e557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115612ecb57600081815260208120601f850160051c810160208610156149125750805b601f850160051c820191505b81811015612c605782815560010161491e565b815167ffffffffffffffff81111561494b5761494b613e91565b61495f8161495984546148b1565b846148eb565b602080601f831160018114614994576000841561497c5750858301515b600019600386901b1c1916600185901b178555612c60565b600085815260208120601f198616915b828110156149c3578886015182559484019460019091019084016149a4565b50858210156149e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808335601e19843603018112614a0857600080fd5b83018035915067ffffffffffffffff821115614a2357600080fd5b60200191503681900382131561151d57600080fd5b60008451614a4a8184602089016141f8565b845190830190614a5e8183602089016141f8565b7f2f0000000000000000000000000000000000000000000000000000000000000091019081528351614a978160018401602088016141f8565b0160010195945050505050565b80820180821115610ad257610ad261481c565b600060018201614ac957614ac961481c565b5060010190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614b0257600080fd5b8260051b80836020870137939093016020019392505050565b604081526000614b2f604083018688614ad0565b8281036020840152613dc1818587614ad0565b600060208284031215614b5457600080fd5b5051919050565b604081526000614b6e604083018561453a565b82810360208401526142f5818561453a565b60006001600160a01b03808816835280871660208401525060a06040830152614bac60a083018661453a565b8281036060840152614bbe818661453a565b90508281036080840152614bd2818561421c565b98975050505050505050565b600060208284031215614bf057600080fd5b8151611be981614157565b600060033d1115610a275760046000803e5060005160e01c90565b600060443d1015614c245790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715614c5457505050505090565b8285019150815181811115614c6c5750505050505090565b843d8701016020828501011115614c865750505050505090565b614c9560208286010187613ea7565b509095945050505050565b600081614caf57614caf61481c565b506000190190565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613dc160a083018461421c565b60008251614d018184602087016141f8565b919091019291505056fea2646970667358221220d0910c425fb5e828511c20df45aeb876d0991efc057e999db60f5d11338aff8964736f6c63430008130033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "buyTraits(address,uint256[],uint256[])": {
        "params": {
          "_recipient": "the address to receive the trait tokens",
          "_traitAmounts": "the amounts of each token ID to buy",
          "_traitTokenIds": "the trait token IDs to buy"
        }
      },
      "createTraitsAndTypes(string[],string[],string[],string[],uint256[],uint256[])": {
        "params": {
          "_traitMaxSupplys": "maximum number of mints for each trait",
          "_traitNames": "human readable trait names",
          "_traitTypeIndexes": "trait type indexes each trait belongs to",
          "_traitTypeNames": "human readable trait type names",
          "_traitTypeValues": "trait type values used in the generative scripts",
          "_traitValues": "trait values used in the generative scripts"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "maxSupply(uint256)": {
        "returns": {
          "_maxSupply": "the max supply of the token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "releasable(address)": {
        "details": "Getter for the amount of payee's releasable Ether."
      },
      "releasable(address,address)": {
        "details": "Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an IERC20 contract."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "scheduleAuction(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_auctionEndPrice": "trait price the auction ends at",
          "_auctionEndTime": "timestamp the auction ends at",
          "_auctionStartPrice": "trait price the auction begins at",
          "_auctionStartTime": "timestamp the auction begins at",
          "_traitsSaleStartTime": "timestamp at which traits can be bought individually"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "the interface ID to check"
        },
        "returns": {
          "_0": "bool True if the interface is supported, otherwise False"
        }
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "trait(uint256)": {
        "params": {
          "_tokenId": "token ID to get info about"
        },
        "returns": {
          "_traitName": "human readable trait name",
          "_traitTypeName": "human readable trait type name",
          "_traitTypeValue": "trait type value used in the generative script",
          "_traitValue": "trait type value used in the generative script"
        }
      },
      "traitPrice()": {
        "returns": {
          "_price": "the current trait price in ether"
        }
      },
      "traitTypes()": {
        "returns": {
          "_traitTypeNames": "human readable trait type names",
          "_traitTypeValues": "trait type values used in the generative script"
        }
      },
      "traits()": {
        "returns": {
          "_traitMaxSupplys": "max supply of each trait",
          "_traitNames": "human readable trait names",
          "_traitTokenIds": "token IDs of the traits",
          "_traitTotalSupplys": "total supply of each trait",
          "_traitTypeIndexes": "trait type index each trait belongs to",
          "_traitTypeNames": "human readable trait type names",
          "_traitTypeValues": "trait type values used in the generative script",
          "_traitValues": "trait type values used in the generative script"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferTraitsToCreateArtwork(address,uint256[])": {
        "params": {
          "_caller": "the address creating the artwork",
          "_traitTokenIds": "the trait token IDs used to create the artwork"
        }
      },
      "updateURI(string)": {
        "params": {
          "_uri": "the new base URI string"
        }
      },
      "uri(uint256)": {
        "params": {
          "_tokenId": "the token ID to get the URI for"
        },
        "returns": {
          "_0": "string the token specific URI"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyTraits(address,uint256[],uint256[])": {
        "notice": "Allows a user to buy any number of traits and amounts using ether"
      },
      "createTraitsAndTypes(string[],string[],string[],string[],uint256[],uint256[])": {
        "notice": "Sets up the traits and trait types"
      },
      "maxSupply(uint256)": {
        "notice": "Returns the max supply of the specified token ID"
      },
      "scheduleAuction(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Schedules the dutch auction start and end time, and the prices the traits will start and end the auction at"
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns whether the specified interface ID is supported by the contract"
      },
      "trait(uint256)": {
        "notice": "Returns info about an individual trait"
      },
      "traitPrice()": {
        "notice": "Returns the current trait price"
      },
      "traitTypes()": {
        "notice": "Returns the trait types"
      },
      "traits()": {
        "notice": "Returns info about all traits"
      },
      "transferTraitsToCreateArtwork(address,uint256[])": {
        "notice": "Called by the Artwork contract to transfer traits from the caller to the Artwork contract to create a new Artwork token"
      },
      "updateURI(string)": {
        "notice": "Updates the base URI string used to get full token URIs"
      },
      "uri(uint256)": {
        "notice": "Returns the URI of the specified token ID"
      }
    },
    "notice": "Implements ERC-1155 standard for trait tokens, and provides Dutch Auction functionality for initial trait sales",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3765,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)3762_storage"
      },
      {
        "astId": 3770,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)3762_storage)"
      },
      {
        "astId": 630,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 636,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 638,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_uri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2000,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 149,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_totalShares",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 151,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 155,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_shares",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 159,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_released",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 162,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_payees",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 167,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_contract(IERC20)2325,t_uint256)"
      },
      {
        "astId": 174,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_contract(IERC20)2325,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6312,
        "contract": "contracts/Traits.sol:Traits",
        "label": "artwork",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IArtwork)7436"
      },
      {
        "astId": 6314,
        "contract": "contracts/Traits.sol:Traits",
        "label": "royaltySplitter",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 6319,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionStartTime",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6321,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionEndTime",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 6323,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionStartPrice",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 6325,
        "contract": "contracts/Traits.sol:Traits",
        "label": "auctionEndPrice",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 6327,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traitsSaleStartTime",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 6331,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_traitTypes",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_struct(TraitType)7495_storage)dyn_storage"
      },
      {
        "astId": 6335,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_traits",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_struct(Trait)7504_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Trait)7504_storage)dyn_storage": {
        "base": "t_struct(Trait)7504_storage",
        "encoding": "dynamic_array",
        "label": "struct ITraits.Trait[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TraitType)7495_storage)dyn_storage": {
        "base": "t_struct(TraitType)7495_storage",
        "encoding": "dynamic_array",
        "label": "struct ITraits.TraitType[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IArtwork)7436": {
        "encoding": "inplace",
        "label": "contract IArtwork",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2325": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)2325,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)2325",
        "label": "mapping(contract IERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)2325,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)2325",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)3762_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)3762_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)3762_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 3759,
            "contract": "contracts/Traits.sol:Traits",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3761,
            "contract": "contracts/Traits.sol:Traits",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Trait)7504_storage": {
        "encoding": "inplace",
        "label": "struct ITraits.Trait",
        "members": [
          {
            "astId": 7497,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7499,
            "contract": "contracts/Traits.sol:Traits",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7501,
            "contract": "contracts/Traits.sol:Traits",
            "label": "typeIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7503,
            "contract": "contracts/Traits.sol:Traits",
            "label": "maxSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TraitType)7495_storage": {
        "encoding": "inplace",
        "label": "struct ITraits.TraitType",
        "members": [
          {
            "astId": 7492,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7494,
            "contract": "contracts/Traits.sol:Traits",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}