{
  "address": "0x380392BFf5D75C69241D9003de5780844fA462B6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "studio",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "TraitCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitMaxSupplys",
          "type": "uint256[]"
        }
      ],
      "name": "createTraitsAndTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTraitName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTraitTypeName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTraitTypeValue",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTraitValue",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTraits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitValues",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTypeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_traitTypeValues",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_studio",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "studio",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "traits",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "typeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "transferTraitsToCreateArtwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_traitTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "transferTraitsToDecomposeArtwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c365f9de5272fa43e1013c4bfc9350fbd4b8230b9cf8b667d3fb41d28118bec",
  "receipt": {
    "to": null,
    "from": "0x7930DdA80157Fcc47ba9c3836398c82d89C16416",
    "contractAddress": "0x380392BFf5D75C69241D9003de5780844fA462B6",
    "transactionIndex": 14,
    "gasUsed": "3200607",
    "logsBloom": "0x
    "blockHash": "0x3a315ba516eed058192647c9d0bc7c02259c91057f0f01e34a5e3b7f72b4edc3",
    "transactionHash": "0x4c365f9de5272fa43e1013c4bfc9350fbd4b8230b9cf8b667d3fb41d28118bec",
    "logs": [],
    "blockNumber": 8371142,
    "cumulativeGasUsed": "4658929",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dfe4aee3f2e02e5eca8926ae7cf6d3d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"studio\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TraitCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitMaxSupplys\",\"type\":\"uint256[]\"}],\"name\":\"createTraitsAndTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitTypeName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitTypeValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitValues\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTypeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_traitTypeValues\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_studio\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"studio\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"typeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferTraitsToCreateArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_traitTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferTraitsToDecomposeArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Traits.sol\":\"Traits\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x00a36a453484b7145a0d4a0c64daea248a7e806e6be4d7bbae1032a328777c82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xce2d5b25063e871aeca913786040a56117d16f01a819fbdc0b726128b6cbe25a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb04849e624ffff85de1ee3d541aaa058ed9323a26200e34dd443fc46a642ba56\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/ITraits.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract Traits is ERC1155Upgradeable, ERC1155BurnableUpgradeable, ERC1155SupplyUpgradeable {\\r\\n    event TraitCreated(\\r\\n        address indexed studio,\\r\\n        string indexed name,\\r\\n        string indexed value\\r\\n    );\\r\\n\\r\\n    struct Trait {\\r\\n        string name;\\r\\n        string value;\\r\\n        uint256 typeIndex;\\r\\n        uint256 maxSupply;\\r\\n    }\\r\\n\\r\\n    address public studio;\\r\\n    uint256 public nextTokenId = 1;\\r\\n    uint256 traitTypesLength;\\r\\n    // todo: move these into a struct array\\r\\n    string[] traitTypeNames;\\r\\n    string[] traitTypeValues;\\r\\n    mapping(uint256 => Trait) public traits;\\r\\n\\r\\n    modifier onlyStudio() {\\r\\n        require(msg.sender == studio, \\\"Only the studio can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(address _studio, string memory _uri) external initializer {\\r\\n      __ERC1155_init(_uri);\\r\\n      studio = _studio;\\r\\n    }\\r\\n\\r\\n    function createTrait(\\r\\n        string calldata _name,\\r\\n        string calldata _value,\\r\\n        uint256 _typeIndex,\\r\\n        uint256 _maxSupply\\r\\n    ) private returns (uint256 tokenId) {\\r\\n        tokenId = nextTokenId;\\r\\n        nextTokenId++;\\r\\n\\r\\n        traits[tokenId].name = _name;\\r\\n        traits[tokenId].value = _value;\\r\\n        traits[tokenId].typeIndex = _typeIndex;\\r\\n        traits[tokenId].maxSupply = _maxSupply;\\r\\n    }\\r\\n\\r\\n    function createTraitsAndTypes(\\r\\n        string[] memory _traitTypeNames,\\r\\n        string[] memory _traitTypeValues,\\r\\n        string[] calldata _traitNames,\\r\\n        string[] calldata _traitValues,\\r\\n        uint256[] calldata _traitTypeIndexes,\\r\\n        uint256[] calldata _traitMaxSupplys\\r\\n    ) external onlyStudio {\\r\\n        require(_traitTypeNames.length == _traitTypeValues.length, \\\"E02\\\");\\r\\n\\r\\n        require(_traitNames.length == _traitValues.length, \\\"E02\\\");\\r\\n        require(_traitNames.length == _traitTypeIndexes.length, \\\"E02\\\");\\r\\n        require(_traitNames.length == _traitMaxSupplys.length, \\\"E02\\\");\\r\\n\\r\\n        traitTypeNames = _traitTypeNames;\\r\\n        traitTypeValues = _traitTypeValues;\\r\\n\\r\\n        // Loop through traits\\r\\n        for (uint256 i; i < _traitNames.length; i++) {\\r\\n            createTrait(\\r\\n                _traitNames[i],\\r\\n                _traitValues[i],\\r\\n                _traitTypeIndexes[i],\\r\\n                _traitMaxSupplys[i]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintBatch(\\r\\n        address _to,\\r\\n        uint256[] memory _tokenIds,\\r\\n        uint256[] memory _amounts\\r\\n    ) external onlyStudio {\\r\\n        for (uint256 i; i < _tokenIds.length; i++) {\\r\\n            require(\\r\\n                totalSupply(_tokenIds[i]) + _amounts[i] <= traits[_tokenIds[i]].maxSupply,\\r\\n                \\\"Trait max supply reached\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _mintBatch(_to, _tokenIds, _amounts, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function transferTraitsToCreateArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external onlyStudio {\\r\\n        require(\\r\\n            _traitTokenIds.length == traitTypeNames.length,\\r\\n            \\\"Incorrect number of traits specified\\\"\\r\\n        );\\r\\n\\r\\n        uint256[] memory amounts = new uint256[](_traitTokenIds.length);\\r\\n        for (uint256 i; i < _traitTokenIds.length; i++) {\\r\\n            require(\\r\\n                traits[_traitTokenIds[i]].typeIndex == i,\\r\\n                \\\"Invalid trait token IDs\\\"\\r\\n            );\\r\\n            amounts[i] = 1;\\r\\n        }\\r\\n\\r\\n        // Transfer the traits from the caller to the Studio contract\\r\\n        _safeBatchTransferFrom(\\r\\n            _caller,\\r\\n            address(studio),\\r\\n            _traitTokenIds,\\r\\n            amounts,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferTraitsToDecomposeArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external onlyStudio {\\r\\n        require(\\r\\n            _traitTokenIds.length == traitTypeNames.length,\\r\\n            \\\"Incorrect number of traits specified\\\"\\r\\n        );\\r\\n\\r\\n        uint256[] memory amounts = new uint256[](_traitTokenIds.length);\\r\\n        for (uint256 i; i < _traitTokenIds.length; i++) {\\r\\n            require(\\r\\n                traits[_traitTokenIds[i]].typeIndex == i,\\r\\n                \\\"Invalid trait token IDs\\\"\\r\\n            );\\r\\n            amounts[i] = 1;\\r\\n        }\\r\\n\\r\\n        // Transfer the traits from the Studio contract to the caller\\r\\n        _safeBatchTransferFrom(\\r\\n            address(studio),\\r\\n            _caller,\\r\\n            _traitTokenIds,\\r\\n            amounts,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    function getTraitName(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return traits[_tokenId].name;\\r\\n    }\\r\\n\\r\\n    function getTraitValue(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return traits[_tokenId].value;\\r\\n    }\\r\\n\\r\\n    function getTraitTypeName(uint256 _tokenId) public view returns (string memory) {\\r\\n      return traitTypeNames[traits[_tokenId].typeIndex];\\r\\n    }\\r\\n\\r\\n    function getTraitTypeValue(uint256 _tokenId) public view returns (string memory) {\\r\\n      return traitTypeValues[traits[_tokenId].typeIndex];\\r\\n    }\\r\\n\\r\\n    function getTraits()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            uint256[] memory _traitTypeIndexes,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        )\\r\\n    {\\r\\n        uint256 traitCount = nextTokenId - 1;\\r\\n        _traitTokenIds = new uint256[](traitCount);\\r\\n        _traitNames = new string[](traitCount);\\r\\n        _traitValues = new string[](traitCount);\\r\\n        _traitTypeIndexes = new uint256[](traitCount);\\r\\n        _traitTypeNames = new string[](traitCount);\\r\\n        _traitTypeValues = new string[](traitCount);\\r\\n\\r\\n        for (uint256 i = 0; i < traitCount; i++) {\\r\\n            _traitTokenIds[i] = i + 1;\\r\\n            _traitNames[i] = traits[i + 1].name;\\r\\n            _traitValues[i] = traits[i + 1].value;\\r\\n            _traitTypeIndexes[i] = traits[i + 1].typeIndex;\\r\\n            _traitTypeNames[i] = traitTypeNames[traits[i + 1].typeIndex];\\r\\n            _traitTypeValues[i] = traitTypeValues[traits[i + 1].typeIndex];\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x813b309489764ee85fbf899a1ab36be223b63d07db24fc80b3a13ba5066d8ae0\",\"license\":\"MIT\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITraits {\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function createTraitsAndTypes(\\r\\n        string[] memory _traitTypeNames,\\r\\n        string[] memory _traitTypeValues,\\r\\n        string[] calldata _traitNames,\\r\\n        string[] calldata _traitValues,\\r\\n        uint256[] calldata _traitTypeIndexes,\\r\\n        uint256[] calldata _traitMaxSupplys\\r\\n    ) external;\\r\\n\\r\\n    function mintBatch(\\r\\n        address _to,\\r\\n        uint256[] memory _tokenIds,\\r\\n        uint256[] memory _amounts\\r\\n    ) external;\\r\\n\\r\\n    function transferTraitsToCreateArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external;\\r\\n\\r\\n    function transferTraitsToDecomposeArtwork(\\r\\n        address _caller,\\r\\n        uint256[] calldata _traitTokenIds\\r\\n    ) external;\\r\\n\\r\\n    function getTraitName(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    function getTraitValue(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    function getTraitTypeName(uint256 _tokenId) external view returns (string memory);\\r\\n\\r\\n    function getTraitTypeValue(uint256 _tokenId) external view returns (string memory);\\r\\n\\r\\n    function getTraits()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory _traitTokenIds,\\r\\n            string[] memory _traitNames,\\r\\n            string[] memory _traitValues,\\r\\n            uint256[] memory _traitTypeIndexes,\\r\\n            string[] memory _traitTypeNames,\\r\\n            string[] memory _traitTypeValues\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x070d11f9b9a48bcd4b21a692ea177ae1c1e8c182991198d11a3e6cd24e621439\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160fc5534801561001557600080fd5b50613894806100256000396000f3fe608060405234801561001057600080fd5b50600436106101a25760003560e01c806375794a3c116100ee578063d81d0a1511610097578063e985e9c511610071578063e985e9c5146103b6578063f242432a146103f2578063f399e22e14610405578063f5298aca1461041857600080fd5b8063d81d0a151461037d578063db895c3914610390578063e16f9c3d146103a357600080fd5b8063bd85b039116100c8578063bd85b0391461031f578063ca7ee8a01461033f578063d10f99cb1461036a57600080fd5b806375794a3c146102e95780637f0429ef146102f2578063a22cb4651461030c57600080fd5b80632eb2c2d6116101505780635044651d1161012a5780635044651d146102b05780635b2a8efa146102c35780636b20c454146102d657600080fd5b80632eb2c2d61461025b5780634e1273f41461026e5780634f558e791461028e57600080fd5b806302afd1a11161018157806302afd1a1146102055780630e89341c146102185780632d72225b1461023857600080fd5b8062fdd58e146101a757806301c8aa4b146101cd57806301ffc9a7146101e2575b600080fd5b6101ba6101b5366004612b2c565b61042b565b6040519081526020015b60405180910390f35b6101e06101db366004612d13565b6104d9565b005b6101f56101f0366004612e39565b6106ed565b60405190151581526020016101c4565b6101e0610213366004612e5d565b610788565b61022b610226366004612eb0565b6109b9565b6040516101c49190612f0f565b61024b610246366004612eb0565b610a4d565b6040516101c49493929190612f22565b6101e0610269366004612fc1565b610b86565b61028161027c36600461306b565b610c28565b6040516101c49190613171565b6101f561029c366004612eb0565b600090815260c96020526040902054151590565b6101e06102be366004612e5d565b610d66565b61022b6102d1366004612eb0565b610f88565b6101e06102e4366004613184565b610fc6565b6101ba60fc5481565b6102fa611050565b6040516101c49695949392919061324d565b6101e061031a3660046132cf565b611617565b6101ba61032d366004612eb0565b600090815260c9602052604090205490565b60fb54610352906001600160a01b031681565b6040516001600160a01b0390911681526020016101c4565b61022b610378366004612eb0565b611626565b6101e061038b366004613184565b61164f565b61022b61039e366004612eb0565b6117c4565b61022b6103b1366004612eb0565b6117e5565b6101f56103c436600461330b565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6101e061040036600461333e565b611803565b6101e06104133660046133a3565b61188a565b6101e06104263660046133e7565b61198f565b60006001600160a01b0383166104ae5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60fb546001600160a01b031633146105425760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b88518a51146105795760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8685146105ae5760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8683146105e35760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8681146106185760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b895161062b9060fe9060208d0190612a53565b50885161063f9060ff9060208c0190612a53565b5060005b878110156106e0576106cd8989838181106106605761066061341a565b90506020028101906106729190613430565b8989858181106106845761068461341a565b90506020028101906106969190613430565b8989878181106106a8576106a861341a565b905060200201358888888181106106c1576106c161341a565b90506020020135611a14565b50806106d88161348d565b915050610643565b5050505050505050505050565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061075057506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806104d357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146104d3565b60fb546001600160a01b031633146107f15760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60fe54811461084e5760405162461bcd60e51b8152602060048201526024808201527f496e636f7272656374206e756d626572206f6620747261697473207370656369604482015263199a595960e21b60648201526084016104a5565b60008167ffffffffffffffff81111561086957610869612b56565b604051908082528060200260200182016040528015610892578160200160208202803683370190505b50905060005b8281101561094f578061010060008686858181106108b8576108b861341a565b905060200201358152602001908152602001600020600201541461091e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420747261697420746f6b656e2049447300000000000000000060448201526064016104a5565b60018282815181106109325761093261341a565b6020908102919091010152806109478161348d565b915050610898565b506109b38460fb60009054906101000a90046001600160a01b0316858580806020026020016040519081016040528093929190818152602001838360200280828437600092018290525060408051602081019091529081528893509150611a899050565b50505050565b6060606780546109c8906134a6565b80601f01602080910402602001604051908101604052809291908181526020018280546109f4906134a6565b8015610a415780601f10610a1657610100808354040283529160200191610a41565b820191906000526020600020905b815481529060010190602001808311610a2457829003601f168201915b50505050509050919050565b61010060205260009081526040902080548190610a69906134a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a95906134a6565b8015610ae25780601f10610ab757610100808354040283529160200191610ae2565b820191906000526020600020905b815481529060010190602001808311610ac557829003601f168201915b505050505090806001018054610af7906134a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610b23906134a6565b8015610b705780601f10610b4557610100808354040283529160200191610b70565b820191906000526020600020905b815481529060010190602001808311610b5357829003601f168201915b5050505050908060020154908060030154905084565b6001600160a01b038516331480610ba25750610ba285336103c4565b610c145760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016104a5565b610c218585858585611a89565b5050505050565b60608151835114610ca15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016104a5565b6000835167ffffffffffffffff811115610cbd57610cbd612b56565b604051908082528060200260200182016040528015610ce6578160200160208202803683370190505b50905060005b8451811015610d5e57610d31858281518110610d0a57610d0a61341a565b6020026020010151858381518110610d2457610d2461341a565b602002602001015161042b565b828281518110610d4357610d4361341a565b6020908102919091010152610d578161348d565b9050610cec565b509392505050565b60fb546001600160a01b03163314610dcf5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60fe548114610e2c5760405162461bcd60e51b8152602060048201526024808201527f496e636f7272656374206e756d626572206f6620747261697473207370656369604482015263199a595960e21b60648201526084016104a5565b60008167ffffffffffffffff811115610e4757610e47612b56565b604051908082528060200260200182016040528015610e70578160200160208202803683370190505b50905060005b82811015610f2d57806101006000868685818110610e9657610e9661341a565b9050602002013581526020019081526020016000206002015414610efc5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420747261697420746f6b656e2049447300000000000000000060448201526064016104a5565b6001828281518110610f1057610f1061341a565b602090810291909101015280610f258161348d565b915050610e76565b5060fb5460408051602080860282810182019093528582526109b3936001600160a01b03169288929188918891829190850190849080828437600092018290525060408051602081019091529081528893509150611a899050565b6000818152610100602052604090206002015460ff8054606092908110610fb157610fb161341a565b9060005260206000200180546109c8906134a6565b6001600160a01b038316331480610fe25750610fe283336103c4565b6110405760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b61104b838383611cf8565b505050565b6060806060806060806000600160fc5461106a91906134e0565b90508067ffffffffffffffff81111561108557611085612b56565b6040519080825280602002602001820160405280156110ae578160200160208202803683370190505b5096508067ffffffffffffffff8111156110ca576110ca612b56565b6040519080825280602002602001820160405280156110fd57816020015b60608152602001906001900390816110e85790505b5095508067ffffffffffffffff81111561111957611119612b56565b60405190808252806020026020018201604052801561114c57816020015b60608152602001906001900390816111375790505b5094508067ffffffffffffffff81111561116857611168612b56565b604051908082528060200260200182016040528015611191578160200160208202803683370190505b5093508067ffffffffffffffff8111156111ad576111ad612b56565b6040519080825280602002602001820160405280156111e057816020015b60608152602001906001900390816111cb5790505b5092508067ffffffffffffffff8111156111fc576111fc612b56565b60405190808252806020026020018201604052801561122f57816020015b606081526020019060019003908161121a5790505b50915060005b8181101561160d576112488160016134f3565b88828151811061125a5761125a61341a565b602090810291909101015261010060006112758360016134f3565b81526020019081526020016000206000018054611291906134a6565b80601f01602080910402602001604051908101604052809291908181526020018280546112bd906134a6565b801561130a5780601f106112df5761010080835404028352916020019161130a565b820191906000526020600020905b8154815290600101906020018083116112ed57829003601f168201915b50505050508782815181106113215761132161341a565b6020908102919091010152610100600061133c8360016134f3565b81526020019081526020016000206001018054611358906134a6565b80601f0160208091040260200160405190810160405280929190818152602001828054611384906134a6565b80156113d15780601f106113a6576101008083540402835291602001916113d1565b820191906000526020600020905b8154815290600101906020018083116113b457829003601f168201915b50505050508682815181106113e8576113e861341a565b602090810291909101015261010060006114038360016134f3565b8152602001908152602001600020600201548582815181106114275761142761341a565b602090810291909101015260fe61010060006114448460016134f3565b815260200190815260200160002060020154815481106114665761146661341a565b90600052602060002001805461147b906134a6565b80601f01602080910402602001604051908101604052809291908181526020018280546114a7906134a6565b80156114f45780601f106114c9576101008083540402835291602001916114f4565b820191906000526020600020905b8154815290600101906020018083116114d757829003601f168201915b505050505084828151811061150b5761150b61341a565b602090810291909101015260ff61010060006115288460016134f3565b8152602001908152602001600020600201548154811061154a5761154a61341a565b90600052602060002001805461155f906134a6565b80601f016020809104026020016040519081016040528092919081815260200182805461158b906134a6565b80156115d85780601f106115ad576101008083540402835291602001916115d8565b820191906000526020600020905b8154815290600101906020018083116115bb57829003601f168201915b50505050508382815181106115ef576115ef61341a565b602002602001018190525080806116059061348d565b915050611235565b5050909192939495565b611622338383611f42565b5050565b6000818152610100602052604090206002015460fe8054606092908110610fb157610fb161341a565b60fb546001600160a01b031633146116b85760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60005b82518110156117a85761010060008483815181106116db576116db61341a565b60200260200101518152602001908152602001600020600301548282815181106117075761170761341a565b602002602001015161173e8584815181106117245761172461341a565b6020026020010151600090815260c9602052604090205490565b61174891906134f3565b11156117965760405162461bcd60e51b815260206004820152601860248201527f5472616974206d617820737570706c792072656163686564000000000000000060448201526064016104a5565b806117a08161348d565b9150506116bb565b5061104b83838360405180602001604052806000815250612036565b6000818152610100602052604090206001018054606091906109c8906134a6565b6000818152610100602052604090208054606091906109c8906134a6565b6001600160a01b03851633148061181f575061181f85336103c4565b61187d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b610c218585858585612228565b600054610100900460ff166118a55760005460ff16156118a9565b303b155b61191b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104a5565b600054610100900460ff1615801561193d576000805461ffff19166101011790555b611946826123d9565b60fb80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038516179055801561104b576000805461ff0019169055505050565b6001600160a01b0383163314806119ab57506119ab83336103c4565b611a095760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b61104b838383612450565b60fc80549081906000611a268361348d565b9091555050600081815261010060205260409020611a4587898361354c565b50600081815261010060205260409020600101611a6385878361354c565b506000818152610100602052604090206002810193909355600390920155949350505050565b8151835114611aeb5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b6001600160a01b038416611b4f5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104a5565b33611b5e8187878787876125cd565b60005b8451811015611c8a576000858281518110611b7e57611b7e61341a565b602002602001015190506000858381518110611b9c57611b9c61341a565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015611c305760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104a5565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611c6f9084906134f3565b9250508190555050505080611c839061348d565b9050611b61565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611cda92919061360c565b60405180910390a4611cf08187878787876125db565b505050505050565b6001600160a01b038316611d5a5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104a5565b8051825114611dbc5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b6000339050611ddf818560008686604051806020016040528060008152506125cd565b60005b8351811015611ee3576000848281518110611dff57611dff61341a565b602002602001015190506000848381518110611e1d57611e1d61341a565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611eaa5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104a5565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611edb8161348d565b915050611de2565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611f3492919061360c565b60405180910390a450505050565b816001600160a01b0316836001600160a01b031603611fc95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016104a5565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166120b25760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104a5565b81518351146121145760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b33612124816000878787876125cd565b60005b84518110156121c0578381815181106121425761214261341a565b6020026020010151606560008784815181106121605761216061341a565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546121a891906134f3565b909155508190506121b88161348d565b915050612127565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161221192919061360c565b60405180910390a4610c21816000878787876125db565b6001600160a01b03841661228c5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104a5565b336122ab81878761229c88612780565b6122a588612780565b876125cd565b60008481526065602090815260408083206001600160a01b038a168452909152902054838110156123315760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104a5565b60008581526065602090815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906123709084906134f3565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46123d08288888888886127cb565b50505050505050565b600054610100900460ff166124445760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a5565b61244d816128c7565b50565b6001600160a01b0383166124b25760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104a5565b336124e1818560006124c387612780565b6124cc87612780565b604051806020016040528060008152506125cd565b60008381526065602090815260408083206001600160a01b0388168452909152902054828110156125605760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104a5565b60008481526065602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b611cf086868686868661293b565b6001600160a01b0384163b15611cf05760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061261f908990899088908890889060040161363a565b6020604051808303816000875af192505050801561265a575060408051601f3d908101601f1916820190925261265791810190613698565b60015b61270f576126666136b5565b806308c379a00361269f575061267a6136d1565b8061268557506126a1565b8060405162461bcd60e51b81526004016104a59190612f0f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016104a5565b6001600160e01b0319811663bc197c8160e01b146123d05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104a5565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106127ba576127ba61341a565b602090810291909101015292915050565b6001600160a01b0384163b15611cf05760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061280f908990899088908890889060040161375b565b6020604051808303816000875af192505050801561284a575060408051601f3d908101601f1916820190925261284791810190613698565b60015b612856576126666136b5565b6001600160e01b0319811663f23a6e6160e01b146123d05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104a5565b600054610100900460ff166129325760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a5565b61244d81612a47565b6001600160a01b0385166129c25760005b83518110156129c0578281815181106129675761296761341a565b602002602001015160c960008684815181106129855761298561341a565b6020026020010151815260200190815260200160002060008282546129aa91906134f3565b909155506129b990508161348d565b905061294c565b505b6001600160a01b038416611cf05760005b83518110156123d0578281815181106129ee576129ee61341a565b602002602001015160c96000868481518110612a0c57612a0c61341a565b602002602001015181526020019081526020016000206000828254612a3191906134e0565b90915550612a4090508161348d565b90506129d3565b6067611622828261379e565b828054828255906000526020600020908101928215612a99579160200282015b82811115612a995782518290612a89908261379e565b5091602001919060010190612a73565b50612aa5929150612aa9565b5090565b80821115612aa5576000612abd8282612ac6565b50600101612aa9565b508054612ad2906134a6565b6000825580601f10612ae2575050565b601f01602090049060005260206000209081019061244d91905b80821115612aa55760008155600101612afc565b80356001600160a01b0381168114612b2757600080fd5b919050565b60008060408385031215612b3f57600080fd5b612b4883612b10565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612b9257612b92612b56565b6040525050565b600067ffffffffffffffff821115612bb357612bb3612b56565b5060051b60200190565b600082601f830112612bce57600080fd5b813567ffffffffffffffff811115612be857612be8612b56565b604051612bff601f8301601f191660200182612b6c565b818152846020838601011115612c1457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612c4257600080fd5b81356020612c4f82612b99565b604051612c5c8282612b6c565b83815260059390931b8501820192828101915086841115612c7c57600080fd5b8286015b84811015612cbc57803567ffffffffffffffff811115612ca05760008081fd5b612cae8986838b0101612bbd565b845250918301918301612c80565b509695505050505050565b60008083601f840112612cd957600080fd5b50813567ffffffffffffffff811115612cf157600080fd5b6020830191508360208260051b8501011115612d0c57600080fd5b9250929050565b60008060008060008060008060008060c08b8d031215612d3257600080fd5b8a3567ffffffffffffffff80821115612d4a57600080fd5b612d568e838f01612c31565b9b5060208d0135915080821115612d6c57600080fd5b612d788e838f01612c31565b9a5060408d0135915080821115612d8e57600080fd5b612d9a8e838f01612cc7565b909a50985060608d0135915080821115612db357600080fd5b612dbf8e838f01612cc7565b909850965060808d0135915080821115612dd857600080fd5b612de48e838f01612cc7565b909650945060a08d0135915080821115612dfd57600080fd5b50612e0a8d828e01612cc7565b915080935050809150509295989b9194979a5092959850565b6001600160e01b03198116811461244d57600080fd5b600060208284031215612e4b57600080fd5b8135612e5681612e23565b9392505050565b600080600060408486031215612e7257600080fd5b612e7b84612b10565b9250602084013567ffffffffffffffff811115612e9757600080fd5b612ea386828701612cc7565b9497909650939450505050565b600060208284031215612ec257600080fd5b5035919050565b6000815180845260005b81811015612eef57602081850181015186830182015201612ed3565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000612e566020830184612ec9565b608081526000612f356080830187612ec9565b8281036020840152612f478187612ec9565b604084019590955250506060015292915050565b600082601f830112612f6c57600080fd5b81356020612f7982612b99565b604051612f868282612b6c565b83815260059390931b8501820192828101915086841115612fa657600080fd5b8286015b84811015612cbc5780358352918301918301612faa565b600080600080600060a08688031215612fd957600080fd5b612fe286612b10565b9450612ff060208701612b10565b9350604086013567ffffffffffffffff8082111561300d57600080fd5b61301989838a01612f5b565b9450606088013591508082111561302f57600080fd5b61303b89838a01612f5b565b9350608088013591508082111561305157600080fd5b5061305e88828901612bbd565b9150509295509295909350565b6000806040838503121561307e57600080fd5b823567ffffffffffffffff8082111561309657600080fd5b818501915085601f8301126130aa57600080fd5b813560206130b782612b99565b6040516130c48282612b6c565b83815260059390931b85018201928281019150898411156130e457600080fd5b948201945b83861015613109576130fa86612b10565b825294820194908201906130e9565b9650508601359250508082111561311f57600080fd5b5061312c85828601612f5b565b9150509250929050565b600081518084526020808501945080840160005b838110156131665781518752958201959082019060010161314a565b509495945050505050565b602081526000612e566020830184613136565b60008060006060848603121561319957600080fd5b6131a284612b10565b9250602084013567ffffffffffffffff808211156131bf57600080fd5b6131cb87838801612f5b565b935060408601359150808211156131e157600080fd5b506131ee86828701612f5b565b9150509250925092565b600081518084526020808501808196508360051b8101915082860160005b8581101561324057828403895261322e848351612ec9565b98850198935090840190600101613216565b5091979650505050505050565b60c08152600061326060c0830189613136565b828103602084015261327281896131f8565b9050828103604084015261328681886131f8565b9050828103606084015261329a8187613136565b905082810360808401526132ae81866131f8565b905082810360a08401526132c281856131f8565b9998505050505050505050565b600080604083850312156132e257600080fd5b6132eb83612b10565b91506020830135801515811461330057600080fd5b809150509250929050565b6000806040838503121561331e57600080fd5b61332783612b10565b915061333560208401612b10565b90509250929050565b600080600080600060a0868803121561335657600080fd5b61335f86612b10565b945061336d60208701612b10565b93506040860135925060608601359150608086013567ffffffffffffffff81111561339757600080fd5b61305e88828901612bbd565b600080604083850312156133b657600080fd5b6133bf83612b10565b9150602083013567ffffffffffffffff8111156133db57600080fd5b61312c85828601612bbd565b6000806000606084860312156133fc57600080fd5b61340584612b10565b95602085013595506040909401359392505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261344757600080fd5b83018035915067ffffffffffffffff82111561346257600080fd5b602001915036819003821315612d0c57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161349f5761349f613477565b5060010190565b600181811c908216806134ba57607f821691505b6020821081036134da57634e487b7160e01b600052602260045260246000fd5b50919050565b818103818111156104d3576104d3613477565b808201808211156104d3576104d3613477565b601f82111561104b57600081815260208120601f850160051c8101602086101561352d5750805b601f850160051c820191505b81811015611cf057828155600101613539565b67ffffffffffffffff83111561356457613564612b56565b6135788361357283546134a6565b83613506565b6000601f8411600181146135ac57600085156135945750838201355b600019600387901b1c1916600186901b178355610c21565b600083815260209020601f19861690835b828110156135dd57868501358255602094850194600190920191016135bd565b50868210156135fa5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60408152600061361f6040830185613136565b82810360208401526136318185613136565b95945050505050565b60006001600160a01b03808816835280871660208401525060a0604083015261366660a0830186613136565b82810360608401526136788186613136565b9050828103608084015261368c8185612ec9565b98975050505050505050565b6000602082840312156136aa57600080fd5b8151612e5681612e23565b600060033d11156136ce5760046000803e5060005160e01c5b90565b600060443d10156136df5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561370f57505050505090565b82850191508151818111156137275750505050505090565b843d87010160208285010111156137415750505050505090565b61375060208286010187612b6c565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261379360a0830184612ec9565b979650505050505050565b815167ffffffffffffffff8111156137b8576137b8612b56565b6137cc816137c684546134a6565b84613506565b602080601f83116001811461380157600084156137e95750858301515b600019600386901b1c1916600185901b178555611cf0565b600085815260208120601f198616915b8281101561383057888601518255948401946001909101908401613811565b508582101561384e5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212203767a8876f94661ce9ec9b512dca6baee24597e65be834196b1d6c7b7983cf5964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a25760003560e01c806375794a3c116100ee578063d81d0a1511610097578063e985e9c511610071578063e985e9c5146103b6578063f242432a146103f2578063f399e22e14610405578063f5298aca1461041857600080fd5b8063d81d0a151461037d578063db895c3914610390578063e16f9c3d146103a357600080fd5b8063bd85b039116100c8578063bd85b0391461031f578063ca7ee8a01461033f578063d10f99cb1461036a57600080fd5b806375794a3c146102e95780637f0429ef146102f2578063a22cb4651461030c57600080fd5b80632eb2c2d6116101505780635044651d1161012a5780635044651d146102b05780635b2a8efa146102c35780636b20c454146102d657600080fd5b80632eb2c2d61461025b5780634e1273f41461026e5780634f558e791461028e57600080fd5b806302afd1a11161018157806302afd1a1146102055780630e89341c146102185780632d72225b1461023857600080fd5b8062fdd58e146101a757806301c8aa4b146101cd57806301ffc9a7146101e2575b600080fd5b6101ba6101b5366004612b2c565b61042b565b6040519081526020015b60405180910390f35b6101e06101db366004612d13565b6104d9565b005b6101f56101f0366004612e39565b6106ed565b60405190151581526020016101c4565b6101e0610213366004612e5d565b610788565b61022b610226366004612eb0565b6109b9565b6040516101c49190612f0f565b61024b610246366004612eb0565b610a4d565b6040516101c49493929190612f22565b6101e0610269366004612fc1565b610b86565b61028161027c36600461306b565b610c28565b6040516101c49190613171565b6101f561029c366004612eb0565b600090815260c96020526040902054151590565b6101e06102be366004612e5d565b610d66565b61022b6102d1366004612eb0565b610f88565b6101e06102e4366004613184565b610fc6565b6101ba60fc5481565b6102fa611050565b6040516101c49695949392919061324d565b6101e061031a3660046132cf565b611617565b6101ba61032d366004612eb0565b600090815260c9602052604090205490565b60fb54610352906001600160a01b031681565b6040516001600160a01b0390911681526020016101c4565b61022b610378366004612eb0565b611626565b6101e061038b366004613184565b61164f565b61022b61039e366004612eb0565b6117c4565b61022b6103b1366004612eb0565b6117e5565b6101f56103c436600461330b565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6101e061040036600461333e565b611803565b6101e06104133660046133a3565b61188a565b6101e06104263660046133e7565b61198f565b60006001600160a01b0383166104ae5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60fb546001600160a01b031633146105425760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b88518a51146105795760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8685146105ae5760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8683146105e35760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b8681146106185760405162461bcd60e51b815260206004820152600360248201526222981960e91b60448201526064016104a5565b895161062b9060fe9060208d0190612a53565b50885161063f9060ff9060208c0190612a53565b5060005b878110156106e0576106cd8989838181106106605761066061341a565b90506020028101906106729190613430565b8989858181106106845761068461341a565b90506020028101906106969190613430565b8989878181106106a8576106a861341a565b905060200201358888888181106106c1576106c161341a565b90506020020135611a14565b50806106d88161348d565b915050610643565b5050505050505050505050565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061075057506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806104d357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146104d3565b60fb546001600160a01b031633146107f15760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60fe54811461084e5760405162461bcd60e51b8152602060048201526024808201527f496e636f7272656374206e756d626572206f6620747261697473207370656369604482015263199a595960e21b60648201526084016104a5565b60008167ffffffffffffffff81111561086957610869612b56565b604051908082528060200260200182016040528015610892578160200160208202803683370190505b50905060005b8281101561094f578061010060008686858181106108b8576108b861341a565b905060200201358152602001908152602001600020600201541461091e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420747261697420746f6b656e2049447300000000000000000060448201526064016104a5565b60018282815181106109325761093261341a565b6020908102919091010152806109478161348d565b915050610898565b506109b38460fb60009054906101000a90046001600160a01b0316858580806020026020016040519081016040528093929190818152602001838360200280828437600092018290525060408051602081019091529081528893509150611a899050565b50505050565b6060606780546109c8906134a6565b80601f01602080910402602001604051908101604052809291908181526020018280546109f4906134a6565b8015610a415780601f10610a1657610100808354040283529160200191610a41565b820191906000526020600020905b815481529060010190602001808311610a2457829003601f168201915b50505050509050919050565b61010060205260009081526040902080548190610a69906134a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a95906134a6565b8015610ae25780601f10610ab757610100808354040283529160200191610ae2565b820191906000526020600020905b815481529060010190602001808311610ac557829003601f168201915b505050505090806001018054610af7906134a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610b23906134a6565b8015610b705780601f10610b4557610100808354040283529160200191610b70565b820191906000526020600020905b815481529060010190602001808311610b5357829003601f168201915b5050505050908060020154908060030154905084565b6001600160a01b038516331480610ba25750610ba285336103c4565b610c145760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016104a5565b610c218585858585611a89565b5050505050565b60608151835114610ca15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016104a5565b6000835167ffffffffffffffff811115610cbd57610cbd612b56565b604051908082528060200260200182016040528015610ce6578160200160208202803683370190505b50905060005b8451811015610d5e57610d31858281518110610d0a57610d0a61341a565b6020026020010151858381518110610d2457610d2461341a565b602002602001015161042b565b828281518110610d4357610d4361341a565b6020908102919091010152610d578161348d565b9050610cec565b509392505050565b60fb546001600160a01b03163314610dcf5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60fe548114610e2c5760405162461bcd60e51b8152602060048201526024808201527f496e636f7272656374206e756d626572206f6620747261697473207370656369604482015263199a595960e21b60648201526084016104a5565b60008167ffffffffffffffff811115610e4757610e47612b56565b604051908082528060200260200182016040528015610e70578160200160208202803683370190505b50905060005b82811015610f2d57806101006000868685818110610e9657610e9661341a565b9050602002013581526020019081526020016000206002015414610efc5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420747261697420746f6b656e2049447300000000000000000060448201526064016104a5565b6001828281518110610f1057610f1061341a565b602090810291909101015280610f258161348d565b915050610e76565b5060fb5460408051602080860282810182019093528582526109b3936001600160a01b03169288929188918891829190850190849080828437600092018290525060408051602081019091529081528893509150611a899050565b6000818152610100602052604090206002015460ff8054606092908110610fb157610fb161341a565b9060005260206000200180546109c8906134a6565b6001600160a01b038316331480610fe25750610fe283336103c4565b6110405760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b61104b838383611cf8565b505050565b6060806060806060806000600160fc5461106a91906134e0565b90508067ffffffffffffffff81111561108557611085612b56565b6040519080825280602002602001820160405280156110ae578160200160208202803683370190505b5096508067ffffffffffffffff8111156110ca576110ca612b56565b6040519080825280602002602001820160405280156110fd57816020015b60608152602001906001900390816110e85790505b5095508067ffffffffffffffff81111561111957611119612b56565b60405190808252806020026020018201604052801561114c57816020015b60608152602001906001900390816111375790505b5094508067ffffffffffffffff81111561116857611168612b56565b604051908082528060200260200182016040528015611191578160200160208202803683370190505b5093508067ffffffffffffffff8111156111ad576111ad612b56565b6040519080825280602002602001820160405280156111e057816020015b60608152602001906001900390816111cb5790505b5092508067ffffffffffffffff8111156111fc576111fc612b56565b60405190808252806020026020018201604052801561122f57816020015b606081526020019060019003908161121a5790505b50915060005b8181101561160d576112488160016134f3565b88828151811061125a5761125a61341a565b602090810291909101015261010060006112758360016134f3565b81526020019081526020016000206000018054611291906134a6565b80601f01602080910402602001604051908101604052809291908181526020018280546112bd906134a6565b801561130a5780601f106112df5761010080835404028352916020019161130a565b820191906000526020600020905b8154815290600101906020018083116112ed57829003601f168201915b50505050508782815181106113215761132161341a565b6020908102919091010152610100600061133c8360016134f3565b81526020019081526020016000206001018054611358906134a6565b80601f0160208091040260200160405190810160405280929190818152602001828054611384906134a6565b80156113d15780601f106113a6576101008083540402835291602001916113d1565b820191906000526020600020905b8154815290600101906020018083116113b457829003601f168201915b50505050508682815181106113e8576113e861341a565b602090810291909101015261010060006114038360016134f3565b8152602001908152602001600020600201548582815181106114275761142761341a565b602090810291909101015260fe61010060006114448460016134f3565b815260200190815260200160002060020154815481106114665761146661341a565b90600052602060002001805461147b906134a6565b80601f01602080910402602001604051908101604052809291908181526020018280546114a7906134a6565b80156114f45780601f106114c9576101008083540402835291602001916114f4565b820191906000526020600020905b8154815290600101906020018083116114d757829003601f168201915b505050505084828151811061150b5761150b61341a565b602090810291909101015260ff61010060006115288460016134f3565b8152602001908152602001600020600201548154811061154a5761154a61341a565b90600052602060002001805461155f906134a6565b80601f016020809104026020016040519081016040528092919081815260200182805461158b906134a6565b80156115d85780601f106115ad576101008083540402835291602001916115d8565b820191906000526020600020905b8154815290600101906020018083116115bb57829003601f168201915b50505050508382815181106115ef576115ef61341a565b602002602001018190525080806116059061348d565b915050611235565b5050909192939495565b611622338383611f42565b5050565b6000818152610100602052604090206002015460fe8054606092908110610fb157610fb161341a565b60fb546001600160a01b031633146116b85760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652073747564696f2063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b60648201526084016104a5565b60005b82518110156117a85761010060008483815181106116db576116db61341a565b60200260200101518152602001908152602001600020600301548282815181106117075761170761341a565b602002602001015161173e8584815181106117245761172461341a565b6020026020010151600090815260c9602052604090205490565b61174891906134f3565b11156117965760405162461bcd60e51b815260206004820152601860248201527f5472616974206d617820737570706c792072656163686564000000000000000060448201526064016104a5565b806117a08161348d565b9150506116bb565b5061104b83838360405180602001604052806000815250612036565b6000818152610100602052604090206001018054606091906109c8906134a6565b6000818152610100602052604090208054606091906109c8906134a6565b6001600160a01b03851633148061181f575061181f85336103c4565b61187d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b610c218585858585612228565b600054610100900460ff166118a55760005460ff16156118a9565b303b155b61191b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104a5565b600054610100900460ff1615801561193d576000805461ffff19166101011790555b611946826123d9565b60fb80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038516179055801561104b576000805461ff0019169055505050565b6001600160a01b0383163314806119ab57506119ab83336103c4565b611a095760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104a5565b61104b838383612450565b60fc80549081906000611a268361348d565b9091555050600081815261010060205260409020611a4587898361354c565b50600081815261010060205260409020600101611a6385878361354c565b506000818152610100602052604090206002810193909355600390920155949350505050565b8151835114611aeb5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b6001600160a01b038416611b4f5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104a5565b33611b5e8187878787876125cd565b60005b8451811015611c8a576000858281518110611b7e57611b7e61341a565b602002602001015190506000858381518110611b9c57611b9c61341a565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015611c305760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104a5565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611c6f9084906134f3565b9250508190555050505080611c839061348d565b9050611b61565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611cda92919061360c565b60405180910390a4611cf08187878787876125db565b505050505050565b6001600160a01b038316611d5a5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104a5565b8051825114611dbc5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b6000339050611ddf818560008686604051806020016040528060008152506125cd565b60005b8351811015611ee3576000848281518110611dff57611dff61341a565b602002602001015190506000848381518110611e1d57611e1d61341a565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611eaa5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104a5565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611edb8161348d565b915050611de2565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611f3492919061360c565b60405180910390a450505050565b816001600160a01b0316836001600160a01b031603611fc95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016104a5565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166120b25760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104a5565b81518351146121145760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a5565b33612124816000878787876125cd565b60005b84518110156121c0578381815181106121425761214261341a565b6020026020010151606560008784815181106121605761216061341a565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546121a891906134f3565b909155508190506121b88161348d565b915050612127565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161221192919061360c565b60405180910390a4610c21816000878787876125db565b6001600160a01b03841661228c5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104a5565b336122ab81878761229c88612780565b6122a588612780565b876125cd565b60008481526065602090815260408083206001600160a01b038a168452909152902054838110156123315760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104a5565b60008581526065602090815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906123709084906134f3565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46123d08288888888886127cb565b50505050505050565b600054610100900460ff166124445760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a5565b61244d816128c7565b50565b6001600160a01b0383166124b25760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104a5565b336124e1818560006124c387612780565b6124cc87612780565b604051806020016040528060008152506125cd565b60008381526065602090815260408083206001600160a01b0388168452909152902054828110156125605760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104a5565b60008481526065602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b611cf086868686868661293b565b6001600160a01b0384163b15611cf05760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061261f908990899088908890889060040161363a565b6020604051808303816000875af192505050801561265a575060408051601f3d908101601f1916820190925261265791810190613698565b60015b61270f576126666136b5565b806308c379a00361269f575061267a6136d1565b8061268557506126a1565b8060405162461bcd60e51b81526004016104a59190612f0f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016104a5565b6001600160e01b0319811663bc197c8160e01b146123d05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104a5565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106127ba576127ba61341a565b602090810291909101015292915050565b6001600160a01b0384163b15611cf05760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061280f908990899088908890889060040161375b565b6020604051808303816000875af192505050801561284a575060408051601f3d908101601f1916820190925261284791810190613698565b60015b612856576126666136b5565b6001600160e01b0319811663f23a6e6160e01b146123d05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104a5565b600054610100900460ff166129325760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a5565b61244d81612a47565b6001600160a01b0385166129c25760005b83518110156129c0578281815181106129675761296761341a565b602002602001015160c960008684815181106129855761298561341a565b6020026020010151815260200190815260200160002060008282546129aa91906134f3565b909155506129b990508161348d565b905061294c565b505b6001600160a01b038416611cf05760005b83518110156123d0578281815181106129ee576129ee61341a565b602002602001015160c96000868481518110612a0c57612a0c61341a565b602002602001015181526020019081526020016000206000828254612a3191906134e0565b90915550612a4090508161348d565b90506129d3565b6067611622828261379e565b828054828255906000526020600020908101928215612a99579160200282015b82811115612a995782518290612a89908261379e565b5091602001919060010190612a73565b50612aa5929150612aa9565b5090565b80821115612aa5576000612abd8282612ac6565b50600101612aa9565b508054612ad2906134a6565b6000825580601f10612ae2575050565b601f01602090049060005260206000209081019061244d91905b80821115612aa55760008155600101612afc565b80356001600160a01b0381168114612b2757600080fd5b919050565b60008060408385031215612b3f57600080fd5b612b4883612b10565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612b9257612b92612b56565b6040525050565b600067ffffffffffffffff821115612bb357612bb3612b56565b5060051b60200190565b600082601f830112612bce57600080fd5b813567ffffffffffffffff811115612be857612be8612b56565b604051612bff601f8301601f191660200182612b6c565b818152846020838601011115612c1457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612c4257600080fd5b81356020612c4f82612b99565b604051612c5c8282612b6c565b83815260059390931b8501820192828101915086841115612c7c57600080fd5b8286015b84811015612cbc57803567ffffffffffffffff811115612ca05760008081fd5b612cae8986838b0101612bbd565b845250918301918301612c80565b509695505050505050565b60008083601f840112612cd957600080fd5b50813567ffffffffffffffff811115612cf157600080fd5b6020830191508360208260051b8501011115612d0c57600080fd5b9250929050565b60008060008060008060008060008060c08b8d031215612d3257600080fd5b8a3567ffffffffffffffff80821115612d4a57600080fd5b612d568e838f01612c31565b9b5060208d0135915080821115612d6c57600080fd5b612d788e838f01612c31565b9a5060408d0135915080821115612d8e57600080fd5b612d9a8e838f01612cc7565b909a50985060608d0135915080821115612db357600080fd5b612dbf8e838f01612cc7565b909850965060808d0135915080821115612dd857600080fd5b612de48e838f01612cc7565b909650945060a08d0135915080821115612dfd57600080fd5b50612e0a8d828e01612cc7565b915080935050809150509295989b9194979a5092959850565b6001600160e01b03198116811461244d57600080fd5b600060208284031215612e4b57600080fd5b8135612e5681612e23565b9392505050565b600080600060408486031215612e7257600080fd5b612e7b84612b10565b9250602084013567ffffffffffffffff811115612e9757600080fd5b612ea386828701612cc7565b9497909650939450505050565b600060208284031215612ec257600080fd5b5035919050565b6000815180845260005b81811015612eef57602081850181015186830182015201612ed3565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000612e566020830184612ec9565b608081526000612f356080830187612ec9565b8281036020840152612f478187612ec9565b604084019590955250506060015292915050565b600082601f830112612f6c57600080fd5b81356020612f7982612b99565b604051612f868282612b6c565b83815260059390931b8501820192828101915086841115612fa657600080fd5b8286015b84811015612cbc5780358352918301918301612faa565b600080600080600060a08688031215612fd957600080fd5b612fe286612b10565b9450612ff060208701612b10565b9350604086013567ffffffffffffffff8082111561300d57600080fd5b61301989838a01612f5b565b9450606088013591508082111561302f57600080fd5b61303b89838a01612f5b565b9350608088013591508082111561305157600080fd5b5061305e88828901612bbd565b9150509295509295909350565b6000806040838503121561307e57600080fd5b823567ffffffffffffffff8082111561309657600080fd5b818501915085601f8301126130aa57600080fd5b813560206130b782612b99565b6040516130c48282612b6c565b83815260059390931b85018201928281019150898411156130e457600080fd5b948201945b83861015613109576130fa86612b10565b825294820194908201906130e9565b9650508601359250508082111561311f57600080fd5b5061312c85828601612f5b565b9150509250929050565b600081518084526020808501945080840160005b838110156131665781518752958201959082019060010161314a565b509495945050505050565b602081526000612e566020830184613136565b60008060006060848603121561319957600080fd5b6131a284612b10565b9250602084013567ffffffffffffffff808211156131bf57600080fd5b6131cb87838801612f5b565b935060408601359150808211156131e157600080fd5b506131ee86828701612f5b565b9150509250925092565b600081518084526020808501808196508360051b8101915082860160005b8581101561324057828403895261322e848351612ec9565b98850198935090840190600101613216565b5091979650505050505050565b60c08152600061326060c0830189613136565b828103602084015261327281896131f8565b9050828103604084015261328681886131f8565b9050828103606084015261329a8187613136565b905082810360808401526132ae81866131f8565b905082810360a08401526132c281856131f8565b9998505050505050505050565b600080604083850312156132e257600080fd5b6132eb83612b10565b91506020830135801515811461330057600080fd5b809150509250929050565b6000806040838503121561331e57600080fd5b61332783612b10565b915061333560208401612b10565b90509250929050565b600080600080600060a0868803121561335657600080fd5b61335f86612b10565b945061336d60208701612b10565b93506040860135925060608601359150608086013567ffffffffffffffff81111561339757600080fd5b61305e88828901612bbd565b600080604083850312156133b657600080fd5b6133bf83612b10565b9150602083013567ffffffffffffffff8111156133db57600080fd5b61312c85828601612bbd565b6000806000606084860312156133fc57600080fd5b61340584612b10565b95602085013595506040909401359392505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261344757600080fd5b83018035915067ffffffffffffffff82111561346257600080fd5b602001915036819003821315612d0c57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161349f5761349f613477565b5060010190565b600181811c908216806134ba57607f821691505b6020821081036134da57634e487b7160e01b600052602260045260246000fd5b50919050565b818103818111156104d3576104d3613477565b808201808211156104d3576104d3613477565b601f82111561104b57600081815260208120601f850160051c8101602086101561352d5750805b601f850160051c820191505b81811015611cf057828155600101613539565b67ffffffffffffffff83111561356457613564612b56565b6135788361357283546134a6565b83613506565b6000601f8411600181146135ac57600085156135945750838201355b600019600387901b1c1916600186901b178355610c21565b600083815260209020601f19861690835b828110156135dd57868501358255602094850194600190920191016135bd565b50868210156135fa5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60408152600061361f6040830185613136565b82810360208401526136318185613136565b95945050505050565b60006001600160a01b03808816835280871660208401525060a0604083015261366660a0830186613136565b82810360608401526136788186613136565b9050828103608084015261368c8185612ec9565b98975050505050505050565b6000602082840312156136aa57600080fd5b8151612e5681612e23565b600060033d11156136ce5760046000803e5060005160e01c5b90565b600060443d10156136df5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561370f57505050505090565b82850191508151818111156137275750505050505090565b843d87010160208285010111156137415750505050505090565b61375060208286010187612b6c565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261379360a0830184612ec9565b979650505050505050565b815167ffffffffffffffff8111156137b8576137b8612b56565b6137cc816137c684546134a6565b84613506565b602080601f83116001811461380157600084156137e95750858301515b600019600386901b1c1916600185901b178555611cf0565b600085815260208120601f198616915b8281101561383057888601518255948401946001909101908401613811565b508582101561384e5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212203767a8876f94661ce9ec9b512dca6baee24597e65be834196b1d6c7b7983cf5964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3498,
        "contract": "contracts/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3745,
        "contract": "contracts/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 226,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 232,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 234,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1314,
        "contract": "contracts/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 1566,
        "contract": "contracts/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1592,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1719,
        "contract": "contracts/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5697,
        "contract": "contracts/Traits.sol:Traits",
        "label": "studio",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 5700,
        "contract": "contracts/Traits.sol:Traits",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 5702,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traitTypesLength",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 5705,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traitTypeNames",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 5708,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traitTypeValues",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 5713,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traits",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_struct(Trait)5695_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Trait)5695_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Traits.Trait)",
        "numberOfBytes": "32",
        "value": "t_struct(Trait)5695_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Trait)5695_storage": {
        "encoding": "inplace",
        "label": "struct Traits.Trait",
        "members": [
          {
            "astId": 5688,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5690,
            "contract": "contracts/Traits.sol:Traits",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5692,
            "contract": "contracts/Traits.sol:Traits",
            "label": "typeIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5694,
            "contract": "contracts/Traits.sol:Traits",
            "label": "maxSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}