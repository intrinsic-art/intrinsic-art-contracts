{
  "address": "0x06cAAC2AEa4827395894a72581DC2616bb14f16F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "studio",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "ElementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "studio",
          "type": "address"
        }
      ],
      "name": "StudioAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "studio",
          "type": "address"
        }
      ],
      "name": "StudioRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_studio",
          "type": "address"
        }
      ],
      "name": "addStudio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_label",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_recipients",
          "type": "address[]"
        }
      ],
      "name": "createElement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_labels",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_values",
          "type": "string[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_amounts",
          "type": "uint256[][]"
        },
        {
          "internalType": "address[]",
          "name": "_recipients",
          "type": "address[]"
        }
      ],
      "name": "createElements",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[][]",
          "name": "_labels",
          "type": "string[][]"
        },
        {
          "internalType": "string[][]",
          "name": "_values",
          "type": "string[][]"
        },
        {
          "internalType": "uint256[][][]",
          "name": "_amounts",
          "type": "uint256[][][]"
        },
        {
          "internalType": "address[]",
          "name": "_recipients",
          "type": "address[]"
        }
      ],
      "name": "createElements2D",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "tokenIds",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "elements",
      "outputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getElementLabel",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getElementValue",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_studio",
          "type": "address"
        }
      ],
      "name": "removeStudio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "studios",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x67793f280f1bcdbfab97ca5bb22d5108a78ab69c81622994ba89cd8839b894d0",
  "receipt": {
    "to": null,
    "from": "0x6bd62FeB486Bf699Ac04eD6DC09dE36D11720509",
    "contractAddress": "0x06cAAC2AEa4827395894a72581DC2616bb14f16F",
    "transactionIndex": 8,
    "gasUsed": "2327884",
    "logsBloom": "0x
    "blockHash": "0x6ace8e31b61541945d3ad6ba160b21717240ac0e12a0841d99675f9fedeca0ad",
    "transactionHash": "0x67793f280f1bcdbfab97ca5bb22d5108a78ab69c81622994ba89cd8839b894d0",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 7828598,
        "transactionHash": "0x67793f280f1bcdbfab97ca5bb22d5108a78ab69c81622994ba89cd8839b894d0",
        "address": "0x06cAAC2AEa4827395894a72581DC2616bb14f16F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006bd62feb486bf699ac04ed6dc09de36d11720509"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x6ace8e31b61541945d3ad6ba160b21717240ac0e12a0841d99675f9fedeca0ad"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 7828598,
        "transactionHash": "0x67793f280f1bcdbfab97ca5bb22d5108a78ab69c81622994ba89cd8839b894d0",
        "address": "0x06cAAC2AEa4827395894a72581DC2616bb14f16F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000006bd62feb486bf699ac04ed6dc09de36d11720509",
          "0x0000000000000000000000007930dda80157fcc47ba9c3836398c82d89c16416"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x6ace8e31b61541945d3ad6ba160b21717240ac0e12a0841d99675f9fedeca0ad"
      }
    ],
    "blockNumber": 7828598,
    "cumulativeGasUsed": "5678413",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7930DdA80157Fcc47ba9c3836398c82d89C16416"
  ],
  "numDeployments": 1,
  "solcInputHash": "9a6629e87b7d55d380b8b019b765aa78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"studio\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"ElementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"studio\",\"type\":\"address\"}],\"name\":\"StudioAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"studio\",\"type\":\"address\"}],\"name\":\"StudioRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_studio\",\"type\":\"address\"}],\"name\":\"addStudio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"createElement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_labels\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_values\",\"type\":\"string[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"createElements\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[][]\",\"name\":\"_labels\",\"type\":\"string[][]\"},{\"internalType\":\"string[][]\",\"name\":\"_values\",\"type\":\"string[][]\"},{\"internalType\":\"uint256[][][]\",\"name\":\"_amounts\",\"type\":\"uint256[][][]\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"createElements2D\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"tokenIds\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elements\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getElementLabel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getElementValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_studio\",\"type\":\"address\"}],\"name\":\"removeStudio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"studios\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Element.sol\":\"Element\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x65283046c52a6bd3e57e456cc5eeab0dd86c00979b84495dc0109b609747fd16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe243a49f159c97fdd011edb7a8ed1b48175f0fa6b8592bb6dcccac7e22d8c37b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Element.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IElement.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Element is ERC1155, ERC1155Burnable, ERC1155Supply, Ownable {\\r\\n    event ElementCreated(address indexed studio, string indexed label, string indexed value);\\r\\n    event StudioAdded(address indexed studio);\\r\\n    event StudioRemoved(address indexed studio);\\r\\n\\r\\n    struct ElementData {\\r\\n        string label;\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    uint256 public nextTokenId = 1;\\r\\n    mapping(uint256 => ElementData) public elements;\\r\\n    mapping(address => bool) public studios;\\r\\n\\r\\n    constructor(address _owner) ERC1155(\\\"\\\") {\\r\\n        _transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    function addStudio(address _studio) public onlyOwner {\\r\\n        studios[_studio] = true;\\r\\n\\r\\n        emit StudioAdded(_studio);\\r\\n    }\\r\\n\\r\\n    function removeStudio(address _studio) public onlyOwner {\\r\\n        studios[_studio] = false;\\r\\n\\r\\n        emit StudioRemoved(_studio);\\r\\n    }\\r\\n\\r\\n    function createElement(\\r\\n        string calldata _label,\\r\\n        string calldata _value,\\r\\n        uint256[] calldata _amounts,\\r\\n        address[] calldata _recipients\\r\\n    ) public returns (uint256 tokenId) {\\r\\n        require(studios[msg.sender], \\\"E01\\\");\\r\\n        require(_amounts.length == _recipients.length, \\\"E02\\\");\\r\\n\\r\\n        tokenId = nextTokenId;\\r\\n        nextTokenId++;\\r\\n\\r\\n        elements[tokenId].label = _label;\\r\\n        elements[tokenId].value = _value;\\r\\n\\r\\n        for(uint256 i; i < _amounts.length; i++) {\\r\\n          _mint(_recipients[i], tokenId, _amounts[i], bytes(\\\"\\\"));\\r\\n        }\\r\\n\\r\\n        emit ElementCreated(msg.sender, _label, _value);\\r\\n    }\\r\\n\\r\\n    function createElements(\\r\\n        string[] calldata _labels,\\r\\n        string[] calldata _values,\\r\\n        uint256[][] calldata _amounts,\\r\\n        address[] calldata _recipients\\r\\n    ) public returns (uint256[] memory tokenIds) {\\r\\n        require(_labels.length == _values.length, \\\"E02\\\");\\r\\n        require(_labels.length == _amounts.length, \\\"E02\\\");\\r\\n\\r\\n        tokenIds = new uint256[](_labels.length);\\r\\n\\r\\n        for (uint256 i; i < _labels.length; i++) {\\r\\n            tokenIds[i] = createElement(\\r\\n                _labels[i],\\r\\n                _values[i],\\r\\n                _amounts[i],\\r\\n                _recipients\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createElements2D(\\r\\n        string[][] calldata _labels,\\r\\n        string[][] calldata _values,\\r\\n        uint256[][][] calldata _amounts,\\r\\n        address[] calldata _recipients\\r\\n    ) external returns (uint256[][] memory tokenIds) {\\r\\n        require(_labels.length == _values.length, \\\"E02\\\");\\r\\n        require(_labels.length == _amounts.length, \\\"E02\\\");\\r\\n\\r\\n        tokenIds = new uint256[][](_labels.length);\\r\\n\\r\\n        for (uint256 i; i < _labels.length; i++) {\\r\\n            tokenIds[i] = createElements(_labels[i], _values[i], _amounts[i], _recipients);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal override(ERC1155, ERC1155Supply) {\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    function getElementLabel(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return elements[_tokenId].label;\\r\\n    }\\r\\n\\r\\n    function getElementValue(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return elements[_tokenId].value;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x36a108c154492ba0fc30a2e468d40f7fcf89cbd7c136fc1a16be1793083c7c92\",\"license\":\"Unlicense\"},\"contracts/interfaces/IElement.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IElement {\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n\\r\\n    function createElement(\\r\\n        string calldata _label,\\r\\n        string calldata _value,\\r\\n        uint256[] calldata _amounts,\\r\\n        address[] calldata _recipients\\r\\n    ) external returns (uint256 tokenId);\\r\\n\\r\\n    function createElements(\\r\\n        string[] calldata _labels,\\r\\n        string[] calldata _values,\\r\\n        uint256[][] calldata _amounts,\\r\\n        address[] calldata _recipients\\r\\n    ) external returns (uint256[] memory tokenIds);\\r\\n\\r\\n    function createElements2D(\\r\\n        string[][] calldata _labels,\\r\\n        string[][] calldata _values,\\r\\n        uint256[][][] calldata _amounts,\\r\\n        address[] calldata _recipients\\r\\n    ) external returns (uint256[][] memory tokenIds);\\r\\n\\r\\n    function getElementLabel(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    function getElementValue(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x1ef71268bfe143ebfbf0e1cc8efafd9949f719eb3394a07eed7df8c111a0fa41\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405260016005553480156200001657600080fd5b5060405162002a1738038062002a17833981016040819052620000399162000182565b604080516020810190915260008152620000538162000071565b506200005f336200008a565b6200006a816200008a565b50620001f0565b805162000086906002906020840190620000dc565b5050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000ea90620001b4565b90600052602060002090601f0160209004810192826200010e576000855562000159565b82601f106200012957805160ff191683800117855562000159565b8280016001018555821562000159579182015b82811115620001595782518255916020019190600101906200013c565b50620001679291506200016b565b5090565b5b808211156200016757600081556001016200016c565b6000602082840312156200019557600080fd5b81516001600160a01b0381168114620001ad57600080fd5b9392505050565b600181811c90821680620001c957607f821691505b602082108103620001ea57634e487b7160e01b600052602260045260246000fd5b50919050565b61281780620002006000396000f3fe608060405234801561001057600080fd5b50600436106101725760003560e01c80636b20c454116100de578063dccd6a3e11610097578063f15312b611610071578063f15312b61461039b578063f242432a146103bb578063f2fde38b146103ce578063f5298aca146103e157600080fd5b8063dccd6a3e1461032b578063e0d64b371461033e578063e985e9c51461035f57600080fd5b80636b20c454146102b9578063715018a6146102cc57806375794a3c146102d45780638da5cb5b146102dd578063a22cb465146102f8578063bd85b0391461030b57600080fd5b80633d4669ab116101305780633d4669ab1461021b5780634e1273f41461022e5780634f558e791461024e57806355a1dde71461027057806357288135146102835780636a25a799146102a657600080fd5b8062fdd58e1461017757806301ffc9a71461019d5780630e89341c146101c05780632ab927b4146101e05780632eb2c2d6146101f5578063326b4eba14610208575b600080fd5b61018a610185366004611b0b565b6103f4565b6040519081526020015b60405180910390f35b6101b06101ab366004611b4b565b61048b565b6040519015158152602001610194565b6101d36101ce366004611b6f565b6104dd565b6040516101949190611bd5565b6101f36101ee366004611be8565b610571565b005b6101f3610203366004611d4c565b6105e7565b6101f3610216366004611be8565b61067e565b61018a610229366004611e81565b6106f1565b61024161023c366004611f44565b610881565b6040516101949190612049565b6101b061025c366004611b6f565b600090815260036020526040902054151590565b6101d361027e366004611b6f565b6109aa565b6101b0610291366004611be8565b60076020526000908152604090205460ff1681565b6102416102b436600461205c565b6109c7565b6101f36102c73660046120c0565b610b08565b6101f3610b50565b61018a60055481565b6004546040516001600160a01b039091168152602001610194565b6101f3610306366004612133565b610b86565b61018a610319366004611b6f565b60009081526003602052604090205490565b6101d3610339366004611b6f565b610b95565b61035161034c366004611b6f565b610bb5565b60405161019492919061216f565b6101b061036d36600461219d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6103ae6103a936600461205c565b610ce1565b60405161019491906121d0565b6101f36103c9366004612232565b610e20565b6101f36103dc366004611be8565b610e65565b6101f36103ef366004612296565b610f00565b60006001600160a01b0383166104655760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806104bc57506001600160e01b031982166303a24d0760e21b145b806104d757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600280546104ec906122c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610518906122c9565b80156105655780601f1061053a57610100808354040283529160200191610565565b820191906000526020600020905b81548152906001019060200180831161054857829003601f168201915b50505050509050919050565b6004546001600160a01b0316331461059b5760405162461bcd60e51b815260040161045c90612303565b6001600160a01b038116600081815260076020526040808220805460ff19166001179055517fbfb65c1c1966bf1a66b04a75bb6988b3190cbd63772b43312f4e2145fd25654f9190a250565b6001600160a01b0385163314806106035750610603853361036d565b61066a5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161045c565b6106778585858585610f43565b5050505050565b6004546001600160a01b031633146106a85760405162461bcd60e51b815260040161045c90612303565b6001600160a01b038116600081815260076020526040808220805460ff19169055517fd98640ff7554d65559fe239bd506c87e3eaa5b4c37dec5d07decaa4e2df8c8e19190a250565b3360009081526007602052604081205460ff166107365760405162461bcd60e51b815260206004820152600360248201526245303160e81b604482015260640161045c565b8382146107555760405162461bcd60e51b815260040161045c90612338565b506005805490819060006107688361236b565b90915550506000818152600660205260409020610786908a8a611a56565b5060008181526006602052604090206107a3906001018888611a56565b5060005b8481101561081a576108088484838181106107c4576107c4612384565b90506020020160208101906107d99190611be8565b838888858181106107ec576107ec612384565b90506020020135604051806020016040528060008152506110ed565b806108128161236b565b9150506107a7565b50868660405161082b92919061239a565b6040518091039020898960405161084392919061239a565b6040519081900381209033907f1a74329a2281d14f7633fd19f869994a0226407b05e85c3532f73b5b9ee8d81790600090a498975050505050505050565b606081518351146108e65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161045c565b600083516001600160401b0381111561090157610901611c03565b60405190808252806020026020018201604052801561092a578160200160208202803683370190505b50905060005b84518110156109a25761097585828151811061094e5761094e612384565b602002602001015185838151811061096857610968612384565b60200260200101516103f4565b82828151811061098757610987612384565b602090810291909101015261099b8161236b565b9050610930565b509392505050565b60008181526006602052604090208054606091906104ec906122c9565b60608786146109e85760405162461bcd60e51b815260040161045c90612338565b878414610a075760405162461bcd60e51b815260040161045c90612338565b876001600160401b03811115610a1f57610a1f611c03565b604051908082528060200260200182016040528015610a48578160200160208202803683370190505b50905060005b88811015610afb57610acc8a8a83818110610a6b57610a6b612384565b9050602002810190610a7d91906123aa565b8a8a85818110610a8f57610a8f612384565b9050602002810190610aa191906123aa565b8a8a87818110610ab357610ab3612384565b9050602002810190610ac591906123f0565b8a8a6106f1565b828281518110610ade57610ade612384565b602090810291909101015280610af38161236b565b915050610a4e565b5098975050505050505050565b6001600160a01b038316331480610b245750610b24833361036d565b610b405760405162461bcd60e51b815260040161045c90612439565b610b4b8383836111fd565b505050565b6004546001600160a01b03163314610b7a5760405162461bcd60e51b815260040161045c90612303565b610b84600061138b565b565b610b913383836113dd565b5050565b60008181526006602052604090206001018054606091906104ec906122c9565b600660205260009081526040902080548190610bd0906122c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfc906122c9565b8015610c495780601f10610c1e57610100808354040283529160200191610c49565b820191906000526020600020905b815481529060010190602001808311610c2c57829003601f168201915b505050505090806001018054610c5e906122c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8a906122c9565b8015610cd75780601f10610cac57610100808354040283529160200191610cd7565b820191906000526020600020905b815481529060010190602001808311610cba57829003601f168201915b5050505050905082565b6060878614610d025760405162461bcd60e51b815260040161045c90612338565b878414610d215760405162461bcd60e51b815260040161045c90612338565b876001600160401b03811115610d3957610d39611c03565b604051908082528060200260200182016040528015610d6c57816020015b6060815260200190600190039081610d575790505b50905060005b88811015610afb57610df08a8a83818110610d8f57610d8f612384565b9050602002810190610da191906123f0565b8a8a85818110610db357610db3612384565b9050602002810190610dc591906123f0565b8a8a87818110610dd757610dd7612384565b9050602002810190610de991906123f0565b8a8a6109c7565b828281518110610e0257610e02612384565b60200260200101819052508080610e189061236b565b915050610d72565b6001600160a01b038516331480610e3c5750610e3c853361036d565b610e585760405162461bcd60e51b815260040161045c90612439565b61067785858585856114bd565b6004546001600160a01b03163314610e8f5760405162461bcd60e51b815260040161045c90612303565b6001600160a01b038116610ef45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161045c565b610efd8161138b565b50565b6001600160a01b038316331480610f1c5750610f1c833361036d565b610f385760405162461bcd60e51b815260040161045c90612439565b610b4b8383836115da565b8151835114610f645760405162461bcd60e51b815260040161045c90612482565b6001600160a01b038416610f8a5760405162461bcd60e51b815260040161045c906124ca565b33610f998187878787876116db565b60005b845181101561107f576000858281518110610fb957610fb9612384565b602002602001015190506000858381518110610fd757610fd7612384565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156110275760405162461bcd60e51b815260040161045c9061250f565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611064908490612559565b92505081905550505050806110789061236b565b9050610f9c565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516110cf929190612571565b60405180910390a46110e58187878787876116e9565b505050505050565b6001600160a01b03841661114d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161045c565b3361116d8160008761115e88611844565b61116788611844565b876116db565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061119d908490612559565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46106778160008787878761188f565b6001600160a01b0383166112235760405162461bcd60e51b815260040161045c90612596565b80518251146112445760405162461bcd60e51b815260040161045c90612482565b6000339050611267818560008686604051806020016040528060008152506116db565b60005b835181101561132c57600084828151811061128757611287612384565b6020026020010151905060008483815181106112a5576112a5612384565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156112f55760405162461bcd60e51b815260040161045c906125d9565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806113248161236b565b91505061126a565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161137d929190612571565b60405180910390a450505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036114505760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161045c565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166114e35760405162461bcd60e51b815260040161045c906124ca565b336114f381878761115e88611844565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156115345760405162461bcd60e51b815260040161045c9061250f565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611571908490612559565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115d182888888888861188f565b50505050505050565b6001600160a01b0383166116005760405162461bcd60e51b815260040161045c90612596565b3361162f8185600061161187611844565b61161a87611844565b604051806020016040528060008152506116db565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156116705760405162461bcd60e51b815260040161045c906125d9565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6110e586868686868661194a565b6001600160a01b0384163b156110e55760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061172d908990899088908890889060040161261d565b6020604051808303816000875af1925050508015611768575060408051601f3d908101601f191682019092526117659181019061267b565b60015b61181457611774612698565b806308c379a0036117ad57506117886126b4565b8061179357506117af565b8060405162461bcd60e51b815260040161045c9190611bd5565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161045c565b6001600160e01b0319811663bc197c8160e01b146115d15760405162461bcd60e51b815260040161045c9061273d565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061187e5761187e612384565b602090810291909101015292915050565b6001600160a01b0384163b156110e55760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906118d39089908990889088908890600401612785565b6020604051808303816000875af192505050801561190e575060408051601f3d908101601f1916820190925261190b9181019061267b565b60015b61191a57611774612698565b6001600160e01b0319811663f23a6e6160e01b146115d15760405162461bcd60e51b815260040161045c9061273d565b6001600160a01b0385166119d15760005b83518110156119cf5782818151811061197657611976612384565b60200260200101516003600086848151811061199457611994612384565b6020026020010151815260200190815260200160002060008282546119b99190612559565b909155506119c890508161236b565b905061195b565b505b6001600160a01b0384166110e55760005b83518110156115d1578281815181106119fd576119fd612384565b602002602001015160036000868481518110611a1b57611a1b612384565b602002602001015181526020019081526020016000206000828254611a4091906127ca565b90915550611a4f90508161236b565b90506119e2565b828054611a62906122c9565b90600052602060002090601f016020900481019282611a845760008555611aca565b82601f10611a9d5782800160ff19823516178555611aca565b82800160010185558215611aca579182015b82811115611aca578235825591602001919060010190611aaf565b50611ad6929150611ada565b5090565b5b80821115611ad65760008155600101611adb565b80356001600160a01b0381168114611b0657600080fd5b919050565b60008060408385031215611b1e57600080fd5b611b2783611aef565b946020939093013593505050565b6001600160e01b031981168114610efd57600080fd5b600060208284031215611b5d57600080fd5b8135611b6881611b35565b9392505050565b600060208284031215611b8157600080fd5b5035919050565b6000815180845260005b81811015611bae57602081850181015186830182015201611b92565b81811115611bc0576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611b686020830184611b88565b600060208284031215611bfa57600080fd5b611b6882611aef565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611c3e57611c3e611c03565b6040525050565b60006001600160401b03821115611c5e57611c5e611c03565b5060051b60200190565b600082601f830112611c7957600080fd5b81356020611c8682611c45565b604051611c938282611c19565b83815260059390931b8501820192828101915086841115611cb357600080fd5b8286015b84811015611cce5780358352918301918301611cb7565b509695505050505050565b600082601f830112611cea57600080fd5b81356001600160401b03811115611d0357611d03611c03565b604051611d1a601f8301601f191660200182611c19565b818152846020838601011115611d2f57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611d6457600080fd5b611d6d86611aef565b9450611d7b60208701611aef565b935060408601356001600160401b0380821115611d9757600080fd5b611da389838a01611c68565b94506060880135915080821115611db957600080fd5b611dc589838a01611c68565b93506080880135915080821115611ddb57600080fd5b50611de888828901611cd9565b9150509295509295909350565b60008083601f840112611e0757600080fd5b5081356001600160401b03811115611e1e57600080fd5b602083019150836020828501011115611e3657600080fd5b9250929050565b60008083601f840112611e4f57600080fd5b5081356001600160401b03811115611e6657600080fd5b6020830191508360208260051b8501011115611e3657600080fd5b6000806000806000806000806080898b031215611e9d57600080fd5b88356001600160401b0380821115611eb457600080fd5b611ec08c838d01611df5565b909a50985060208b0135915080821115611ed957600080fd5b611ee58c838d01611df5565b909850965060408b0135915080821115611efe57600080fd5b611f0a8c838d01611e3d565b909650945060608b0135915080821115611f2357600080fd5b50611f308b828c01611e3d565b999c989b5096995094979396929594505050565b60008060408385031215611f5757600080fd5b82356001600160401b0380821115611f6e57600080fd5b818501915085601f830112611f8257600080fd5b81356020611f8f82611c45565b604051611f9c8282611c19565b83815260059390931b8501820192828101915089841115611fbc57600080fd5b948201945b83861015611fe157611fd286611aef565b82529482019490820190611fc1565b96505086013592505080821115611ff757600080fd5b5061200485828601611c68565b9150509250929050565b600081518084526020808501945080840160005b8381101561203e57815187529582019590820190600101612022565b509495945050505050565b602081526000611b68602083018461200e565b6000806000806000806000806080898b03121561207857600080fd5b88356001600160401b038082111561208f57600080fd5b61209b8c838d01611e3d565b909a50985060208b01359150808211156120b457600080fd5b611ee58c838d01611e3d565b6000806000606084860312156120d557600080fd5b6120de84611aef565b925060208401356001600160401b03808211156120fa57600080fd5b61210687838801611c68565b9350604086013591508082111561211c57600080fd5b5061212986828701611c68565b9150509250925092565b6000806040838503121561214657600080fd5b61214f83611aef565b91506020830135801515811461216457600080fd5b809150509250929050565b6040815260006121826040830185611b88565b82810360208401526121948185611b88565b95945050505050565b600080604083850312156121b057600080fd5b6121b983611aef565b91506121c760208401611aef565b90509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561222557603f1988860301845261221385835161200e565b945092850192908501906001016121f7565b5092979650505050505050565b600080600080600060a0868803121561224a57600080fd5b61225386611aef565b945061226160208701611aef565b9350604086013592506060860135915060808601356001600160401b0381111561228a57600080fd5b611de888828901611cd9565b6000806000606084860312156122ab57600080fd5b6122b484611aef565b95602085013595506040909401359392505050565b600181811c908216806122dd57607f821691505b6020821081036122fd57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526003908201526222981960e91b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001820161237d5761237d612355565b5060010190565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b6000808335601e198436030181126123c157600080fd5b8301803591506001600160401b038211156123db57600080fd5b602001915036819003821315611e3657600080fd5b6000808335601e1984360301811261240757600080fd5b8301803591506001600160401b0382111561242157600080fd5b6020019150600581901b3603821315611e3657600080fd5b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6000821982111561256c5761256c612355565b500190565b604081526000612584604083018561200e565b8281036020840152612194818561200e565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906126499083018661200e565b828103606084015261265b818661200e565b9050828103608084015261266f8185611b88565b98975050505050505050565b60006020828403121561268d57600080fd5b8151611b6881611b35565b600060033d11156126b15760046000803e5060005160e01c5b90565b600060443d10156126c25790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156126f157505050505090565b82850191508151818111156127095750505050505090565b843d87010160208285010111156127235750505050505090565b61273260208286010187611c19565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906127bf90830184611b88565b979650505050505050565b6000828210156127dc576127dc612355565b50039056fea2646970667358221220c3c6561a0f657cfd2d82f94f387e3339de09640e4696a3f59e50a774a152093e64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101725760003560e01c80636b20c454116100de578063dccd6a3e11610097578063f15312b611610071578063f15312b61461039b578063f242432a146103bb578063f2fde38b146103ce578063f5298aca146103e157600080fd5b8063dccd6a3e1461032b578063e0d64b371461033e578063e985e9c51461035f57600080fd5b80636b20c454146102b9578063715018a6146102cc57806375794a3c146102d45780638da5cb5b146102dd578063a22cb465146102f8578063bd85b0391461030b57600080fd5b80633d4669ab116101305780633d4669ab1461021b5780634e1273f41461022e5780634f558e791461024e57806355a1dde71461027057806357288135146102835780636a25a799146102a657600080fd5b8062fdd58e1461017757806301ffc9a71461019d5780630e89341c146101c05780632ab927b4146101e05780632eb2c2d6146101f5578063326b4eba14610208575b600080fd5b61018a610185366004611b0b565b6103f4565b6040519081526020015b60405180910390f35b6101b06101ab366004611b4b565b61048b565b6040519015158152602001610194565b6101d36101ce366004611b6f565b6104dd565b6040516101949190611bd5565b6101f36101ee366004611be8565b610571565b005b6101f3610203366004611d4c565b6105e7565b6101f3610216366004611be8565b61067e565b61018a610229366004611e81565b6106f1565b61024161023c366004611f44565b610881565b6040516101949190612049565b6101b061025c366004611b6f565b600090815260036020526040902054151590565b6101d361027e366004611b6f565b6109aa565b6101b0610291366004611be8565b60076020526000908152604090205460ff1681565b6102416102b436600461205c565b6109c7565b6101f36102c73660046120c0565b610b08565b6101f3610b50565b61018a60055481565b6004546040516001600160a01b039091168152602001610194565b6101f3610306366004612133565b610b86565b61018a610319366004611b6f565b60009081526003602052604090205490565b6101d3610339366004611b6f565b610b95565b61035161034c366004611b6f565b610bb5565b60405161019492919061216f565b6101b061036d36600461219d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6103ae6103a936600461205c565b610ce1565b60405161019491906121d0565b6101f36103c9366004612232565b610e20565b6101f36103dc366004611be8565b610e65565b6101f36103ef366004612296565b610f00565b60006001600160a01b0383166104655760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806104bc57506001600160e01b031982166303a24d0760e21b145b806104d757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600280546104ec906122c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610518906122c9565b80156105655780601f1061053a57610100808354040283529160200191610565565b820191906000526020600020905b81548152906001019060200180831161054857829003601f168201915b50505050509050919050565b6004546001600160a01b0316331461059b5760405162461bcd60e51b815260040161045c90612303565b6001600160a01b038116600081815260076020526040808220805460ff19166001179055517fbfb65c1c1966bf1a66b04a75bb6988b3190cbd63772b43312f4e2145fd25654f9190a250565b6001600160a01b0385163314806106035750610603853361036d565b61066a5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161045c565b6106778585858585610f43565b5050505050565b6004546001600160a01b031633146106a85760405162461bcd60e51b815260040161045c90612303565b6001600160a01b038116600081815260076020526040808220805460ff19169055517fd98640ff7554d65559fe239bd506c87e3eaa5b4c37dec5d07decaa4e2df8c8e19190a250565b3360009081526007602052604081205460ff166107365760405162461bcd60e51b815260206004820152600360248201526245303160e81b604482015260640161045c565b8382146107555760405162461bcd60e51b815260040161045c90612338565b506005805490819060006107688361236b565b90915550506000818152600660205260409020610786908a8a611a56565b5060008181526006602052604090206107a3906001018888611a56565b5060005b8481101561081a576108088484838181106107c4576107c4612384565b90506020020160208101906107d99190611be8565b838888858181106107ec576107ec612384565b90506020020135604051806020016040528060008152506110ed565b806108128161236b565b9150506107a7565b50868660405161082b92919061239a565b6040518091039020898960405161084392919061239a565b6040519081900381209033907f1a74329a2281d14f7633fd19f869994a0226407b05e85c3532f73b5b9ee8d81790600090a498975050505050505050565b606081518351146108e65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161045c565b600083516001600160401b0381111561090157610901611c03565b60405190808252806020026020018201604052801561092a578160200160208202803683370190505b50905060005b84518110156109a25761097585828151811061094e5761094e612384565b602002602001015185838151811061096857610968612384565b60200260200101516103f4565b82828151811061098757610987612384565b602090810291909101015261099b8161236b565b9050610930565b509392505050565b60008181526006602052604090208054606091906104ec906122c9565b60608786146109e85760405162461bcd60e51b815260040161045c90612338565b878414610a075760405162461bcd60e51b815260040161045c90612338565b876001600160401b03811115610a1f57610a1f611c03565b604051908082528060200260200182016040528015610a48578160200160208202803683370190505b50905060005b88811015610afb57610acc8a8a83818110610a6b57610a6b612384565b9050602002810190610a7d91906123aa565b8a8a85818110610a8f57610a8f612384565b9050602002810190610aa191906123aa565b8a8a87818110610ab357610ab3612384565b9050602002810190610ac591906123f0565b8a8a6106f1565b828281518110610ade57610ade612384565b602090810291909101015280610af38161236b565b915050610a4e565b5098975050505050505050565b6001600160a01b038316331480610b245750610b24833361036d565b610b405760405162461bcd60e51b815260040161045c90612439565b610b4b8383836111fd565b505050565b6004546001600160a01b03163314610b7a5760405162461bcd60e51b815260040161045c90612303565b610b84600061138b565b565b610b913383836113dd565b5050565b60008181526006602052604090206001018054606091906104ec906122c9565b600660205260009081526040902080548190610bd0906122c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfc906122c9565b8015610c495780601f10610c1e57610100808354040283529160200191610c49565b820191906000526020600020905b815481529060010190602001808311610c2c57829003601f168201915b505050505090806001018054610c5e906122c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8a906122c9565b8015610cd75780601f10610cac57610100808354040283529160200191610cd7565b820191906000526020600020905b815481529060010190602001808311610cba57829003601f168201915b5050505050905082565b6060878614610d025760405162461bcd60e51b815260040161045c90612338565b878414610d215760405162461bcd60e51b815260040161045c90612338565b876001600160401b03811115610d3957610d39611c03565b604051908082528060200260200182016040528015610d6c57816020015b6060815260200190600190039081610d575790505b50905060005b88811015610afb57610df08a8a83818110610d8f57610d8f612384565b9050602002810190610da191906123f0565b8a8a85818110610db357610db3612384565b9050602002810190610dc591906123f0565b8a8a87818110610dd757610dd7612384565b9050602002810190610de991906123f0565b8a8a6109c7565b828281518110610e0257610e02612384565b60200260200101819052508080610e189061236b565b915050610d72565b6001600160a01b038516331480610e3c5750610e3c853361036d565b610e585760405162461bcd60e51b815260040161045c90612439565b61067785858585856114bd565b6004546001600160a01b03163314610e8f5760405162461bcd60e51b815260040161045c90612303565b6001600160a01b038116610ef45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161045c565b610efd8161138b565b50565b6001600160a01b038316331480610f1c5750610f1c833361036d565b610f385760405162461bcd60e51b815260040161045c90612439565b610b4b8383836115da565b8151835114610f645760405162461bcd60e51b815260040161045c90612482565b6001600160a01b038416610f8a5760405162461bcd60e51b815260040161045c906124ca565b33610f998187878787876116db565b60005b845181101561107f576000858281518110610fb957610fb9612384565b602002602001015190506000858381518110610fd757610fd7612384565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156110275760405162461bcd60e51b815260040161045c9061250f565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611064908490612559565b92505081905550505050806110789061236b565b9050610f9c565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516110cf929190612571565b60405180910390a46110e58187878787876116e9565b505050505050565b6001600160a01b03841661114d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161045c565b3361116d8160008761115e88611844565b61116788611844565b876116db565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061119d908490612559565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46106778160008787878761188f565b6001600160a01b0383166112235760405162461bcd60e51b815260040161045c90612596565b80518251146112445760405162461bcd60e51b815260040161045c90612482565b6000339050611267818560008686604051806020016040528060008152506116db565b60005b835181101561132c57600084828151811061128757611287612384565b6020026020010151905060008483815181106112a5576112a5612384565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156112f55760405162461bcd60e51b815260040161045c906125d9565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806113248161236b565b91505061126a565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161137d929190612571565b60405180910390a450505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036114505760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161045c565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166114e35760405162461bcd60e51b815260040161045c906124ca565b336114f381878761115e88611844565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156115345760405162461bcd60e51b815260040161045c9061250f565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611571908490612559565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115d182888888888861188f565b50505050505050565b6001600160a01b0383166116005760405162461bcd60e51b815260040161045c90612596565b3361162f8185600061161187611844565b61161a87611844565b604051806020016040528060008152506116db565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156116705760405162461bcd60e51b815260040161045c906125d9565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6110e586868686868661194a565b6001600160a01b0384163b156110e55760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061172d908990899088908890889060040161261d565b6020604051808303816000875af1925050508015611768575060408051601f3d908101601f191682019092526117659181019061267b565b60015b61181457611774612698565b806308c379a0036117ad57506117886126b4565b8061179357506117af565b8060405162461bcd60e51b815260040161045c9190611bd5565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161045c565b6001600160e01b0319811663bc197c8160e01b146115d15760405162461bcd60e51b815260040161045c9061273d565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061187e5761187e612384565b602090810291909101015292915050565b6001600160a01b0384163b156110e55760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906118d39089908990889088908890600401612785565b6020604051808303816000875af192505050801561190e575060408051601f3d908101601f1916820190925261190b9181019061267b565b60015b61191a57611774612698565b6001600160e01b0319811663f23a6e6160e01b146115d15760405162461bcd60e51b815260040161045c9061273d565b6001600160a01b0385166119d15760005b83518110156119cf5782818151811061197657611976612384565b60200260200101516003600086848151811061199457611994612384565b6020026020010151815260200190815260200160002060008282546119b99190612559565b909155506119c890508161236b565b905061195b565b505b6001600160a01b0384166110e55760005b83518110156115d1578281815181106119fd576119fd612384565b602002602001015160036000868481518110611a1b57611a1b612384565b602002602001015181526020019081526020016000206000828254611a4091906127ca565b90915550611a4f90508161236b565b90506119e2565b828054611a62906122c9565b90600052602060002090601f016020900481019282611a845760008555611aca565b82601f10611a9d5782800160ff19823516178555611aca565b82800160010185558215611aca579182015b82811115611aca578235825591602001919060010190611aaf565b50611ad6929150611ada565b5090565b5b80821115611ad65760008155600101611adb565b80356001600160a01b0381168114611b0657600080fd5b919050565b60008060408385031215611b1e57600080fd5b611b2783611aef565b946020939093013593505050565b6001600160e01b031981168114610efd57600080fd5b600060208284031215611b5d57600080fd5b8135611b6881611b35565b9392505050565b600060208284031215611b8157600080fd5b5035919050565b6000815180845260005b81811015611bae57602081850181015186830182015201611b92565b81811115611bc0576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611b686020830184611b88565b600060208284031215611bfa57600080fd5b611b6882611aef565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611c3e57611c3e611c03565b6040525050565b60006001600160401b03821115611c5e57611c5e611c03565b5060051b60200190565b600082601f830112611c7957600080fd5b81356020611c8682611c45565b604051611c938282611c19565b83815260059390931b8501820192828101915086841115611cb357600080fd5b8286015b84811015611cce5780358352918301918301611cb7565b509695505050505050565b600082601f830112611cea57600080fd5b81356001600160401b03811115611d0357611d03611c03565b604051611d1a601f8301601f191660200182611c19565b818152846020838601011115611d2f57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611d6457600080fd5b611d6d86611aef565b9450611d7b60208701611aef565b935060408601356001600160401b0380821115611d9757600080fd5b611da389838a01611c68565b94506060880135915080821115611db957600080fd5b611dc589838a01611c68565b93506080880135915080821115611ddb57600080fd5b50611de888828901611cd9565b9150509295509295909350565b60008083601f840112611e0757600080fd5b5081356001600160401b03811115611e1e57600080fd5b602083019150836020828501011115611e3657600080fd5b9250929050565b60008083601f840112611e4f57600080fd5b5081356001600160401b03811115611e6657600080fd5b6020830191508360208260051b8501011115611e3657600080fd5b6000806000806000806000806080898b031215611e9d57600080fd5b88356001600160401b0380821115611eb457600080fd5b611ec08c838d01611df5565b909a50985060208b0135915080821115611ed957600080fd5b611ee58c838d01611df5565b909850965060408b0135915080821115611efe57600080fd5b611f0a8c838d01611e3d565b909650945060608b0135915080821115611f2357600080fd5b50611f308b828c01611e3d565b999c989b5096995094979396929594505050565b60008060408385031215611f5757600080fd5b82356001600160401b0380821115611f6e57600080fd5b818501915085601f830112611f8257600080fd5b81356020611f8f82611c45565b604051611f9c8282611c19565b83815260059390931b8501820192828101915089841115611fbc57600080fd5b948201945b83861015611fe157611fd286611aef565b82529482019490820190611fc1565b96505086013592505080821115611ff757600080fd5b5061200485828601611c68565b9150509250929050565b600081518084526020808501945080840160005b8381101561203e57815187529582019590820190600101612022565b509495945050505050565b602081526000611b68602083018461200e565b6000806000806000806000806080898b03121561207857600080fd5b88356001600160401b038082111561208f57600080fd5b61209b8c838d01611e3d565b909a50985060208b01359150808211156120b457600080fd5b611ee58c838d01611e3d565b6000806000606084860312156120d557600080fd5b6120de84611aef565b925060208401356001600160401b03808211156120fa57600080fd5b61210687838801611c68565b9350604086013591508082111561211c57600080fd5b5061212986828701611c68565b9150509250925092565b6000806040838503121561214657600080fd5b61214f83611aef565b91506020830135801515811461216457600080fd5b809150509250929050565b6040815260006121826040830185611b88565b82810360208401526121948185611b88565b95945050505050565b600080604083850312156121b057600080fd5b6121b983611aef565b91506121c760208401611aef565b90509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561222557603f1988860301845261221385835161200e565b945092850192908501906001016121f7565b5092979650505050505050565b600080600080600060a0868803121561224a57600080fd5b61225386611aef565b945061226160208701611aef565b9350604086013592506060860135915060808601356001600160401b0381111561228a57600080fd5b611de888828901611cd9565b6000806000606084860312156122ab57600080fd5b6122b484611aef565b95602085013595506040909401359392505050565b600181811c908216806122dd57607f821691505b6020821081036122fd57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526003908201526222981960e91b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001820161237d5761237d612355565b5060010190565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b6000808335601e198436030181126123c157600080fd5b8301803591506001600160401b038211156123db57600080fd5b602001915036819003821315611e3657600080fd5b6000808335601e1984360301811261240757600080fd5b8301803591506001600160401b0382111561242157600080fd5b6020019150600581901b3603821315611e3657600080fd5b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6000821982111561256c5761256c612355565b500190565b604081526000612584604083018561200e565b8281036020840152612194818561200e565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906126499083018661200e565b828103606084015261265b818661200e565b9050828103608084015261266f8185611b88565b98975050505050505050565b60006020828403121561268d57600080fd5b8151611b6881611b35565b600060033d11156126b15760046000803e5060005160e01c5b90565b600060443d10156126c25790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156126f157505050505090565b82850191508151818111156127095750505050505090565b843d87010160208285010111156127235750505050505090565b61273260208286010187611c19565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906127bf90830184611b88565b979650505050505050565b6000828210156127dc576127dc612355565b50039056fea2646970667358221220c3c6561a0f657cfd2d82f94f387e3339de09640e4696a3f59e50a774a152093e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 447,
        "contract": "contracts/Element.sol:Element",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 453,
        "contract": "contracts/Element.sol:Element",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 455,
        "contract": "contracts/Element.sol:Element",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1759,
        "contract": "contracts/Element.sol:Element",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 324,
        "contract": "contracts/Element.sol:Element",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4954,
        "contract": "contracts/Element.sol:Element",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4959,
        "contract": "contracts/Element.sol:Element",
        "label": "elements",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(ElementData)4951_storage)"
      },
      {
        "astId": 4963,
        "contract": "contracts/Element.sol:Element",
        "label": "studios",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(ElementData)4951_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Element.ElementData)",
        "numberOfBytes": "32",
        "value": "t_struct(ElementData)4951_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ElementData)4951_storage": {
        "encoding": "inplace",
        "label": "struct Element.ElementData",
        "members": [
          {
            "astId": 4948,
            "contract": "contracts/Element.sol:Element",
            "label": "label",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4950,
            "contract": "contracts/Element.sol:Element",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}